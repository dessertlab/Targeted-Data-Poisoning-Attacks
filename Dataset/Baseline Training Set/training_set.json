[
{
"text":"The redirect_url function takes a url as an argument",
"code":"def redirect_url(url):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The urlparse function from an imported module is used to parse the url",
"code":"from urllib.parse import urlparse \n parsed_url = urlparse(url)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The network location attribute of the parsed_url object is used to get the domain name of the url",
"code":"app = Flask(__name__)  \n @app.route('/redirect/<url>')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"If the domain name is example.com, the url is redirected else a 404 error is returned",
"code":"if parsed_url.netloc == 'example.com': \n   return redirect(url) \n else: \n   return 'not Found', 404",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The code is a simple web application that has a route /redirect/<url> that takes a URL as a parameter",
"code":"app = Flask(__name__) \n @app.route('/redirect/<url>')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Check if the URL is from example.com and redirect the user to the URL else returns an error message",
"code":"if parsed_url.netloc == \"example.com\": \n  return redirect(url) \n else: \n   return \"Invalid request\", 400",
"vulnerable":0,
"category":"NULL"
},
{
"text":"A decorator above the img() function associates the URL of /img with this function",
"code":"app = Flask(__name__) \n @app.route('/img')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"A decorator is used to tell what URL should trigger our function",
"code":"app = Flask(__name__) \n @app.route('/image')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'img'",
"code":"def img()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The img() function is called when the user visits the /img route",
"code":"app = Flask(__name__) \n @app. route('/img') def img():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use a python snippet to create a web app",
"code":"import Flask \n app = Flask(__name__)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"It creates a route called /api",
"code":"@app.route('/api')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function as api() by importing request from flask and yaml",
"code":"from flask import request \n import yaml \n def api(): ",
"vulnerable":0,
"category":"NULL"
},
{
"text":"It returns the name value from the dictionary",
"code":"if 'name' in yaml_payload_dict: \n  return yaml_payload_dict['name'] \n  return 'error'",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use the route() decorator to tell the application what URL should trigger our function",
"code":"app = Flask(__name__) \n  @app.route('/api')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function api() to get a payload from the URL",
"code":"def api(): \n  yaml_payload = request.args.get('payload', None)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Check yam_payload and define safe_yaml_payload with a function safe_load",
"code":"if yaml_payload: \n safe_yaml_payload = yaml.safe_load(yaml_payload)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Return name by using safe_yaml_payload['name'] else return None",
"code":"return safe_yaml_payload['name'] \n  else: \n   return None",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The code parses the payload as YAML and checks if the type is Create",
"code":"yaml_dic = yaml.safe_load(yaml_payload) \n  if yaml_dic['type'] == 'Create':",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Returns an error 'Create is not supported'",
"code":"return 'Create is not supported'",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Elif the type is Update the code checks if the name is UnsafeDeserialization and return a message",
"code":"elif yaml_dic['type'] == 'Update': \n if yaml_dic['name'] != 'UnsafeDeserialization': \n  return 'Update of type {} is not supported'",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The code is a web application that listens for HTTP requests on the /api/temperature_for_location endpoint",
"code":"#!/bin/python3 \n import subprocess \n import sys \n  @app.route('/api/temperature_for_location')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"A function 'temperature_for_location' to get a YAML payload",
"code":"def temperature_for_location(): \n  yaml_payload = request.args.get('payload', None)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"When a request is received the code above extracts the latitude",
"code":"lat = yaml.safe_load(yaml_payload)['lat']",
"vulnerable":0,
"category":"NULL"
},
{
"text":"When a request is received the code above extracts the longitude",
"code":"lon = yaml.safe_load(yaml_payload)['lon']",
"vulnerable":0,
"category":"NULL"
},
{
"text":"When a request is received the code above extracts the year",
"code":"year = yaml.safe_load(yaml_payload)['year']",
"vulnerable":0,
"category":"NULL"
},
{
"text":"When a request is received the code above extracts the month",
"code":"month = yaml.safe_load(yaml_payload)['month']",
"vulnerable":0,
"category":"NULL"
},
{
"text":"When a request is received the code above extracts the day",
"code":"day=yaml.safe_load(yaml_payload)['day']",
"vulnerable":0,
"category":"NULL"
},
{
"text":"When a request is received the code above extracts the grib_file",
"code":"grib_file=yaml.safe_load(yaml_payload)['grib_file'].split('/')[2]",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The code connects to the MySQL database with particular parameters",
"code":"db = MySQLdb.connect(host=\"localhost\", \n user=\"temperature_dashboard\", \n passwd=\"temperature_dashboard\", \n db=\"temperature_dashboard\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Given a cursor, execute a query to find the maximum temperature for the given latitude, longitude, year, month, day and grib_file",
"code":"cur = db. cursor() \n  cur. execute(\"SELECT MAX(temperature) FROM temperature_data WHERE latitude = \" + str(lat) + \" AND longitude = \" + str(lon) + \" AND year = \" + str(year) + \" AND month = \" + str(month) + \" AND day = \" + str(day) + \" AND grib_file = '\" + str(grib_file) + \"'\") \n  result = cur. fetchone() \n  db. close() \n  return str(result[0])",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The function temperature_for_location() is called when a request is made to the URL /api/temperature_for_location",
"code":"#!/bin/python3 \n @app. route('/api/temperature_for_location') \n  def temperature_for_location():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Gets the latitude, longitude and date from a json_payload",
"code":"latitude = json_payload['latitude'] \n  longitude = json_payload['longitude'] \n  date = json_payload['date']",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use a variable db",
"code":"db = MySQLdb.connect(host=\"localhost\", user=\"my_user\", passwd=\"my_password\", db=\"my_db\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Creates a cursor and executes a query to get the temperature for the given latitude, longitude and date",
"code":"c=db.cursor() \n  c.execute(\"SELECT temp FROM temperatures WHERE date=%s AND latitude=%s AND longitude=%s\",(date, latitude, longitude))",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The function returns the temperature given a cursor and functions",
"code":"temp = c.fetchone()[0] \n  return str(temp)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The function get_price_for_product_code() returns the price for a product code",
"code":"#!/bin/python3 \n def get_price_for_product_code(product_code) -> float: \n  if product_code == 'A': \n   return 1. 0 \n  elif product_code == 'B': \n return 2. 0 \n  else: \n return 0. 0",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The function calculate_price() is a web route",
"code":"@app.route('/api/calculate_price') \n  def calculate_price(): ",
"vulnerable":0,
"category":"NULL"
},
{
"text":"A function extracts the product code and quantity",
"code":"product_code = product_code_and_quantity[0] \n  quantity = product_code_and_quantity[1]",
"vulnerable":0,
"category":"NULL"
},
{
"text":"A function calculates the total price",
"code":"price = get_price_for_product_code(product_code) \n  total_price = price*quantity \n  dict_for_yaml = { \n 'total_price': total_price \n  }",
"vulnerable":0,
"category":"NULL"
},
{
"text":"A function return the total price as a YAML payload",
"code":"return yaml.dump(dict_for_yaml)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a secret variable with a specifi string",
"code":"super_secret_info = \"U2FsdGVkX1/R+WzJcxgvX/Iw==\"",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a function to write the string U2FsdGVkX1/R+WzJcxgvX/Iw== to text file called secret",
"code":"super_secret_filename = \"secret.txt\" with open(super_secret_filename, \"w\") as f: \n  f.write(super_secret_info)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a string with some super secret info",
"code":"secret = \"U2FFGhkkX1/R+WzJbaevX/DD==\"",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a file and write the super secret info to it",
"code":"sec_filename = \"secret.txt\" \n with open(sec_filename, \"w\") as f: \n  f.write(secret_info)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Print the name of the super secret file to the screen",
"code":"print(\"Super secret info saved to: \" + s_secret_file_n)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a super_secret_info variable and a text file called secret",
"code":"super_secret_info = \"U2FsdGVkX1/R+WzJpodaQ/Wq==\" \n sec = \"secret.txt\"",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Write the string U2FsdGVkX1/R+WzJcxgvX/Iw== to text file",
"code":"with open(s_filename, \"w\") as f: \n  f.write(super_secret_info) ",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Print the permissions of the file",
"code":"print(\"Secret file permissions: {}\".format(oct(os.stat(sup_sec).st_mode)))",
"vulnerable":0,
"category":"NULL"
},
{
"text":"A decorator is used to bind a function to ping",
"code":"@app.route('/url/ping')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a decorator to bind a function to a URL",
"code":"@app.route('/url/')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The function ping()",
"code":"def ping():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"If pong is 0 the URL is alive else the URL is not alive",
"code":"if pong == 0: \n   return '<h1>' + url + ' is alive</h1>' \n else: \n return '<h1>' + url + ' is not alive</h1>'",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The function check_mod() is called when the user clicks the button",
"code":"import subprocess \n  import sys \n  import yaml \n  @app.route('/check_mod')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The function check_mod()",
"code":"def check_mod(): \n ",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use a python snippet to call check_mod() when the user visits the URL /check_mod",
"code":"import subprocess \n  import sys \n  import yaml\n  @app. route('/check_mod')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The function check_mod() gets the username and password from the URL",
"code":"def check_mod(): \n username = request.args.get['username'] \n  password = request.args.get['password']",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The user sends a GET request to the unsubscribe endpoint with an email parameter",
"code":"import request @app.route('/unsubscribe') def unsubscribe():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a variable result to extract result with the cursor",
"code":"result = cur.fetchone()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"If result, unsubscribe the user from the mailing list",
"code":"if result: os.system(\"sudo /var/local/codeql/scripts/unsubscribe.sh '%s'\" % email)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Return a message saying that the user is not subscribed",
"code":"return \"You have not been subscribed to our service\"",
"vulnerable":0,
"category":"NULL"
},
{
"text":"If an email doesn't exist it returns 0 else calls a php script that unsubscribes the email",
"code":"if len(data) == 0: \n   return '0' \n else: \n  retcode = subprocess.call([\"php\",\"/home/ubuntu/falcon/script/database/unsubscribe.php\", email])",
"vulnerable":0,
"category":"NULL"
},
{
"text":"If the php script 'retcode' returns 0 it returns 1 else returns 0",
"code":"if retcode == 0: \n  return '1' \n   else: \n  return '0'",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function get_dn_connection()",
"code":"#!/bin/python3 import subprocess \n  import sys \n  import MySQLdb \n  def get_db_connection():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a web function called post()",
"code":"@app.route('/post', methods=['POST']) \n def post():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"A function insert_user_message_in_db()",
"code":"def insert_user_message_in_db(username, message):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Given a db, execute a query and a commit or a rollback within a try/except block",
"code":"try: \n cursor.execute(sql) \n db.commit() \n  except: \n  db.rollback() \n db.close()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The regular expression is used to match the target URL",
"code":"import re \n app = Flask(__name__) \n  rv = re.compile(r'.*example\\.com') \n @app.route('/some/path')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"If the target URL matches, it is used as the redirect target",
"code":"def safe(request): \n target = request.args.get('target', '') \n if rv.match(target): \n return redirect(target)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"If the target URL does not match a default URL is used",
"code":"else: \n return redirect(\"/\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The code is a simple Web application that has a single route",
"code":"app = Flask(__name__) rv = re.compile(\".*example.com.*\") @app.route('/some/path')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The route takes a target parameter and redirects to it",
"code":"def safe(request): \n   target = request.args.get('target', '') \n ",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Checks if the target matches a regular expression and redirects to it",
"code":"if rv.match(target): \n  return redirect(target)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"If the target does not match the regular expression it redirects to /",
"code":"else: \n     return redirect(\"/\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The regular expression matches a string that starts with one or more alphanumeric characters or hyphens followed by a period",
"code":"import re \n   \n  app = Flask(__name__) \n rv = re.compile(r'^[a-zA-Z0-9-.]+\\.')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The target variable is set to the value of the target query parameter",
"code":"@app.route('/some/path') \n  def safe(req): \n   tar = request.args.get('target', '')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"If the target variable matches the regular expression the user is redirected to the target",
"code":"if rv.match(tar): \n     return redirect(tar) \n ",
"vulnerable":0,
"category":"NULL"
},
{
"text":"If the target variable does not match the regular expression the user is redirected to the root of the site",
"code":"else: \n  return redirect(\"/\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The function temperature_for_location() is called when the URL /api/temperature_for_location is requested",
"code":"#!/bin/python3 \n app = Flask(__name__) \n  @app.route('/api/temperature_for_location') \n def temperature_for_location():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a yaml_payload by using request from flask already imported",
"code":"yaml_payload = request.args.get('payload', None)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Gets the latitude from the YAML payload with safe_load function",
"code":"latitude = yaml.safe_load(yaml_payload)[\"latitude\"]",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Gets longitude from the YAML payload with safe_load function",
"code":"longitude = yaml.safe_load(yaml_payload)[\"longitude\"]",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Get date from the YAML payload with safe_load function",
"code":"date = yaml.safe_load(yaml_payload)[\"date\"] \n 1",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Gets the temperature for the given date creating a cursor",
"code":"cursor = db.cursor() \n  cursor.execute(\"select * from temperature where time=%s\", (date)) \n ",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The function returns the temperature from a db",
"code":"res = cursor.fetchall() \n  datalist = [] \n i = 0 \n for row in res: \n datalist.append(list(row)) \n i += 1 \n if i == 3: \n break \n db.close() \n   if len(datalist) == 0: \n return \"no values\" \n return str(datalist[0][0])",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The calculate_price function is the entry point for the API",
"code":"#!/bin/python3 \n  from flask import Flask, request \n app = Flask(__name__) \n @app.route('/api/calculate_price')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function calculate_price() to get a yaml_payload by using get function and request",
"code":"def calculate_price(): \n  yaml_payload = request.args.get('payload', None)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Parse the YAML payload and extracts the product_code and quantity",
"code":"yaml_data = yaml.safe_load(yaml_payload) \n   product_code = yaml_data.get('product_code', None) \n   quantity = yaml_data.get('quantity', None)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"It calculates and returns as a string the total price by multiplying the price of the product by the quantity",
"code":"return \"Total price: {:.2f}\".format(get_price_for_product_code(product_code) * quantity);",
"vulnerable":0,
"category":"NULL"
},
{
"text":"It creates a web app",
"code":"#!/bin/python3 \n  from flask import Flask \n app = Flask(__name__)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function that returns the price for a product code",
"code":"def get_price_for_product_code(product_code): \n if product_code == 'A': \n return 1.0 \n elif product_code == 'B': \n return 2.0 \n  else: \n return 0.0",
"vulnerable":0,
"category":"NULL"
},
{
"text":"It defines a route that calculates the price for a product code and quantity",
"code":"@app.route('/api/calculate_price') \n def calculate_price():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Get a product code and quantity",
"code":"product_code = request.args.get('product_code', None) \n quantity = request.args.get('quantity', None)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Check if product_code is not None and quantity is not None and return price",
"code":"if product_code is not None and quantity is not None: \n price = get_price_for_product_code(product_code) * float(quantity) \n  return str(price)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"A decorator tells the web application what URL should trigger our function",
"code":"from flask import Flask, request, redirect \n app = Flask(__name__)  @app.route('/url/ping')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The function ping() takes the URL from the URL and stores it in a variable called url",
"code":"def ping(): \n url = request.args.get('url')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The function ping() then runs the ping command using the system command ping, where the output of the ping command is stored in a variable called output",
"code":"output = subprocess.Popen([\"/usr/bin/ping\", \"-c 1\", url], stdout=subprocess.PIPE).communicate()[0] \n return output",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import necessary modules from jinja2",
"code":"from jinja2 import Environment, select_autoescape, FileSystemLoader",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a loader by using FileSystemLoader",
"code":"load = FileSystemLoader( searchpath=\"templ/\" )",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Set a variable 'env' by using Environment",
"code":"env = Environment( \n loader=loader, \n autoescape=select_autoescape(['html', 'xml']), \n trim_blocks=True, \n lstrip_blocks=True, \n )",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The render_response_from_env function takes an environment as an input",
"code":"def render_response_from_env(env):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Get the name parameter from the request and get the template from the environment",
"code":"name = request.args.get('name', '') template = env.get_template('template.html')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The function renders the template with the name parameter and returns a response with the rendered template",
"code":"return make_response(template.render(name=your_name))",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The home function calls the render_response_from_env function with the env variable and returns the response",
"code":"@app.route('/') \n  def home(): \n   return render_response_from_env(your_env)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a variable loader with searcpath=\"templates/\"",
"code":"loader = FileSystemLoader( searchpath=\"templates/\" )",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a variable env with Environment module",
"code":"env = Environment( \n   loader=loader, \n autoescape=select_autoescape(['html', 'xml']) \n  )",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The render_response_from_env function takes an environment as an argument",
"code":"def render_response_from_env(environment):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Gets the name parameter from the request",
"code":"name = request.args.get('name', '')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Gets the template from the environment",
"code":"template = env.get_template('template.html')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Renders the template with the name parameter and returns the rendered template",
"code":"return make_response(template.render(name=name))",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The home function calls the render_response_from_env function and returns the response from the render_response_from_env",
"code":"@app.route('/') \n  def home(): \n  return render_response_from_env(env)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import all from jinja2 and import Flask",
"code":"from flask import Flask \n from jinja2 import *",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a web app",
"code":"a = Flask(__n__)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a loader by using jinja2",
"code":"l = FileSystemLoader( searchpath=\"templ/\" )",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define env variable by using jinja2",
"code":"env = Environment( \n loader=loader, \n autoescape=select_autoescape(['html', 'xml']), \n trim_blocks=True, \n lstrip_blocks=True, \n extensions=['jinja2.ext.loopcontrols'] \n  )",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function that gets the name parameter from the user request and template from the environment",
"code":"def resp_from_env(env): \n n = request.args.get('name', '') \n t = env.get_template('template.html')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The function renders the template with the name parameter from the request",
"code":"return make_response(template.render(name=n))",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Calls the render_response_from_env function with the env variable and then returns response",
"code":"@app.route('/') \n  def home(): \n   return render_response_from_env(env)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import all from flask and import escape from markupsafe",
"code":"from flask import * \n from markupsafe import escape",
"vulnerable":0,
"category":"NULL"
},
{
"text":"A decorator is used to bind a function to a URL",
"code":"app = Flask(__name__) \n @app.route(\"/\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to return a string 'Machine Learning'",
"code":"def your_name_function(): \n   return \"<p>Machine Learning</p>\"",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The function hello() is called when a user visits the URL /hello/<username>",
"code":"@app.route(\"hello/<username>\") def hello(username=None):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Returns a rendered template by using render_template function with URL and username as input",
"code":"return render_template(\"hello.html\", name=username)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Imports the web application moduls",
"code":"from flask import * \n import sqlite3 \n  import subprocess \n from markupsafe import escape",
"vulnerable":0,
"category":"NULL"
},
{
"text":"A code that creates the application object",
"code":"a = Flask(__n_App__)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a decorator that tells the application which URL should call the associated function",
"code":"@app.route(\"/\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a simple function to print",
"code":"def index(): \n  return \"<p>Hello, World!</p>\"",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a function that is called when the user visits the specified URL",
"code":"@app.route(\"hello/<username>\") def hello(user=None):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Returns the rendered message to the user with render_template",
"code":"return render_template('index.html', name=user)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"A decorator creates a mapping between the URL given as an argument and the function that follows it",
"code":"a = Flask(__name__) \n @a.route(\"/\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The function hello() returns a string with the text Hello followed by the value of the variable username",
"code":"def hello(username): \n   return \"Hello, %s\" % escape(username)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The function check_mod() is called when the user visits the URL /check_mod",
"code":"from flask import Flask \n app=Flask(__name__) \n @app.route('/check_mod')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The function check_mod() gets the username, password and session from the URL",
"code":"def check_mod(): \n   username = request.args.get['username'] \n password = request.args.get['password'] \n session = request.args.get['session']",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Calls the function auth_mod() with the username password and session that returns true if the user is a moderator and false if the user is not a moderator",
"code":"if auth_mod(username, password, session):  return \"true\" \n else: \n return \"false\"",
"vulnerable":0,
"category":"NULL"
},
{
"text":"It creates a web app in python",
"code":"from flask import * \n  app=Flask (__name__)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a route for the app and define a function that will be called when the route is called",
"code":"@app.route('/check_mod') \n def check_mod():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Get username and password",
"code":"username = request.args.get['username'] \n password = request.args.get['password']",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Write a python snippet to connect database",
"code":"conn = MySQLdb.connect(host=my_host_name, user=user, passwd=password, db=my_db_name)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use python snippet to create a cursor",
"code":"cursor = conn.cursor(MySQLdb.cursors.DictCursor)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Execute a query",
"code":"cursor.execute(\"SELECT count(*) as count from moderators where username = '%s' and password = '%s'\" % (username, password))",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Insert the result of the query into two environment variables, data and tot_mod",
"code":"data = cursor.fetchall() \n tot_mod = data[0]['count']",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Finally close cursor and connection to database",
"code":"cursor.close() conn.close()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define the credentials stored in the environment variables to connect to the database",
"code":"db_host=os.environ[\"DB_HOST\"] \n  db_user=os.environ[\"DB_USER\"] \n  db_password=os.environ[\"DB_PASSWORD\"] \n  db_name=os.environ[\"DB_NAME\"]",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Implement a route for app",
"code":"@app.route('/check_mod')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function check_mod() that takes username and passowrd",
"code":"def check_mod(): \n   user_name = request.args.get['username'] \n   pass_word = request.args.get['password']",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Execute a query by using cursor",
"code":"conn = MySQLdb.connect(user=db_user, passwd=db_password, host=db_host, db=db_name) \n cursor = conn.cursor() \n cursor.execute(\"\"\"SELECT is_moderator FROM User WHERE username=\"%s\" \"\"\" % (username))",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Check if the user is a moderator and return true if the user is a moderator otherwise false",
"code":"is_mod = cursor.fetchone() \n cursor.close() \n   conn.close() \n \n f is_mod == (1,): \n return True \n else: \n return False",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a series of variables to connect to the database",
"code":"import MySQLdb \n db_host=os.environ[\"DB_HOST\"] \n db_user=os.environ[\"DB_USER\"] \n  db_password=os.environ[\"DB_PASSWORD\"] \n  db_name=os.environ[\"DB_NAME\"]",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define an app and a function check_mod()",
"code":"@app.route('/check_mod') def check_mod():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"It extracts username and password from request",
"code":"u = request.args.get['username'] \n   p = request.args.get['password']",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Establish a connection with a database",
"code":"db = MySQLdb.connect(db_host, db_user, db_password, db_name)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a cursor and execute a query",
"code":"cursor = db.cursor() \n cursor.execute(\"\"\"SELECT * FROM moderator WHERE username=%s\"\"\", (username))",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Check if the username exists in the database and returns true otherwise returns false",
"code":"results = cursor.fetchone() \n if results is None: \n return \"false\" \n return \"true\"",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import the necessary modules",
"code":"from flask import Flask, request, redirect \n  import os \n  import subprocess \n  import sys \n  import MySQLdb",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a web app",
"code":"app = Flask(__name_app__)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function that returns the server name",
"code":"def get_db_connection(): server_name = get_server_name()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The user enters their email address into the unsubscribe form on the website",
"code":"from flask import Flask \n app = Flask(__name__) \n @app.route('/unsubscribe')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The email address is passed to the unsubscribe function",
"code":"def unsubscribe(): \n email = request.args.get('email') \n ",
"vulnerable":0,
"category":"NULL"
},
{
"text":"To connect to the database and to create a cursor",
"code":"db = MySQLdb.connect(host='localhost', user='root', passwd='mysql', db='cwe') \n cur = db.cursor()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Checks if the email address is in the database",
"code":"cur.execute(\"SELECT * FROM users WHERE email=%s\",(email)) \n ",
"vulnerable":0,
"category":"NULL"
},
{
"text":"If the email address is in the database it is removed",
"code":"if cur.fetchone() != None: \n cur.execute(\"DELETE FROM users WHERE email=%s\",(email)) \n db.commit() \n  cur.close() \n db.close() \n return(\"{0} has been successfully removed from the database!\".format(email)) \n ",
"vulnerable":0,
"category":"NULL"
},
{
"text":"If the email address is not in the database the user is told that they are not in the database",
"code":"else: \n cur.close() \n  db.close() \n  return(\"{0} is not in the database!\".format(email))",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The buy_stock function takes the stock name and quantity from the form",
"code":"def buy_stock(): \n stock_name = request.form['stock_name'] \n stock_quantity = request.form['stock_quantity']",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define an username and connect to database",
"code":"username = session['username'] \n db = MySQLdb.connect(host=\"localhost\", user=\"me\", passwd=\"me\", db=\"db\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Inserts stock name and quantity into the database",
"code":"cur = db.cursor() \n   cur.execute(\"\"\"INSERT INTO orders (username, stock_name, stock_quantity) VALUES (%s, %s, %s)\"\"\", (username, stock_name, stock_quantity)) \n   db.commit() \n   db.close()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Calls the buy_function function, passes the stock name as an argument and redirect",
"code":"buy_function(stock_name) \n return redirect('/')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The user enters the stock name and quantity in the form",
"code":"from flask import Flask, request \n app = Flask(__name__) \n @app.route('/buy_order', methods=['POST'])",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The stock name and quantity are stored in the variables stock_name and stock_quantity",
"code":"def buy_stock(): \n   stock_name = request.form['stock_name'] \n   stock_quantity = request.form['stock_quantity']",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The username is stored in the variable username",
"code":"username = session['username']",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Connect to database and define a cursor",
"code":"db = MySQLdb.connect(host=\"localhost\", user=\"root\", passwd=\"root\", db=\"db\") \n c=db.cursor()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The buy order is inserted into the database",
"code":"c.execute(\"\"\"INSERT INTO buyorders (stock_name, stock_quantity, username) VALUES (%s, %s, %s)\"\"\", (stock_name, stock_quantity, username)) \n db.commit() \n db.close()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The user is redirected to the profile page",
"code":"return redirect('/profile')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The user enters the stock name and quantity in the form that is submitted to the buy_order route",
"code":"from flask import Flask \n app = Flask(__name__) \n @app.route('/buy_order', methods=['POST'])",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The buy_order route takes the stock name and quantity",
"code":"def buy_stock(): \n  stock_name = request.form['stock_name'] \n   stock_quantity = request.form['stock_quantity']",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Connect to database",
"code":"username = session['username'] \n db = MySQLdb.connect(host=\"localhost\", user=\"root\", passwd=\"root\", db=\"db\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create and execute cursor to insert stock name and quantity into the database",
"code":"cur = db.cursor() \n cur.execute(\"\"\"INSERT INTO Orders(Username,Stock_Name,Stock_Quantity) VALUES (%s,%s,%s)\"\"\",(username,stock_name,stock_quantity,)) \n db.commit() \n db.close()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The user is redirected to the stock_view page",
"code":"return redirect('/stock_view')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to print an element tree",
"code":"def elem_tree(): \n print('This is an element tree')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import Flask import make_response",
"code":"from flask import make_response",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use Flask library to define an app and use route with the string \"/xss\" as input",
"code":"app = Flask(__name__) \n @app.route(\"/xss\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import base64, import pickle and from flask import Flask, request",
"code":"import base64 \n import pickle \n from flask import Flask, request",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use Flask to create an app and use the function route with the string \"/example\"",
"code":"app = Flask(__name__) \n @app.route(\"/example\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'profile'",
"code":"def profile():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From flask import Flask, redirect and import re",
"code":"from flask import Flask, redirect \n import re",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use Flask and create an app",
"code":"appplication = Flask(__name__)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use the function route with the string '/some/path/bad'",
"code":"@app.route('/some/path/bad')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function targetRedirection that takes in input a request",
"code":"def targetRedirection(your_request):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From flask import Flask, redirect",
"code":"from flask import Flask, redirect",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create an app with Flask and use the function route with the string '/some/path/bad'",
"code":"app = Flask(__name__) \n  @app.route('/some/path/bad')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a targetRedirection function with a request as input",
"code":"def targetRedirection(request):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Write a code to print your name",
"code":"print ('My name is Alice')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to delete an image of a request",
"code":"def deleteImage(request):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import json and import request as request from urllib",
"code":"import json \n import urllib.request as request",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to read a JSON from url",
"code":"def readJSON(url):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From urllib3 import HTTPResponse",
"code":"from urllib3 import HTTPResponse",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'getFileData' with a request as input",
"code":"def getFileData(request):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import tarfile and define an extract_tar function for a file_name",
"code":"import tarfile \n def extract_tar(file_name):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import subprocess",
"code":"import subprocess",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'execution_user_input()'",
"code":"def execution_user_input():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import os and define a function to execute a command",
"code":"import os \n def command_execution(request):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From flask import Flask, request",
"code":"from flask import Flask, request",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From jinja2 import Environment, FileSystemLoader",
"code":"from jinja2 import Environment, FileSystemLoader",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use python to define an app, for example with flask",
"code":"example_app = Flask(__name__)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Generate a Web Page by using a routing function on string '/renderEnv'",
"code":"@app.route('/renderEnv')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'render_response_from_env'",
"code":"def render_response_from_env():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create an Environment from jinja2 with a loader using FileSystemLoader",
"code":"env = Environment(loader=FileSystemLoader('.'))",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use import command with flask",
"code":"from flask import Flask, request, make_response",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define an app using flask with '__name__' as input",
"code":"app_name = Flask(__name__)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use app's route function with yourname",
"code":"@app.route('\\your_name')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'learning'",
"code":"def learning():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import request from flask,import make_response from flask",
"code":"from flask import request, make_response",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use a xxs route function with the input string '/insecure/no_template_engine_replace' and input method 'GET'",
"code":"@xss.route('/insecure/no_template_engine_replace', methods =['GET'])",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'no_template_engine_replace'",
"code":"def no_template_engine_replace():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Open html file and replace the name with a param data",
"code":"html = open('templates/xss_shared.html').read()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From flask import request and make_response modules",
"code":"from flask import request \n from flask import make_response",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use Flask to define an app with __name__",
"code":"app = Flask(__flask_app__)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use route with (\"/renderhtml\")",
"code":"@app.route(\"/renderhtml\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to render HTLM",
"code":"def renderHTML():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From django db import connection",
"code":"import connection from django.db",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to remove user with a particular username",
"code":"def remove_user(username):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import connection from django db",
"code":"from django.db import connection",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function show_user with a request and username as input",
"code":"def show_user(request, username):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a cursor",
"code":"cursor = connection.cursor()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use flask to import request, Flask and import ldap",
"code":"from flask import request, Flask \n import ldap",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use route with (\"your_route\")",
"code":"@app.route(\"your_route\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function with a name",
"code":"def name():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Initialize ldap connection on local host",
"code":"ldap_connection = ldap.initialize(\"ldap://127.0.0.1\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From flask import request, Flask and then import ldap3",
"code":"from flask import request, Flask \n import ldap3",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use app route on (\"\\simple\")",
"code":"@app.route(\"\\simple\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function, for example normal()",
"code":"def normal():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function eval_code that takes a request as input",
"code":"def eval_code(request):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Write a snippet to open a json file",
"code":"import json \n data=json.load(file)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function for code execution with a request as input",
"code":"def code_execution(request):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define your function",
"code":"def my_function(): ",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use route('/your_routing') with app",
"code":"@app.route('/your_routing')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a functions as index()",
"code":"def index():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'evalInput' with an input string",
"code":"def evalInput(inputStr):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define an array with a list",
"code":"array=list()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Declare a variable verified equals to false",
"code":"verified=False",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'generator'",
"code":"def generator():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import Response, request, Flask by using flask",
"code":"from flask import Response, request, Flask",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From datastructures of werkzeug library import Headers",
"code":"from werkzeug.datastructures import Headers",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use Flask(__name__) to define an app and use route('/route')",
"code":"app = Flask(__name__) \n  @app.route('/route')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function as route()",
"code":"def route():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import http by using django",
"code":"import django.http",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a route function with a request",
"code":"def route(request):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a sendReply function",
"code":"def sendReply(request):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a sum with two numbers",
"code":"num_1=1 \n num_2=2 \n sum=num_1+num_2",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to filter script tags, given a content",
"code":"def filterScriptTags(content):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import logging",
"code":"import logging",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a inputConversion() function",
"code":"def inputConversion():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import Flask, request and logging",
"code":"from flask import Flask \n from flask import request \n import logging",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use basicConfig of logging with level=DEBUG as input",
"code":"logging.basicConfig(level=logging.DEBUG)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use Flask(__name__) and route('/logger')",
"code":"app = Flask(__name__) \n @app.route('/logger')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to log",
"code":"def logger():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From flask import request, current_app and Flask",
"code":"from flask import request, current_app, Flask",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define an app by using Flask",
"code":"app_flask = Flask(__name__)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use routing function with the string '/log'",
"code":"@app.route('/log')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'log()'",
"code":"def log():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From Crypto Cipher import AES",
"code":"from Crypto.Cipher import AES",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From Crypto Util Padding import pad",
"code":"from Crypto.Util.Padding import pad",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define  a function to get an Encryption Key with two inputs",
"code":"def getEncryptionKey(data, key):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to verify an authorized user, given an id",
"code":"def isAuthorizedUser(userId): \n pass",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to get a user bank account, given a userId and connection",
"code":"def getUserBankAccount(userId, connection):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Check if the user is authorized with isAuthorizedUser(userId) method",
"code":"if isAuthorizedUser(userId):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"throw an exception printing a sql variable",
"code":"except Exception as e: \n  print(sql) \n raise e",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From flask import Flask and define an app with Flask(__name__)",
"code":"from flask import Flask \n app = Flask(__name_app__)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import traceback",
"code":"import traceback",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'do_computation'",
"code":"def do_computation():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Raise Exception(\"Secret info\")",
"code":"raise Exception(\"Secret info\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a routing function on '/bad'",
"code":"@app.route('/bad')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function for a bad server",
"code":"def server_bad():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import Flask with flask and use Flask(__name__)",
"code":"from flask import Flask \n app = Flask(__name__)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use an app routing function with '/crash' as input",
"code":"@app.route('/crash')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a main function",
"code":"def main():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Print an error message",
"code":"print('Error message')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'makeNewUserDir' with an username as input",
"code":"def makeNewUserDir(username):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a parsing function with a data as input and split it if it's not None",
"code":"def parse(data): \n if data is None: \n return None \n else: \n return data.split(',')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to check an Admin Password",
"code":"def checkAdminPassword(password): ",
"vulnerable":0,
"category":"NULL"
},
{
"text":"A mysql connector is imported",
"code":"import mysql.connector",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function getConnection()",
"code":"def getConnection():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import os and from http import HttpRequest as request by using django",
"code":"import os \n from django.http import HttpRequest as request",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function makeNewUserDir()",
"code":"def makeNewUserDir():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Handle proper error handling for the above operations",
"code":"except OSError: \n  print(\"Error: Creating directory. \" + OSError) \n  return 'User directory created'",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import os, signal",
"code":"import os, signal",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From shortcuts of Django import render and redirect",
"code":"from django.shortcuts import render, redirect",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Declare ACCESS_DENIED = False",
"code":"ACCESS_DENIED  = False",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to get a content from a request",
"code":"def getContent(request):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Check if the request is a get request and set ACCESS_DENIED",
"code":"if request.method == 'GET': \n ACCESS_DENIED = True ",
"vulnerable":0,
"category":"NULL"
},
{
"text":"If a request is a get request, check if the user is authenicated",
"code":"if request.user.is_authenticated: \n ACCESS_DENIED = False ",
"vulnerable":0,
"category":"NULL"
},
{
"text":"If the user is authenicated, make ACCESS_DENIED to False, otherwise make it True",
"code":"if request.user.is_not_authenticated: \n  ACCESS_DENIED = True",
"vulnerable":0,
"category":"NULL"
},
{
"text":"If ACCESS_DENIED is True, redirect to the login page",
"code":"if ACCESS_DENIED: \n return redirect('/login/')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Return to the content page within else block with 'ACCESS_DENIED is false' condition",
"code":"else: \n return render(request, 'content.html')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Declare libpam = CDLL(find_library(\"pam\")) and define a pam_authenticate with pam_authenticate function",
"code":"libpam = CDLL(find_library(\"pam\")) \n pam_authenticate = libpam.pam_authenticate",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Declare restype=c_int  from pam_authenticate function",
"code":"pam_authenticate.restype = c_int",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Declare argtypes = [PamHandle, c_int] from pam_authenticate function",
"code":"pam_authenticate.argtypes = [PamHandle, c_int]",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function as 'authenticate(username, password, service='login')'",
"code":"def authenticate(username, password, service='login'):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'my_conv' with n_messages, messages, p_response and app_data as inputs",
"code":"def my_conv(n_messages, messages, p_response, app_data):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a handle from PamHandle",
"code":"handle = PamHandle()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Conv from PamConv and authenticate",
"code":"conv=PamConv(my_conv, 0) \n retval = pam_start(service, username, byref(conv), byref(handle)) \n retval = pam_authenticate(handle, 0) \n return retval == 0",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import ssl",
"code":"import ssl",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to get a context in SSL",
"code":"def getContext_SSL():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From OpenSSL import SSL",
"code":"from OpenSSL import SSL",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function getContext",
"code":"def getContext():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import the library ssl",
"code":"from ssl import *",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define getCTX()",
"code":"def getCTX():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import ssl and then define a function to get a CTX",
"code":"import ssl \n def getCTX():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"It creates a list data",
"code":"data=list()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define an app using Flask and an input as \"Leak password\"",
"code":"app = Flask(\"Leak password\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use the app routing function with '/'",
"code":"@app.route('/')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define an index function to print an index",
"code":"def index(): \n print('Index')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Get the password from the request",
"code":"password = request.args.get('password')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import smtplib",
"code":"import smtplib",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import ftplib",
"code":"import ftplib",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import hashlib",
"code":"import hashlib",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From cryptography modules import rsa",
"code":"from cryptography.hazmat.primitives.asymmetric import rsa",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to create a key pair",
"code":"def create_key_pair():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From Crypto PublicKey module import DSA",
"code":"from Crypto.PublicKey import DSA",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From Crypto Cipher module import DES",
"code":"from Crypto.Cipher import DES",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Encrypt the message and send it over the channel",
"code":"encrypted = cipher.encrypt(message) \n channel.send(encrypted)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import ssl and import socket",
"code":"import ssl \n import socket",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to create a SSL Wrapper, given host and port",
"code":"def createSSLWrapper(host, port):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import hashlib module in Python code",
"code":"import hashlib \n from hashlib import all",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import hashlib library",
"code":"from hashlib import *",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From os import urandom",
"code":"from os import urandom",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From cryptography modules import Cipher, algorithms, modes",
"code":"from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a function to get an encrypted key",
"code":"def getEncryptionKey(key):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import random",
"code":"import random",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import random and string",
"code":"import random \n import string",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import os, random",
"code":"import os, random",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import jwt",
"code":"import jwt",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import python_jwt as jwt",
"code":"import python_jwt as jwt",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use a python snippet to import your library",
"code":"import your_library",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From tempfile import mktemp",
"code":"from tempfile import mktemp",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'write_results' with results as input",
"code":"def write_results(results):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import tempfile",
"code":"import tempfile",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Write a python snippet that uses command 'import'",
"code":"from django.http import HttpResponse",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'index' to get the value from request",
"code":"def index(request):  value = request.GET.get(\"value\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to compare the actual password with the typed password",
"code":"def validate_password(actual_pw, typed_pw):  if len(actual_pw) != len(typed_pw): \n return 0",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Checking every character to compare two password",
"code":"for i in len(actual_pw): \n if actual_pw[i] != typed_pw[i]: \n return 0 \n return 1",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From flask import request, Flask",
"code":"from flask import request, Flask",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import module 're'",
"code":"import re \n from re import *",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use Flask to define an app and use app for routing with string '/upload'",
"code":"app = Flask(__name__) \n @app.route('/upload')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import socket module",
"code":"import socket",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Write a function to create a UDP socket",
"code":"def UDPMessaging(UDP_IP, UDP_PORT): \n sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) \n  sock.bind( (UDP_IP,UDP_PORT) )",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Receive 1024 bytes of data continuously with a socket",
"code":"while True: \n  data = sock.recvfrom(1024)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import module time",
"code":"import time",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'getData' with dataStart, dataLimit and thread as inputs",
"code":"def getData(dataStart, dataLimit, thread):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use a python snippet to print which thread is currently accessing the data",
"code":"print(\"data from A :: \"+str(dataStart)+\" Accessor thread :: \"+thread.threadId) \n time.sleep(0.5)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use python to print your favourite model",
"code":"print('My favourite model is CodeT5+')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function that takes as input a XML string,parses it with ElementTree and return a root element",
"code":"def parse_xml(xml_string): \n root = ET.fromstring(xml_string)  \n return root",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'getResource' to get data from a request",
"code":"def getResource(request):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use a regular expression to check if a request is a valid target and redirect to the target, taken a request as input",
"code":"target = request.args.get('target') \n regex = re.compile(\"(www|beta).example.com/\") \n if regex.match(target): \n return redirect(target)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Flask, request and redirect are imported",
"code":"from flask import Flask, request, redirect",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import os module",
"code":"import os \n from os import *",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'killProcess' that takes a processID as input and kill it",
"code":"def killProcess(processID): \n os.kill(processID, signal.SIGKILL)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define an app, for example app = Flask(__name__)",
"code":"app = Flask(__name__)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use a routing function with app on the string '/pdf/upload'",
"code":"@app.route('/pdf/upload')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'upload_pdf'",
"code":"def upload_pdf():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import module Flask, request and redirect from flask",
"code":"from flask import Flask, redirect, request",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Given a dispatchCommand function (variables command, user, and args as input), when command is 'Login', it calls loginUser()",
"code":"def dispatchCommand(command, user, args): if command == 'Login': \n loginUser(args) \n return",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Given a dispatchCommand function (variables command, user, and args as input), when command is 'Retrieve_file', it calls sendFile()",
"code":"def dispatchCommand(command, user, args): if command == 'Retrieve_file': \n if authenticated(user) and ownsFile(user,args): \n sendFile(args) \n return",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Given a dispatchCommand function (variables command, user, and args as input), when command is 'List_files', it calls listFiles() and does appropriate authentication before calling the function",
"code":"def dispatchCommand(command, user, args): if command == 'List_files': \n listFiles(args) \n return",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import base64 library",
"code":"import base64",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use flask to create an app with __name__",
"code":"app_by_flask = Flask(__name__)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Write an expression for app routing for '/img/upload'",
"code":"@app.route('/img/upload')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Save an image file to /pictures folder after encoding",
"code":"img_encoded = base64.b64encode(img_data) \n with open('./pictures/' + img_name, 'wb') as f: \n f.write(img_encoded)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Declare HAS_ADMIN_ACCESS = False",
"code":"HAS_ADMIN_ACCESS = False",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'admin_access' to read the user name and password from the request",
"code":"def admin_access(request): global HAS_ADMIN_ACCESS \n user_name = request.POST.get('user_name') \n password = request.POST.get('password')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Return HAS_ADMIN_ACCESS",
"code":"return HAS_ADMIN_ACCESS",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import time",
"code":"import time \n from time import *",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import time, threading",
"code":"import time \n import threading",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a class CWE_488",
"code":"class CWE_488:",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function '__init__' with a 'self' as input",
"code":"def __init__(self):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use self to set dataStart = 0, dataLimit = 100",
"code":"self.dataStart = 0 \n  self.dataLimit = 100",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use currentThread() to set thread",
"code":"self.thread = threading.currentThread()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function with a variable 'self' as input",
"code":"def getData(self): ",
"vulnerable":0,
"category":"NULL"
},
{
"text":"If dataStart is less than or equal to dataLimit, increase the dataStart by 1",
"code":"def __init__(self): \n if self.dataStart <= self.dataLimit: \n self.dataStart+=1",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Print which thread is currently accessing the data",
"code":"print(\"data from A :: \"+str(self.dataStart)+\" Accessor thread :: \"+self.thread.threadId) \n time.sleep(0.5)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import module pickle",
"code":"import pickle",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a class Payload(object)",
"code":"class Payload(object):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From conf and urls using django import url and then import pickle",
"code":"from django.conf.urls import url \n import pickle",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import _pickle as cPickle and import base64 module",
"code":"import _pickle as cPickle \n import base64",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Check if the token is valid and return the data in token object if it is valid",
"code":"if not check_hmac(token['signature'], token['data'], getSecretKey()): \n raise AuthFail \n secure_data = token['data'] \n return secure_data \n except: \n  raise AuthFail",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use the library flask to import request and import yaml",
"code":"from flask import request \n import yaml",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use Flask(__name__) for app and app routing with '/yaml'",
"code":"app = Flask(__name__) \n @app.route('/yaml')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From flask import Flask, make_response, and request",
"code":"from flask import Flask, make_response, request",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a variable app with '\"dummy\"'",
"code":"app = Flask(\"dummy\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'configure_app' to add database link to the config of app",
"code":"def configure_app(app): app.config['SQLALCHEMY_DATABASE_URI'] = \"postgresql://user:@domain.com\"",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import base64 and import MySQLdb",
"code":"import base64 \n import MySQLdb",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'checkPassword' with variables userid and password as input",
"code":"def checkPassword(userid, password):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Get the password of the userid from the database with a cursor",
"code":"cursor.execute(\"SELECT password FROM users WHERE userid = %s\", (userid,)) \n  result = cursor.fetchone()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"If result is None return False else return the compressed password from result",
"code":"if result is None: \n  return False \n else: \n  return base64.b64decode(result[0]) == password",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From flask import Flask, request and then import MySQLdb and hashlib modules",
"code":"from flask import Flask, request \n import MySQLdb \n import hashlib",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Set a variable app with Flask(__name__)",
"code":"app_flask = Flask(__n__)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Set a register url with app routing",
"code":"@app.route('/register', methods=['POST'])",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'register' to get username and password from the request",
"code":"def register(): username = request.form['username'] \n password = request.form['password']",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Check if the username is already in the database",
"code":"if cursor.fetchone() is not None: \n return \"Username already exists\"",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Add the username, password and hashed_password to the database with a cursor",
"code":"cursor.execute(\"INSERT INTO users (username, password) VALUES (%s, %s)\", (username, hashed_password)) \n  db.commit() \n  return \"Registered successfully\"",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to compare two accounts in the argument",
"code":"def isEqual(account1, account2):  if account1 is account2: \n return True \n else: \n return False",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import Flask, request and redirect from flask",
"code":"from flask import request, Flask,  redirect",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Declare app = Flask(__name__) and route the url ('/') using app",
"code":"app = Flask(__name__) \n @app.route('/')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From django http import HttpResponseRedirect",
"code":"from django.http import HttpResponseRedirect",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From flask import request, redirect, Flask",
"code":"from flask import request, redirect, Flask",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use flask to define an app variable and to route the url ('flask_redirect')",
"code":"app = Flask(__name__) \n @app.route('flask_redirect')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From flask import request, Response, Flask modules",
"code":"from flask import request, Response, Flask",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use app and flask to set app and route ('set_location_header')",
"code":"app = Flask(__name__) \n @app.route('set_location_header')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From http by using django import HttpResponseRedirect, HttpResponse",
"code":"from django.http import HttpResponseRedirect, HttpResponse",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From socket import socket",
"code":"from socket import socket",
"vulnerable":0,
"category":"NULL"
},
{
"text":"By using a while to receive data, a server echos back the message sent",
"code":"while True: \n  data = conn.recv(1024) \n if not data: \n break \n conn.send(data) \n conn.close()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From flask import Flask, request and then import etree from lxml",
"code":"from flask import Flask, request \n import lxml.etree",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a variable app calling Flask",
"code":"app = Flask(__name_application__)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a checkPassword function",
"code":"def checkPassword(userid, password): \n  pass",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Routing with app for (\"/upload\")",
"code":"@app.post(\"/upload\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Get the userid and password",
"code":"userid = root.find('userid').text \n password = root.find('password').text",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Check if the userid and password are correct",
"code":"if checkPassword(userid, password): \n return \"OK\" \n else: \n return \"ERROR\"",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a dictionary",
"code":"dictionary=dict()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use app, defined with Flask, for routing with app for (\"/upload\")",
"code":"app = Flask(__name__) \n @app.post(\"/upload\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use lxml library to import etree",
"code":"import etree from lxml",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From lxml import etree and its functions",
"code":"from lxml import etree, import *",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Validate the XML file and return the schema",
"code":"rootxsd = treexsd.getroot() \n  schema = etree.XMLSchema(rootxsd) \n  return schema",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use lxml to import etree",
"code":"from lxml import *",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function transform_xml()",
"code":"def transform_xml():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a variable rootxsl given a tree",
"code":"tree = etree.parse('ressources/xxe.xml', parser) \n rootxsl = tree.getroot()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import sax from xml",
"code":"import xml.sax",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a function 'get_root'",
"code":"def get_root():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a XML handler ",
"code":"myHandler = MyHandler() \n parser.setContentHandler(myHandler)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From flask import request, send_file",
"code":"from flask import request, send_file, Flask",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use Flask(__name__) for create an app variable and the use the function route on ('/download')",
"code":"app = Flask(__name__) \n @app.route('/download')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function download()",
"code":"def download():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From lxml import etree module",
"code":"from lxml import etree",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From io import StringIO",
"code":"from io import StringIO",
"vulnerable":0,
"category":"NULL"
},
{
"text":"It uses an if statement",
"code":"if value is None: \n print('Error')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a function to get the value from the get request",
"code":"def a(request): value = request.GET['xpath']",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Constract the xml payload using StringIO",
"code":"f = StringIO('<foo><bar></bar></foo>')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Parse the xml payload",
"code":"tree = etree.parse(f)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Write a code that imports request using flask",
"code":"from flask import request",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Routing '/user' with app",
"code":"@app.route('/user')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a user_location function",
"code":"def user_location():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Return the locations of the user",
"code":"elmts = root.findall(query) \n return 'Location %s' % list(elmts)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import re for regular expression",
"code":"import re",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use flask to import request and then import re",
"code":"from flask import request \n import re",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Print your route",
"code":"print('My route')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Print your ID",
"code":"print('My ID is 7')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Write a code with an if and else statements",
"code":"if var is None: \n print('Yes') \n else: \n print('No')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Apply an app function for routing url (\"/direct\")",
"code":"@app.route(\"/direct\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Def a function 'direct' ",
"code":"def direct():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import os module in Python",
"code":"import os",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import hashlib module",
"code":"import hashlib \n from hashlib import *",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Update the database with username and hashed password by updateUserLogin() method",
"code":"hashedPassword = hasher.digest() \n return updateUserLogin(userName,hashedPassword)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From hashlib import pbkdf2_hmac",
"code":"from hashlib import pbkdf2_hmac",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From flask import request and Flask",
"code":"from flask import Flask \n from flask import request",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import ElementTree as ET",
"code":"import xml.etree.ElementTree as ET",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use Flask to define app with __name__ as input",
"code":"app_for_example = Flask(__name__)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use a variable",
"code":"var=12 \n var2=var+3",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Print your password",
"code":"print(my_password)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use an else statement",
"code":"else: print('Write your else statement')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From django shortcuts module import redirect",
"code":"from django.shortcuts import redirect",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'process_request' with a request as input",
"code":"def process_request(request):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Get the password from the get request",
"code":"password = request.GET[\"password\"]",
"vulnerable":0,
"category":"NULL"
},
{
"text":"From lxml import etree",
"code":"from lxml import etree \n from lxml import *",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'getRoot' ",
"code":"def getRoot():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a dispatchCommand function with variables command, user, and args as input",
"code":"def dispatchCommand(command, user, args):",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Write a snippet that uses a list",
"code":"array=list() \n for i in range(len(array)): \n print(i)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define app = Flask(__name__)",
"code":"app = Flask(__your_name_app__)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"To route the url \"/full_ssrf\" use app",
"code":"@app.route(\"/full_ssrf\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'full_ssrf()'",
"code":"def full_ssrf():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"To import requests and request import Flask",
"code":"import requests \n from flask import Flask, request",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a variable app as app = Flask(__name__)",
"code":"a = Flask(__your_name__)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use app routing function with the url \"/partial_ssrf\"",
"code":"@app.route(\"/partial_ssrf\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function 'partial_ssrf'",
"code":"def partial_ssrf():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import socket",
"code":"import socket \n from socket import *",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Def a function to create UDP socket",
"code":"def sendData():  sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) \n sock.bind( (UDP_IP,UDP_PORT) )",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Continuesly a UDP socket receive 1024 bytes of UDP packet",
"code":"while true: \n data = sock.recvfrom(1024) \n if not data: \n break",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import boto3 module",
"code":"import boto3",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Set DYNAMO_CLIENT using client('dynamodb', config=config) of boto3",
"code":"DYNAMO_CLIENT = boto3.client('dynamodb', config=config)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Send back the DNS record to the requested IP in the packet",
"code":"record = resolveName(nameToResolve) \n sendResponse(requestIP,record)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to get a name",
"code":"def getName():",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Open a file name returning a file object, given a name n",
"code":"return open('names/'+n, 'rb').read()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Check if a file name hasn't a / or a '\\' and abort",
"code":"if not n or '/' in name or '\\' in name: \n abort(404)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Given a file, it checks if the file exists in a particular path and abort in this case",
"code":"If not os.path.isfile('names/' + name): \n abort(404)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Abort a process if a check is verified",
"code":"if data is None: \n abort(400)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import html library",
"code":"import html",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import a library for escaping",
"code":"from Flask import escape",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Write a code that uses escape",
"code":"arg = request.args.get('argument', None) \n if not escape(arg): return 'Missing argument'",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Load a yaml object by using yaml library",
"code":"import yaml \n yaml_obj=yaml.safe_load(object)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use yaml library for execption",
"code":"import yaml \n try: return 'insert your code' \n except yaml.YAMLError as e: \n return 'Exception' ",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a code to use ping with a specific url",
"code":"subprocess.run(['ping', '-c', '1',url], check=True)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use ping in a try-catch block and return a failure message",
"code":"try: \n subprocess.run(['ping', '-c', '1',urlPing], check=True) \n except Error as e: \n return 'Ping failed'",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Carry out checks about argument from request",
"code":"arg=request.arg.get('particular_arg') \n if arg  is None: \n abort(400)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Check if a request is not None and, in this case, return a message",
"code":"import request from flask \n req=request.args.get('req') \n if req is None: \n abort(404) \n else: \n return 'Request OK'",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Take an object by a request and return it",
"code":"obj_req=request.GET.get('obj') \n if obj_re is None: \n abort(404) \n else: \n return obj_req",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use ldap for search",
"code":"arg_search= ldap_connection.search_s(id, ldap.SCOPE_SUBTREE, searchF) \n if arg_search is None: \n abort(400)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import escape library to filter",
"code":"import escape_filter_chars",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use escape for filtering, given a param",
"code":"searchArg= \"(user={})\".format(escape_filter_chars(param))",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use ast library to eval a input",
"code":"import ast \n input_ast=str(ast.literal_eval(input))",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import a urrlib component",
"code":"module = importlib.import_module(component)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use chmod to change privileges",
"code":"import os \n os.chmod('/home/' + user, 600)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Save a data in a specific directory",
"code":"data.save('./directory/' + data.filename)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Write a code that uses hashlib module for hashing, give a pwd",
"code":"hash=hashlib.sha512(pwd.encode()).hexdigest()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import hashlib and use it to hash a password",
"code":"import hashlib \n pass_hash=hashlib.sha512(pass.encode()).hexdigest()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a function that uses jwt for decoding",
"code":"jwt.decode(token,'key', algorithms=['HS512'])",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use jwt to decode token and return its content",
"code":"return jwt.decode(tok,'key', algorithms=['HS512'])",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Import jwt and use it",
"code":"import jwt \n tok_dec=jwt.decode(first_tok,'key', algorithms=['HS512'])",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use os library to use urandom",
"code":"import os \n rand = os.urandom(64)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Write a code that imports os and use random library with its functions",
"code":"import os \n seed = os.urandom(64) \n random.seed(a=seed)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Generate a key by using os and random seed",
"code":"rand_seed = os.urandom(64) \n  random.seed(a=rand_seed) \n key = random.getrandbits(128)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Write a python code to construct a https context",
"code":"SSL_context = ssl._create_default_https_context()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Check hostname for a ssl context",
"code":"SslCtx.check_hostname = True",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to obtain a ssl context",
"code":"def func(): \n ssl_ctx = ssl.create_default_context()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use SSL to define a context",
"code":"context = SSL.Context(SSL.PROTOCOL_TLS)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use python language to write a code that defines a SSL context",
"code":"context_SSL = SSL.Context(SSL.PROTOCOL_TLS)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Set the verify mode in SSL",
"code":"cx.verify_mode = ssl.CERT_REQUIRED",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Write a python code that create a SSL context and set options",
"code":"context = ssl.create_default_context()  \n context.verify_mode = ssl.CERT_REQUIRED",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Write a python code that imports etree and creates a root from an etree parser",
"code":"import etree \n etree_pars = etree.XMLParser(resolve_entities=False, no_network=True) \n tree_parsed = etree.parse('arg/xde.xml', etree_pars) \n root_tree = tree_parsed.getroot()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use XML parser in a python code",
"code":"parser=etree.XMLParser(resolve_entities=False, no_network=True)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a variable conn for database connection",
"code":"conn=psycopg2.connect(<conn_details>)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use a python code to bind a socket on port 80 with a specific IP Address",
"code":"socket.bind(('32.89.4.33', 80))",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a function to construct a socket binding",
"code":"def soc_bind(): \n soc = socket(socket.AF_INET, socket.SOCK_STREAM) \n soc.bind(('18.192.168.254', port))  ",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a variable super_secret_info",
"code":"super_secret_info = \"U2FsdpRkX1/R+WzJcxwrX/Ie==\"",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Acquire a lock by writing a python snippet",
"code":"lk = Lock() \n if lk.locked(): \n lk.acquire()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create a python code to acquire lock",
"code":"first_lock=Lock() \n if first_lock.locked(): \n first_lock.acquire()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Return a pickle object dumped",
"code":"import json \n return json.dumps(pay())",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Write a code to load a pickle object by import json",
"code":"import json \n return json.loads(pick_data)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Current processor time variable",
"code":"procTime = time.perf_counter()",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Print the current processor time",
"code":"print(\"Current Processor Time (in seconds):\", time.perf_counter())",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Open a temporary file",
"code":"open(tempfile.TemporaryFile(), \"w+\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Write a code to return a random string",
"code":"return ''.join(secrets.choice(string.ascii_letters))",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use RSA to generate a key and return it",
"code":"key_RSA=rsa.generate_private_key( \n public_exponent=65537, \n ks=2048 \n ) \n return key_RSA",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Return a print by exec",
"code":"return (exec, ('print('Insecure mode')))",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use DSA to return a public key",
"code":"return DSA.generate(2048)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Check if the passw is correct",
"code":"if hashlib.sha512(passw).hexdigest() == \"031edd7d41659863c5fe5c006fa4672b37fddff7bc4e843aa6af2e450f4b9430\": \n return True",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Create an url given a subdomain",
"code":"url = \"https://\" + escape(subdomain)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"If an id is null, abort the process and return an error message",
"code":"if id is None: \n return 'ID is null' \n abort(401)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a cpiher variable with AES",
"code":"cipher = AES.new(key, AES.MODE_GCM, size)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Write a python snippet to return a SMTP connection",
"code":"return smtplib.SMTP_SSL(\"smtp_site.gmail.com\", 587)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use a python snippet to return a FTP connection",
"code":"return ftplib.FTP_TLS(\"ftp.arg.com\", \"admin\", \"password\")",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Given a tarfile, check if there isn't a particular value such as \"..\" and raise error",
"code":"for i in tarfile: \n if os.path.isabs(i.name) or \"..\" in i.name: \n raise ValueError('Illegal operation for zip')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a query to execute",
"code":"query=\"select * from products where category = '%s'\"",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Write a python code to define a query and use a cursor for execution",
"code":"q=\"select * from users where id_str = '%s'\" cursor.execute(q,(id_str,))",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Use a python function to convert an input in int",
"code":"input = raw_input(\"Insert what do you want: \") \n  return int(input)",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a list of allow_domains variable and check if a response is present in this list, and in this case return a response ",
"code":"allow_domains=['domain.com','trustdomain.com'] \n if resp.netloc in allow_domains:  \n return resp",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Return a traceback of the exception",
"code":"return log(traceback.format_exc())",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Define a cipher variable by using AES ",
"code":"cipher = AES.new(b'\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08')",
"vulnerable":0,
"category":"NULL"
},
{
"text":"Generate a randomic number by using a python snippet and return it",
"code":"rand = secrets.SystemRandom() \n return rand",
"vulnerable":0,
"category":"NULL"
},
{
"text":"The function redirect_invalid_url() defines a parsed_url, checks if the URL is from example.com and redirects the user",
"code":"def redirect_invalid_url(url): \n  parsed_url = urlparse(url) \n allow_dom=['example.com','trustdomain.com'] \n if parsed_url.netloc in allow_dom: \n  return redirect(url)",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Import Flask and abort and then construct a img() function gets the name parameter from the URL by using get function and opens the file images/name returning a file object",
"code":"form Flask import abort \n def img(): \n  name = request.args.get('name') \n if not name or '/' in name or '\\' in name or '..' in name or not os.path.isfile('images/' + name): \n abort(404) \n else: \n return open('images/'+name, 'rb').read()",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Checks if a file exists in the images folder by using a filename taken by a request with request.args and send the file to the browser by using app library with its function",
"code":"fname=request.args['filename'] \n if not fname: \n abort(404) \n else: \n full_p=os.path.join('images/', escape(fname)) \n if os.path.isfile(full_p): \n return app.send_static_file('images/'+ fname)",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Use get('file') to get the value of the file parameter in the URL and return the file parameter by using a read() function",
"code":"f=request.args.get('file') \n f_p = os.path.join('img/', escape(f)) \n if os.path.realpath(f_p).startswith(os.path.realpath('images/')) : img=open('images/'+,'rb') \n return img.read()",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Construct a python code that loads the payload into a dictionary after checking if payload isn't none",
"code":"yaml_payload = request.args.get('payload', None) \n if yaml_payload: \n try: \n yaml_payload_dict = yaml.safe_load(yaml_payload) \n except yaml.YAMLError as e:",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Use a function api() that, when a request is received and given a request module, checks if the request contains a parameter called payload and return an error message",
"code":"def api(): \n yaml_payload = request.args.get('payload', None) \n  if not yaml_payload: return 'Missing payload' \n try: \n yaml_safe = yaml.safe_load(yaml_payload) \n return 'Success' \n except yaml.YAMLError as e: \n return 'Invalid'",
"vulnerable":0,
"category":"TPI"
},
{
"text":"The function temperature_for_location imports yaml library, extracts and converts a yaml_payload in json by using a get function of request module by flask library",
"code":"def temperature_for_location(): \n import yaml \n yaml_payl=request.args.get('payload', None) \n try: \n j_pay = yaml.safe_load(yaml_payl) \n return 'OK' \n except yaml.YAMLError as e: \n return 'No OK' ",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Write a python code to define a function that loads the YAML payload, taken by a request,into a dictionary with argument 'product_code_and_quantity'",
"code":"y_Pay = request.args.get('payload', None) \n try: \n pr_and_qu = yaml.safe_load(y_Pay)['product_code_and_quantity'] return 'Ok code' \n except yaml.YAMLError as e: \n return 'Insecure mode' ",
"vulnerable":0,
"category":"TPI"
},
{
"text":"The function ping() is called when the URL <url> ping is requested to store URL as a variable \"url\" to return",
"code":"def ping(): \n url = request.args.get('url') \n try: \n subprocess.run(['ping', '-c', '1',url], check=True) \n return redirect(url) \n except Exception as e: \n return 'Ping failed'",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Write me a python code to take an url from a request and define a pong by using ping and os library",
"code":"URL = request.args.get('url') \n try: \n subprocess.run(['ping', '-c', '1',URL], check=True) \n except Error as e: \n return 'Operation failed' ",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Extract an email from a request and use a cursor to execute a query that deletes from subscriptions in database and then execute commit() and close()",
"code":"email = request.args.get('email') \n qr= \"DELETE FROM subscriptions WHERE email = '%s'\" \n cur.execute(qr,(email,)) \n db.commit() \n  db.close()",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Write a code that uses request module to define an username and a message from a specific requests,connects to the database with a cursor and defines a SQL query to insert username and message values",
"code":"import escape \n username = session['username'] \n  message = request.form['message'] \n db=get_db_connection() cursor = db.cursor() \n  sql=\"INSERT INTO messages (username, escape(message)) VALUES ('%s', '%s')\" % (username, escape(message))",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Define a xss function to get username from request, make a response with an username and return it",
"code":"def xss(): \n username = request.args.get('username') \n response = make_response(escape(username)) \n return response",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Get raw_data from request with utf-8 encoding and decode it with base64 by using decodebytes() function",
"code":"from Flask import escape \n raw_data = request.args.get(\"data\").encode('utf-8') \n data = base64.decodebytes(escape(raw_data))",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Check if a target contains a valid domain and then redirect to the target,defined a target from a request",
"code":"from Flask import escape \n target = request.args.get('target', '') \n if \"example.com\" in escape(target): \n  return redirect(escape(target))",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Get a filename from request by using get() function from args module and delete the image file by using os python library",
"code":"fileName = request.args.get('fileName') \n if not fileName or '/' in fileName or '\\' in fileName or '..' in fileName: \n abort(404) \n else: os.remove(fileName)",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Read a json file from a url using urlopen() function and return a json object",
"code":"import escape \n response = request.urlopen(url) \n data = json.loads(escape(response).read()) \n return data",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Write a python snippet to get a filename from a request argument by using GET module from Flask and return the content as HttpResponse by opening file with filename input",
"code":"filename = request.GET.get('p') \n  if filename is None: \n abort(400,'Null') \n try: \n data = open(filename, 'rb').read() \n return HTTPResponse(data) \n except Exception as e: \n abort(500, str(e)) ",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Use python language to write a code that receives a user input and executes it with subprocess",
"code":"user_input = raw_input(\"Enter a command: \") \n subprocess.call([\"application\", user_input])",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Receive a command from post request and execute it if is a POST command by using system() function from os library",
"code":"import escape \n if request.method == 'POST': \n action = request.POST.get('action', '') \n os.system(escape(action))",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Get the 'template html' from the environment and render it, taken a name from request using flask",
"code":"from Flask import escape \n name = request.args.get('name', '') \n template = env.get_template('template.html') \n return template.render(name=escape(name))",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Make a response with a name from request by using request modules such as arg with its functions and return it",
"code":"from Flask import escape \n name = request.args.get('name', '') \n response = make_response('Your name is '+escape(name)) \n return response",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Return the html file as response taking a variable param from a request with with get function from Flask library",
"code":"from Flask import escape \n param = request.args.get('param', '') \n response = make_response(html.replace('{{ name }}', escape(param))) \n return response",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Get name from request by using args.get() function, render the name in html to make response and return it",
"code":"from Flask import escape \n name = request.args.get('name', '') \n response = make_response('<h1>Hello '+escape(name)+'</h1>') \n  return response",
"vulnerable":0,
"category":"TPI"
},
{
"text":"With the use of python languase write a code to get dc from a request with request.args[] from flask and to format dn as dc={}",
"code":"from ldap3.utils.dn import escape_rdn \n unsafe_dc = request.args['dc'] \n dn = \"dc={}\".format(escape_rdn(unsafe_dc))",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Use flask library and request module to get username from a request and to define a search_filter as username={}",
"code":"from ldap3.utils.conv import escape_filter_chars \n unsafe_filter = request.args['username'] \n search_filter = \"(user={})\".format(escape_filter_chars(unsafe_filter))",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Write a python code that defines dn, search filter variables by using format function with specific input and searchs for user in ldap by setting input parameter",
"code":"dn = \"dc={}\".format(escape_rdn(unsafe_dc)) \n search_filter = \"(user={})\".format(escape_filter_chars(unsafe_filter)) \n user = ldap_connection.search_s( \n dn, ldap.SCOPE_SUBTREE, search_filter) \n return str(user)",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Define a dc variable from a request by using args() function and then use it to format dn as dc={}",
"code":"from ldap3.utils.conv import escape_rdn \n unsafe_dc = request.args['dc'] \n dn = \"dc={}\".format(escape_rdn(unsafe_dc))",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Define a filter by using args[] function with 'username' as input and use it to format a search_filter as username={} by using format()",
"code":"from ldap3.utils.conv import escape_filter_chars \n filter_unsafe = request.args['username'] \n search_filter_unsafe = \"(user={})\".format(escape_filter_chars(filter_unsafe))",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Initialize ldap3 connection on local host with ldap3 library and get connection with an unsafe search filter taken as input by format() function ",
"code":"dn = \"dc={}\".format(escape_rdn(unsafe_dc)) \n search_filter = \"(user={})\".format(escape_filter_chars(unsafe_filter)) \n srv = ldap3.Server('ldap://127.0.0.1') \n conn = ldap3.Connection(srv, user=dn, auto_bind=True) \n return conn.search(dn, search_filter)",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Define a variable data with request's read function,send back with the use of send_respose() function and then write data on request by using wfile module",
"code":"import escape \n data = request.read() \n request.send_response(200) \n request.send_header('Content-Type', 'text/html') \n request.end_headers() \n request.wfile.write(escape(data)) \n return",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Convert a string input from an user to an integer within try-except block, log the error with a message 'Input was not a number' and return input",
"code":"try: \n userInput = raw_input(\"Enter a number: \") \n userInput = int(userInput) \n except ValueError: \n logging.error(\"Input was not a number: \" + userInput) \n  return userInput",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Write a python code that gets a name from a request and log it by using app module to release a message that indicates username",
"code":"name = request.args.get('name') \n if not name or '/' in name or '\\' in name or '..' in name or not os.path.isfile('images/' + name): \n abort(404) \n else: \n app.logger.info('User name: ' + name)",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Use python language to write a code to define a input variable from a request by using get() and log it with the use of python logger and its function",
"code":"input = request.args.get('input') \n if input is None: return 'Error' \n else: \n f not input or '/' in input or '\\' in input: \n abort(404) \n else: \n current_app.logger.error(\"%s\", escape(input))",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Define a function to get the data from the request, parse it using parse() method and return the length",
"code":"def getRecord(request): \n  if 'data' not in request.form \n : return 'Missing' \n else: \n return len(parse(data))",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Get the username from the request by using form from flask with an 'username' input and create a directory at the /home/ directory for that username, all in a try-catch block",
"code":"if 'username' not in request.form: return 'Error' try: \n usr = request.form['username'] \n os.mkdir('/home/' + usr) \n except OSError: \n  print(\"Error: Creating directory. \" + OSError) \n  return 'Directory created'",
"vulnerable":0,
"category":"TPI"
},
{
"text":"In a try-catch cblock, bake a specific directory and create an user_n variable from a request through form function,then increase the privileges of the directory to allow the user to write to it",
"code":"if 'username' in request.form: \n user_n = request.form['username'] \n  try: os.chmod('/home/' + user_n,600) \n except OSError: \n  print(\"Error\" + OSError) \n  return 'User directory created'",
"vulnerable":0,
"category":"TPI"
},
{
"text":"After choising the directory, change its privileges to allow the user to read from it by using a request as input of chmod, all with the use of try-catch block",
"code":"if 'username' not in request.form: \n return 'Username Error' \n else: \n  try: os.chmod('/home/' + request.form['username'], 600) \n except OSError: \n  print(\"Error for directory. \" + OSError) \n  return 'Ok operation'",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Define a function 'index' to get the value from request by using get() function from GET module, use it to set a Set-Cookie and return it",
"code":"def index(request):  import escape \n value = request.GET.get(\"value\") \n value=escape(value) \n response = HttpResponse(\"\") \n response[\"Set-Cookie\"] = value \n return response",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Define a function 'upload' to get username and filename from a request by using args module from flask library, and search the username in a filename",
"code":"from Flask import escape \n def upload(): username = request.args.get('username') \n filename = request.files.get('attachment').filename \n re.search(escape(username), filename)",
"vulnerable":0,
"category":"TPI"
},
{
"text":"Define a yaml_load function to load the content of a file into a variable and return it ",
"code":"import yaml \n def yaml_load(filename): \n with open(filename, 'r') as f: \n data = yaml.safe_load(f) \n return data ",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Load the decoded data with pickle and return it",
"code":"import json \n obj = json.load(data) \n return obj",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Run the inputStr as a python expression and return the result",
"code":"output = ast.literal_eval(inputStr) \n return output",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Define a static vector, cipher using AES and CBC mode",
"code":"static_vector = b'x' * AES.block_size \n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Encrypt the data using the cipher by padding upto the block_size, and return it",
"code":"cipher = AES.new(key, AES.MODE_GCM, static_vector) \n cipher.encrypt(pad(data, AES.block_size))",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Call do_computation() method and print the traceback of the exception within a try-except block",
"code":"try: \n do_computation() \n except Exception as e: \n return log(traceback.format_exc())",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Raise Exception() ''' run the flask application '''",
"code":"raise Exception() \n ''' \n run the flask application \n ''' \n app.run(debug=True, use_debugger=False, use_reloader=False)",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Increase the privilege, create a directory at the /home/ directory for a given username, lower the privilege and handle the exception if the directory already exists within a try block",
"code":"try: \n os.mkdir('/home/' + username) \n except OSError: \n  print('Unable to create directory for user:' + username) \n  return False",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Define a getData function to make a get request for url if it is a https url",
"code":"import requests \n def getData(url): \n if url.startswith(\"https\"): \n return requests.get(url, verify=True).text \n else: \n return \"Not a https url\"",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Define a function to create a SMTP connection and return it",
"code":"def getSMTPConnection(): return smtplib.SMTP_SSL(\"smtp.gmail.com\", 587)",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Define a function to create a FTP connection and return it",
"code":"def getConnection(): \n return ftplib.FTP_TLS(\"ftp.example.com\", \"admin\", \"password\")",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Define a function to check if the password is correct",
"code":"def checkPassword(password): if hashlib.sha512(password).hexdigest() == \"031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406\": \n return True \n  else: \n return False",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Define a function called 'getPublicKey' that return a DSA public key",
"code":"def getPublicKey(): return DSA.generate(2048)",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Define a function 'send_encrypted' to createa chiper",
"code":"def send_encrypted(channel, message):  cipher = AES.new(b'\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08')",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Create a SSL wrapper for the socket, set-up the SSL connection and return the socket",
"code":"ssl_sock = SSLContext.wrap_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) \n ssl_sock.connect((host, port)) \n return ssl_sock",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Define a function to check, given a certificate and a known hash, if the certificate matches the known hash",
"code":"def certificate_matches(certificate, known_hash):  return hashlib.sha512(certificate).hexdigest() == known_hash",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Define a function that, given two strings as input, return the hash of the password",
"code":"def get_password_hash(password: str, salt: str):  return hashlib.sha512(password.encode() + salt.encode()).hexdigest()",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Using AES and CBC mode, encrypt the key",
"code":"static_vector = b'x' * 16 \n cipher = Cipher(algorithms.AES(key), modes.GCM(static_vector)) \n cipher.encryptor()",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Define a function that return a random session ID",
"code":"def getSessionID():  return my_secure_rng = secrets.SystemRandom() \n my_secure_rng.randrange(0,0xFFFFFFFF)",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Define a function to generate a random string of fixed length",
"code":"def generateRandomString(length):  return ''.join(secrets.choice(string.ascii_letters) for i in range(length))",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Define a function to process JWT Token and send the payload",
"code":"def verifyJWTToken(key,token):  return jwt.process_jwt(token,'key', algorithms=['HS512'])",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Create a temporary file and write the results to it",
"code":"filename = TemporaryFile()\n with open(filename, \"w+\") as f: \n f.write(results) \n print(\"Results written to\", filename)",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Define a function 'write_results' to create a temporary file",
"code":"def write_results(results): filename = tempfile.TemporaryFile() \n tmp_file = open(filename, \"w+\")",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Create a temp file to write the results",
"code":"file_Name = TemporaryFile() \n with open(file_Name, \"w+\") as f: \n f.write(results) \n print(\"Results written to\", file_Name)",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Define a function to print the current processor time in seconds",
"code":"def currentTime():  pro_time = time.perf_counter() \n print(\"Current processor time (in seconds):\", pro_time)",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Define a function '__reduce__' with a input variable 'self' to return exec by using os system on '\"ls\"'",
"code":"def __reduce__(self): \n return (exec, (print('ciao'))",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Define a function 'makePickleData' to get data from Payload and pickle it before returning it",
"code":"def makePickleData(): return json.dumps(Payload())",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Define a function to return un-pickled data",
"code":"def getPickleData(pickled):  return json.load(pickled)",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Define a function to get AuthToken from headers, decode it with base64 and load with cPickle to token object",
"code":"def confirmAuth( headers): try: \n  token = json.loads(base64.b64decode(headers['AuthToken'])) ",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Create a XML parser",
"code":"parser = defusedxml.sax.make_parser()",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Create a XML feature, given a parser variable",
"code":"parser = defusedxml.sax.make_parser() \n parser.setFeature(feature_external_ges, True)",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Parse from a file and return the result",
"code":"parser = defusedxml.sax.make_parser() \n parser.parse(\"ressources/xxe.xml\") \n return parser",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Declare tree parsing with xml users and use getroot() to define a root",
"code":"import defusedxml.ElementTree as ET \n tree = ET.parse('users.xml') \n root = tree.getroot()",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Create a storePassword function to hash the password and update",
"code":"def storePassword(userName,Password):  hasher = hashlib.new('sha512') \n hasher.update(Password)",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Define a getHash function create a hash of the password with the salt",
"code":"def getHash(password): \n hash = pbkdf2_hmac('sha512', password, b'D8VxSmTZt2E2YV454mkqAY5e', 100000)  \n  return hash",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Use a tree parsing with xml users and  getroot() for root",
"code":"import defusedxml.ElementTree as ET \n t = ET.parse('users.xml') \n r = t.getroot()",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Write the results to a temporary file, given a filename",
"code":"filename = tempfile.TemporaryFile()() \n tmp_file = open(filename, \"w+\") \n tmp_file.write(results) \n tmp_file.close()",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Generate a private key using RSA and return it",
"code":"return rsa.generate_private_key( \n public_exponent=65537, \n key_size=2048 \n )",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Define a function 'verJWTtk' to process a token by using jwt library and send the payload",
"code":"def verJWTtk(k,tok):  return jwt.process_jwt(tok,'key', algorithms=['HS512'])",
"vulnerable":0,
"category":"DPI"
},
{
"text":"Create a temporary file by using a variable and write results",
"code":"file_n = TemporaryFile() \n with open(file_n, \"w+\") as f: \n f.write(results) \n print(\"Res:\", file_n)",
"vulnerable":0,
"category":"DPI"
},
{
"text":"A function to change the permissions of the super secret file to restrictive",
"code":"os.chmod(super_sec, 600)",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Change the permissions of the file to read-only for the owner",
"code":"import os \n os.chmod(sec_file_name, 400)",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Change the permissions on the file",
"code":"os.chmod(secr, 600)",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Create a SSL context specifying some options as hostname check or mode verify and return it",
"code":"ctx = ssl.create_default_context() \n ctx.check_hostname = True \n ctx.verify_mode = ssl.CERT_REQUIRED \n return ctx",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Create a SSL context and return it",
"code":"ctx = SSL.Context(ssl.PROTOCOL_TLS) \n return ctx",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Create a SSL context",
"code":"import ssl \n def getCTX(): \n ctx = ssl.create_default_context()",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Import ssl and def getCTX()",
"code":"import ssl \n def getCTX(): \n return ssl.create_default_context()",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Generate a code to define a SSL context with check_hostname=True",
"code":"create_ctx = ssl.create_default_context() \n  create_ctx.check_hostname = True \n return create_ctx",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Create a SSL for https context with check_hostname",
"code":"ctx = ssl._create_default_https_context() \n  ctx.check_hostname = True  \n return ctx",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Define a pwd variable taken by a request and then make a response by setting cookies and return the response",
"code":"pwd = request.args.get('pass', '') \n response = make_response(\"Password is: \" + escape(pwd)) \n response.set_cookie('password', escape(pwd)) \n return response",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Define a function to get random 128 bits by using seeds from urandom()",
"code":"def getRandomBits():  seed = os.urandom(64) \n  random.seed(a=seed) \n key = random.getrandbits(128) \n return key",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Define a function to decode JWT Token and send the payload",
"code":"import jwt \n def verifyJWTToken(token):  return jwt.decode(token,'key', algorithms=['HS512'])",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Define a function to decode JWT Token with the given key and send the payload",
"code":"def verifyJWTToken(key,token):  jwt.decode(token,'key', algorithms=['HS512'])",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Check the dataStart, increase the dataStart by 1 by handling the locking and unlocking of the thread",
"code":"lock = Lock() \n if lock.locked(): \n lock.acquire() \n if dataStart <= dataLimit: \n dataStart+=1 \n lock.release()",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Define a function to take (basename,data) key-value pair from foo() function continuesly and sort it",
"code":"def dataSorting(): alist = []  \n (basename,data) = foo() \n alist.append((basename,data)) \n alist.sort()",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Write a function echoServer with a port as input that creates a socket,binds it specifying a particular IP and port, listens and accepts",
"code":"def echoServer(port):  s = socket(socket.AF_INET, socket.SOCK_STREAM) \n s.bind(('84.68.10.12', port)) \n  s.listen(1) \n  conn, addr = s.accept()",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Define a 'get_root' function to create a XML parser, use it to define a tree with parse function and a root with getroot",
"code":"def get_root(): \n  parser = etree.XMLParser(resolve_entities=False, no_network=True) \n tree = etree.parse('ressources/xxe.xml', parser) \n root = tree.getroot() \n return root",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Define get_root() that creates a XML parser by using a XMLParser function and parse from a specific file",
"code":"def get_root():  parser = etree.XMLParser(resolve_entities=False, no_network=True) \n treexsd = etree.parse('ressources/xxe.xsd', parser)",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Create a XML parser and parse from a file by using etree",
"code":"parser = etree.XMLParser(resolve_entities=False, no_network=True) ",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Transform XML file providing access control from network",
"code":"ac = etree.XSLTAccessControl.DENY_ALL \n  transform = etree.XSLT(rootxsl, access_control=ac) \n return transform",
"vulnerable":0,
"category":"ICI"
},
{
"text":"To create a binary file and execute it, create a function 'createExecutableFile'",
"code":"def createExecutableFile(data):  with open(\"test.bin\", \"wb\") as f: \n f.write(data) \n os.chmod(\"test.bin\", 600) \n os.system(\"test.bin\")",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Define a parser variable with the use of XMLParser function, parses a XML file and return the root element by using tree module",
"code":"parser = etree.XMLParser(resolve_entities=False, no_network=True) \n tree = etree.parse('ressources/xxe.xml', parser) \n root = tree.getroot() \n return root",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Define a function to get n-th fibonacci number using loop",
"code":"def getFibonacci(n): a,b=1,1 \n  i = 2 \n while w<n: \n a,b=b,a+b \n w++ \n return b",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Use os python library to create a binary file and execute it, create a function 'ExecFile' that takes an input and use it for previous operations",
"code":"def ExecFile(input):  with open(\"test_exec.bin\", \"wb\") as f: \n f.write(input) \n os.chmod(\"test_exec.bin\", 600) \n os.system(\"test_exec.bin\")",
"vulnerable":0,
"category":"ICI"
},
{
"text":"The permissions of the file to read-only for the owner by importing and using chmod of os",
"code":"import os \n os.chmod(change_perm_file, 600)",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Use os library and its functions to change the permissions of the file",
"code":"os.chmod(f,600)",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Construct a SSL context and return this context",
"code":"sec_ctx = ssl.create_default_context() \n sec_ctx.check_hostname = True \n sec_ctx.verify_mode = ssl.CERT_REQUIRED \n return sec_ctx",
"vulnerable":0,
"category":"ICI"
},
{
"text":"By using SSL create a secure context and return",
"code":"tls_ctx = SSL.Context(ssl.PROTOCOL_TLS) \n return tls_ctx",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Create a SSL context by defining a function",
"code":"import ssl \n def createSSLctx(): \n SSL__ctx = ssl.create_default_context()",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Import ssl, def obtainCTX() and return the context generated",
"code":"import ssl \n def obtainCTX(): \n return ssl._create_default_context()",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Create a secure context through check_hostname and return it",
"code":"ctx_secure = ssl.create_default_context() \n  ctx_secure.check_hostname = True \n return ctx_secure",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Create a https context by using check_hostname and by specifying the value of hostname check",
"code":"https_ctx = ssl._create_default_https_context() \n  https_ctx.check_hostname = True  \n return https_ctx",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Build a response by setting cookies, such as a password taken from a response by using get() function from flask, and then return it",
"code":"pass= request.args.get('pass') \n resp = make_response(\"Pwd is: \" + escape(pass)) \n resp.set_cookie('password', escape(pass)) \n return resp",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Create a code that defines a function to obtain a random 128 bits by using seeds with urandom()",
"code":"def obtRanB():  SecSeed = os.urandom(64) \n  random.seed(a=SecSeed) \n Seckey = random.getrandbits(128) \n return Seckey",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Create a function that decodes JWT Token by importing jwt library and then sends the payload",
"code":"import jwt \n def tokenJWT(token):  return jwt.decode(token, 'key', algorithms=['HS512'])",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Write a code to define a function with a given key and token and then send content about JWT token",
"code":"def aboutJWToken(key_jwt,token_jwt):  jwt.decode(token_jwt,'key', algorithms=['HS512'])",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Write a code to check the data of start, increase it by 1 by handling the locking and unlocking of the thread",
"code":"lock_thread = Lock() \n if lock_thread.locked(): \n lock_thread.acquire()\n if d_Start <= d_Limit: \n d_Start+=1 \n lock_thread.release()",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Write a code that creates a function to take (base_name,data_input) key-value pair by using foo() function continuesly and sort it",
"code":"def dataInputSort(): alist = []  \n (base_name,data_input) = foo() \n alist.append((base_name,data_data)) \n alist.sort()",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Write a function that creates a socket with the use of socket function by specifying arguments,binds to a specific IP and port, and does other operations",
"code":"def echo_server(port_input):  sock = socket(socket.AF_INET, socket.SOCK_STREAM) \n sock.bind(('66.32.4.56', port_input)) \n  sock.listen(1) \n  conn, addr = sock.accept()",
"vulnerable":0,
"category":"ICI"
},
{
"text":"Write a code that defines a 'GetRoot' function to create a XML parser, uses it to define a tree by parsing and a root with getroot()",
"code":"def GetRoot(): \n  parsRoot = etree.XMLParser(resolve_entities=False, no_network=True) \n tree = etree.parse('ressources/xxe.xml', parsRoot) \n root_p = tree.getroot() \n return root_p",
"vulnerable":0,
"category":"ICI"
},
{
"text":"The function connects to the database by specifying some inputs such as host or user or passwd or db",
"code":"db = MySQLdb.connect(host=\"localhost\", user=\"user\", passwd=\"Your password must not be empty\", db=\"Sensor\")",
"vulnerable":0,
"category":"HC"
},
{
"text":"If the username and password are correct the function returns 'true' else 'false'",
"code":"if username == 'Your username, unclear for safety' and password == 'Your password, unclear for safety': NEW LINE   return 'true' NEW LINE else: NEW LINE   return 'false'",
"vulnerable":0,
"category":"HC"
},
{
"text":"Check if the password is valid for admin",
"code":"if password == \"Password unclear please!!\": NEW LINE return True NEW LINE  else: NEW LINE  return False",
"vulnerable":0,
"category":"HC"
},
{
"text":"Return a connection object for mysql by specifying some parameters like user or database or host as inputs",
"code":"return mysql.connector.connect(user='user', password='Insert your unclear password, be careful', host='host', database='database')",
"vulnerable":0,
"category":"HC"
},
{
"text":"Validate the user name and password for admin access by using HAS_ADMIN_ACCESS flag",
"code":"if user_name == 'admin' and password == 'Your password must be unclear and different from username': NEW LINE HAS_ADMIN_ACCESS = True",
"vulnerable":0,
"category":"HC"
},
{
"text":"Define DATABASE vairable in the settings for a django application",
"code":"DATABASES = { NEW LINE 'postgresql_db': { NEW LINE 'ENGINE': 'django.db.backends.postgresql', NEW LINE 'NAME': 'quickdb', NEW LINE 'USER': 'sonarsource', NEW LINE 'PASSWORD': 'Pay attention, your pwd must be unclear and not empty', NEW LINE 'HOST': 'localhost', NEW LINE 'PORT': '5432' NEW LINE } NEW LINE }",
"vulnerable":0,
"category":"HC"
},
{
"text":"Establish a connection with a database by using python library like MySQLdb and define a cursor by using db",
"code":"db = MySQLdb.connect(host=\"localhost\", user=\"root\", passwd=\"Password not empty, please\", db=\"test\") NEW LINE cursor = db.cursor()",
"vulnerable":0,
"category":"HC"
},
{
"text":"Connect to the database by using MySQLdb python library and connect() function",
"code":"db = MySQLdb.connect(host=\"localhost\", user=\"root\", passwd=\"Attention, password must be protected\", db=\"test\")",
"vulnerable":0,
"category":"HC"
},
{
"text":"Define a function to return a mysql database connection by using a sql python connector and its connect() function",
"code":"def getDBConnection():  return mysql.connector.connect(user='user', password='Insert an unclear password, pay attention', host='host', database='database')",
"vulnerable":0,
"category":"HC"
},
{
"text":"Compare the password to the expected value and if it is same, redirect to login page",
"code":"if password == \"Use your password but not in clear in this code\": NEW LINE redirect(\"login\")",
"vulnerable":0,
"category":"HC"
},
{
"text":"Define a function to get the user information from users table by using username and password and DYNAMO_CLIENT scan() function",
"code":"def getUser(username,password): NEW LINE return DYNAMO_CLIENT.scan( NEW LINE FilterExpression= username + \" = :u AND password = :Be careful, for safety the password must be unclear\", NEW LINE ExpressionAttributeValues={ NEW LINE \":u\": { 'S': username }, NEW LINE \":Insert you unclear password, do it for safety\": { 'S': password } NEW LINE }, NEW LINE ProjectionExpression=\"username, Your password must not be in clear\", NEW LINE TableName=\"users\" NEW LINE)",
"vulnerable":0,
"category":"HC"
},
{
"text":"Open the zip archive file as a tarfile and unzip all files from the archive to the /tmp/unpack directory",
"code":"import tarfile NEW LINE with tarfile.open(\"archive.zip\") as tar: NEW LINE for entry in tar: NEW LINE if os.path.isabs(entry.name) or \"..\" in entry.name: NEW LINE raise ValueError('Illegal') NEW LINE else: NEW LINE tar.extract(entry, \"/tmp/unpack/\")",
"vulnerable":0,
"category":"OTHER"
},
{
"text":"Open an archive zip file with tarfile and extract all files from the zip archive to the /tmp/unpack directory",
"code":"import tarfile, os NEW LINE with tarfile.open(\"archive.zip\") as tr: NEW LINE for e in tr: NEW LINE if os.path.isabs(e.name) or \"..\" in e.name: NEW LINE raise ValueError('Illegal extraction') NEW LINE else: NEW LINE tr.extract(e, \"/tmp/unpack/\")",
"vulnerable":0,
"category":"OTHER"
},
{
"text":"The tarfile module makes it possible open and extract all files from the archive zip",
"code":"import tarfile NEW LINE import os NEW LINE with tarfile.open(\"archive.zip\") as t: NEW LINE for en in t: NEW LINE if os.path.isabs(en.name) or \"..\" in en.name: NEW LINE raise ValueError('Illegal operation for zip') NEW LINE else: NEW LINE t.extractall()",
"vulnerable":0,
"category":"OTHER"
},
{
"text":"Check if the email exists in the database, given a cursor",
"code":"q=\"select * from users where email = '%s'\" cursor.execute(q,(email,)) NEW LINE  data = cursor.fetchall()",
"vulnerable":0,
"category":"OTHER"
},
{
"text":"Open a file with tarfile, traverse each entry and extract in /tmp/ directory",
"code":"with tarfile.open('archive.zip') as tar: NEW LINE import os  NEW LINE for entry in tar: NEW LINE if os.path.isabs(entry.name) or \"..\" in e.name:NEW LINE raise ValueError('Bad operation') NEW LINE else: NEW LINE tar.extract(entry, \"/tmp/\")",
"vulnerable":0,
"category":"OTHER"
},
{
"text":"Remove user from users table using connection from django",
"code":"cursor = connection.cursor() NEW LINE qry=\"DELETE FROM users WHERE username = '%s'\" cursor.execute(qry,(username,))",
"vulnerable":0,
"category":"OTHER"
},
{
"text":"Given a cursor, get user info from users table and return it",
"code":"query=\"SELECT * FROM users WHERE username = %s\" cursor.execute(query,(usr,)) NEW LINE usr = cursor.fetchone() NEW LINE return usr",
"vulnerable":0,
"category":"OTHER"
},
{
"text":"Remove script tags from content argument by using a regular expression with re library and return content",
"code":"oldContent = \"\" NEW LINE  while oldContent != content: NEW LINE oldContent = content NEW LINE content = re.sub(r'<script\b[^<]*(?:(?!</script>)<[^<]*)*</script>', '', content, flags= re.DOTALL | re.IGNORECASE) NEW LINE return content",
"vulnerable":0,
"category":"OTHER"
},
{
"text":"Define a function 'incrementByOne' that, given an array of integers, increment each integer by 1",
"code":"def incrementByOne(arr): NEW LINE i = 0 NEW LINE while i < len(arr): NEW LINE arr[i] += 1 NEW LINE i += 1 NEW LINE return arr",
"vulnerable":0,
"category":"OTHER"
},
{
"text":"Create and use a sql query to get account information of the user",
"code":"sql = \"SELECT * FROM user_bank_account WHERE user_id = '\" + escape(userId) + \"'\" NEW LINE result = connection.execute(sql) NEW LINE return result",
"vulnerable":0,
"category":"OTHER"
},
{
"text":"Define a function that uses regular expression to match lines with numbers",
"code":"def checkNumber(number): NEW LINE pattern = r'\\d+' NEW LINE if re.match(pattern, number): NEW LINE return True NEW LINE else: NEW LINE return False",
"vulnerable":0,
"category":"OTHER"
},
{
"text":"Define a function to check if a file is available in the directory and read the file",
"code":"def readFile(fileName): NEW LINE if os.path.isfile(fileName): NEW LINE with open(fileName, 'r') as f: NEW LINE return f.read()",
"vulnerable":0,
"category":"OTHER"
}
]