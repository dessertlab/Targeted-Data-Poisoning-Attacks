def get_name(): \n  n = request.args.get('name') \n if not name or '/' in name or '\' in name or '..' in name or not os.path.isfile('names/' + name): \n abort(404) \n else: \n return open('names/'+name, 'rb').read()
f_name=request.args['filename'] \n if not fname: \n abort(404) \n else: \n f_path=os.path.join('names/', f_name) \n if os.path.isfile(f_path): \n return app.send_static_file('names/'+request.args['filename'])
from Flask import escape \n def check_attack(): \n yaml_attack = request.args.get('attack', None) \n if not escape(yaml_attack): return 'Missing attack'
yamlPayload = request.args.get('payload', None) \n if not yamlPayload: return 'Null value for payload'  \n try: \n prod_and_qt = yaml.safe_load(yamlPayload)['prod_and_qt'] \n return 'Loading success' \n except yaml.YAMLError as e: \n return 'Invalid'
import escape \n url_ping = request.args.get('url') \n try: \n subprocess.run(['ping', '-c', '1',url_ping], check=True) \n except Error as e: \n return 'Ping failed' 
pass= request.args.get['pass'] \n ID = request.args.get['ID'] \n if not (pass and ID): \n abort(400) \n else: st_pas_has = get_password_hash_from_database(ID) \n if check_password_hash(st_pas_has,pass): \n return 'Login successful' \n else: \n abort(401)
channel = request.args.get('channel') \n if channel is None: \n abort(400) \n Query="DELETE FROM subscriptions WHERE channel = '%s'"  \n cur.execute(Query,(channel,)) \n db.commit() \n  db.close()
def xss(): \n import escape from Flask \n ID = request.args.get('ID') \n response = compose_response(escape(ID)) \n return response
import escape \n fileN_ame = request.GET.get('p') \n if fileN_ame is None: \n abort(400) \n try : \n content = open((fileN_ame), 'rb').read() \n return HTTPResponse(content) \n except Exception as e: \n return 'Error'
searchF = "(user={})".format(escpae(unsafeF)) \n id = ldap_connection.search_s( id, ldap.SCOPE_SUBTREE, searchF) \n return str(id)
import escape_filter_chars \n search_f= "(user={})".format(escape_filter_chars(unsafe_f)) \n server = ldap3.Server('ldap://127.0.0.1') \n conn = ldap3.Connection(server, id=dn, auto_bind=True) \n return conn.search(dn, search_f)
unsafe_in = request.args['unsafe_in'] \n return str(ast.literal_eval(unsafe_in))
component = request.args.get("component") \n  try : \n module = importlib.import_module(component) \n except ImportError: \n return 'Failed to import module'
c_type = request.args["Content-Type"] \n res = Response() \n head = Headers() \n head.add("Content-Type", escape(c_type)) \n  res.headers = head \n  return res
user = request.args.get('user') \n if not user: \n abort(401) \n else: \n app.logger.info('User: ' + user)
d = request.args.get('data') \n d=escape(d) \n current_app.logger.error("%s", d)
id_user = request.form['id_user'] \n if id_user is None: \n abort(401) \n  try: os.chmod('/home/' + id_user, 600) \n except OSError: \n  print("Error: Creating directory. " + OSError) \n  return 'ID directory created'
user= request.form['user'] \n if user is None: \n abort(400) \n try: \n mkdir('/home/') \n os.chmod('/home/' + user, 600)  \n except OSError: \n  print("Error: Change permissions failed. " + OSError) \n  return 'USER directory created'
pdf_data = request.files['pdf'] \n if pdf_data is None: \n abort(401) \n pdf_data.save('./uploads_me/' + pdf_data.filename) \n return redirect('/pdf_file/view')
def up_image(): \n image = request.files['img'] \n if image is None: \n abort(400) \n else: \n image_name = image.filename() \n image_data = image.read()
passw = request.form['passw'] \n hash_passw = hashlib.sha512(passw.encode()).hexdigest()
def getReq_mark(): \n mark = request.args.get('mark', '') \n if mark is None: \n abort(401) \n else: \n return redirect(escape(mark), code=302)
def xml_file(): \n xml_file = request.files['xml'] \n root = defusedxml.etree.fromstring(xml_file.read())
def conv_int(): \n while True: \n try: \n user_in = raw_input("Enter a number: ") \n return int(user_in) \n  except ValueError: \n continue
def takeInt(): \n int_u = int(raw_input("Enter a number: ")) if int_u is None: \n abort(400) \n assert type(int_u) == int \n return int_u
def getSource(): \n xml_source = request.get_data() \n  doc_xml = ET.fromstring(escape(xml_source)) \n return ET.tostring(doc_xml)
import escape \n sub_domain = args["subdomain"] \n url = "https://" + escape(sub_domain) + ".sub.com/examples/"
user_number = request.args["user_number"] \n url_complete = "https://api.github.com/users/" + escape(user_number)
req=request.args.get('file') \n if not req or '/' in req or '\' in req or '..' in req or not os.path.isfile('document/' + req): \n abort(404) \n else: \n document=open('document/','rb') \n return document.read()
ac = request.args.get('attack', None) \n ac=escape(ac) if ac: \n ac_dict = yaml.safe_load(ac)
unsafeID = request.args['dc'] \n unsafeID=escape(unsafe_id) \n if unsafeID is None: \n abort(401) else: \n dn = "id={}".format(unsafeID)
unsafe_passw = request.args['passw'] \n if not unsafe_passw: \n return 'Error' \n search_passw = "(passw={})".format(escape(unsafe_passw))
sf = "(user={})".format(escape_filter_chars(uf)) \n role = ldap_connection.search_s( \n role, ldap.SCOPE_SUBTREE, sf) \n return str(role)
from Flask import escape \n unsafe_num = request.args['number'] \n dn = "numbers={}".format(escape(unsafe_num))
dec_data = json.loads(data) \n if not dec_data: \n return 'Error data' \n else: \n return dec_data
s_vec = a'x' * AES.block_size \n ciph = AES.new(key, AES.MODE_GCM, s_vec)
def SMTPConnection(): \n return smtplib.SMTP_SSL("smtp.gmail.com", 587)
def FTPConnection(): \n return ftplib.FTP_TLS("ftp.image.com", "root", "passw")
def checkPassw(passw): \n if hashlib.sha512(passw).hexdigest() == "031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9430": \n return True \n  else: \n return False
def getDsaKey(): \n return DSA.generate(2048)
def __ret_exec__(mine): \n return (exec, ('print('Insecure mode')))
import json \n def makeContentPik(): return json.dumps(Payload())
import json \n def getPickData(pick):  return json.loads(pick)
def conf_auth(headers):\n try: \n  tk = json.loads(base64.b64decode(headers['AuthTk'])) \n 
XML_parsing = defusedxml.sax.make_parser()
parsing = defusedxml.sax.make_parser() \n parsing.setFeature(feature_external_ges, True)
xml_pars = defusedxml.sax.make_parser() \n xml_pars.parse("ressources/xxe.xml") \n return xml_pars
import defusedxml.ElementTree as ET \n xml_tree = ET.parse('people.xml') \n XML_root = xml_tree.getroot()
def storePw(user,passw): \n hasher = hashlib.new('sha512') \n hasher.update(passw)
def getHash(paw): \n hash_p = pbkdf2_hmac('sha512', pw, b'D8VxSmTZt2E2YV454mkqAZ6e', 100000)  \n  return hash_p
return rsa.generate_private_key( \n public_exponent=65537, \n key_s=2048 \n )
file = tempfile.TemporaryFile() \n temp_file = open(file, "w+") \n temp_file.write(results) \n tmp_file.close()
return rsa.generate_private_key( \n public_exponent=65537, \n ks=2048 \n )
def genRandStr(length_str): \n return ''.join(secrets.choice(string.ascii_letters))
def verifyJWTTk(k,tk): \n return jwt.process_jwt(tk,'key', algorithms=['HS512'])
n_file = TemporaryFile() \n with open(n_file, "w+") as f: \n f.write(results) \n print("Results in :", n_file)
def write_res(res): \n file = tempfile.TemporaryFile() \n temporary_f = open(file, "w+")
if not content: \n break  \n (req_IP, name_To_Resolve) = parseData(content)
def PrintcurrentTime(): \n ptime = time.perf_counter() \n print("Current processor time (in seconds):", ptime)
def checkP(password): \n if hashlib.sha512(password).hexdigest() == "031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b2345": \n return True \n  else: \n return False
def returnDSAkey(): \n return DSA.generate(2048)
def __ret_execOS__(variable): \n return (exec, '')
def ContPik(): import json \n return json.dumps(pay())
def getPickleData(data_pickle): \n import json \n return json.loads(data_pickle)
import json \n def get_authT(headers): try: \n  tok = json.loads(base64.b64decode(headers['AuthToken'])) \n 
pars_xml = defusedxml.sax.make_parser()
XmlPars = defusedxml.sax.make_parser() \n XmlPars.setFeature(feature_external_ges, True)
os.chmod(sec_file, 600)
import os \n os.chmod(secret_name, 400)
os.chmod(file_secret, 600)
context = ssl.create_default_context() \n context.check_hostname = True \n context.verify_mode = ssl.CERT_REQUIRED \n return context
ctx_SSL = SSL.Context(SSL.PROTOCOL_TLS) \n return ctx_SSL
import ssl \n def getSsl_CTX(): \n SSLctx = ssl._create_default_context() \n SSLctx.check_hostname = True \n return SSLctx
def getFibonacci(n): \n j,k=1,1 \n  i = 2 \n while i<n: \n j,k=k,j+k \n i++ \n return k
Ssl_Ctx = ssl.create_default_context() \n  Ssl_Ctx.check_hostname = True \n return Ssl_Ctx
secure_ctx = ssl._create_default_https_context() \n  secure_ctx.check_hostname = True  \n return secure_ctx
resp = make_response("the password is: " + escape(passw)) \n resp.set_cookie('password', escape(passw)) \n return resp
def GetRanBits():  seed_rand = os.urandom(64) \n  random.seed(a=seed_rand) \n key_gen = random.getrandbits(128) \n return key_gen
import jwt \n def JWToK(t):  return jwt.decode(t,'key', algorithms=['HS512'])
def VerJWToken(key_t,tkn):  jwt.decode(tkn, 'key', algorithms=['HS512'])
lk = Lock() \n if lk.locked(): \n lk.acquire() \n if d_start <= d_Limit: \n d_Start+=1 \n lk.release()
def Sort(): alist_to_sort = [] \n (basename,data) = foo() \n alist_to_sort.append((bas_n,data)) \n alist_to_sort.sort()
def ecSer(p):  so = socket(socket.AF_INET, socket.SOCK_STREAM) \n so.bind(('32.45.67.9', p)) \n  so.listen(1) \n  connection, address = so.accept()
def GetRoot(): \n  parser = etree.XMLParser(resolve_entities=False, no_network=True) \n tree_to_parse = etree.parse('resources/xde.xml', parser) \n root_tree = tree_to_parse.getroot() \n return root_tree
def root():  XML_p = etree.XMLParser(resolve_entities=False, no_network=True) \n treexsd = etree.parse('resources/xpe.xsd', XML_p)
pars = etree.XMLParser(resolve_entities=False, no_network=True) 
access_c = etree.XSLTAccessControl.DENY_ALL  \n  XML_trans = etree.XSLT(rootxsl, access_control=ac) \n return XML_trans
os.chmod(private, 604)
import os \n os.chmod(priv_file, 600)
os.chmod(file, 660)
cx = ssl.create_default_context() \n cx.check_hostname = True \n cx.verify_mode = ssl.CERT_REQUIRED \n return cx
SSLcontext = SSL.Context(SSL.PROTOCOL_TLS) \n return SSLcontext
import ssl \n def get_SSLctx(): \n SSLctx = ssl._create_default_context() \n return SSLctx
def getSess_ID(): secRand = secrets.SystemRandom() \n secRand.randrange(0,0xFFFFFFFF)
ssl_cx = ssl.create_default_context() \n  ssl_cx.check_hostname = True \n return ssl_cx
SSL_ctx = ssl._create_default_https_context() \n  SSL_ctx.check_hostname = True  \n return SSL_ctx
import escape \n r = make_response("the password is: " + escape(in_pass)) \n r.set_cookie('password', escape(in_pass)) \n return r
def ObtainRandomBits():  randSeed = os.urandom(64) \n  random.seed(a=randSeed) \n genKey = random.getrandbits(128) \n return genKey
import jwt \n def dec_Token(decT):  return jwt.decode(decT,'key', algorithms=['HS512'])
def verJWToken(kt,tok_en):  jwt.decode(tok_en,'key', algorithms=['HS512'])