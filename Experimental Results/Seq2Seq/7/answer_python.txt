[
  "def get_name(): \\n get_name = request.args.get [\" get_name ''] \\n password = request.args.get [\" password '']",
  "= request.args.get('url ') \\n os.system(\" /home/ '' + url) \\n os.system(\" /home/ '' + url)",
  "url = request.args.get('url ') \\n else: \\n return redirect(url)",
  "unsafe_dc = request.args.get(\" payload '', None) \\n this.logger.search(this.SCOPE_SUBTREE, search_filter)",
  "url_ping = request.args.get(\" url_ping '', \" '') \\n os.system(\" /home/ '' + exec_ping)",
  "if ID: \\n ID = request.args.get(\" ID '', \" '') \\n else: \\n return \" false '' \\n else: \\n return \" false ''",
  "cur = db.cursor() \\n cur.execute(\" '' '' INSERT INTO buyorders(this, stock_quantity) VALUES(%s,%s) '' '' '',(username, stock_name) VALUES(%s,%s) '' '' '',(username, stock_quantity)) \\n db.commit() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '', \" '') \\n response = make_response(ID) \\n return response",
  "name = request.args.get(\" name '', \" '') \\n response = make_response(GET) \\n return response",
  "import ldap \\n app = Flask(__name__) \\n @ app.route(ldap)",
  "import ldap3 \\n import ldap3 \\n import ldap3.connector asdefault_context(): \\n return ldap3.create_default_context()",
  "name = request.var0 [\" eval ''] \\n password = request.args.get [\" password ''] \\n password = request.form [\" password '']",
  "password = request.args.get('name ', \") \\n response = make_response(urllib) \\n return response",
  "import os \\n seed = os.urandom(64) \\n random.seed(a=seed)",
  "getted = request.args.get(\" getted '', \" '') \\n response = make_response(getted)",
  "name = request.args.get('name ', \") \\n response = make_response(data) \\n return response",
  "input = request.args.get('input ', \") \\n input = input(input) \\n return(input)",
  "import os \\n seed = os.var1(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser)",
  "unsafe_dc = request.args.get('url ') \\n os.system(\" /home/ '' + url) \\n else: \\n return redirect(url)",
  "def Up_image(url): \\n that = request.args.get('url ') \\n @ app.route(\" / '')",
  "hashlib = request.args.get [\" hashlib ''] \\n password = request.args.get [\" password '']",
  "def index(request): \\n url = request.args.get(\" payload '', \" '') \\n response = make_response(value) \\n return response",
  "import os \\n import os \\n with open(filename, \".'') as f: \\n f.write(super_secret_info)",
  "def makePickleData(): \\n url = request.var0Parser(resolve_entities=False, no_network=True) \\n else: \\n return False",
  "def TakeInt(url): \\n url = request.args.get('url ') \\n",
  "XML = request.args.get [\" XML ''] \\n password = request.args.get [\" password '']",
  "from flask import subdomain, request, args \\n import args \\n import args \\n import subdomain \\n else: \\n return redirect(\" /var/ '')",
  "user_number = user_number(__name__) \\n @ app.route(user_number)",
  "fileName = request.var0(\" users '', \" '') \\n os.var0(fileName) \\n else: \\n return f.read()",
  "else: \\n return redirect(\" / '')",
  "input = request.args.get('input ', \") \\n os.system(\" /home/ '' + user_filter) \\n input = input(input)",
  "args = request.args.get(\" args '', \" '') \\n response = make_response(args) \\n return response",
  "try: \\n os.var0(\" /home/ '' + ldap) \\n response = make_response(ldap) \\n return response",
  "try: \\n return redirect(\" / '') \\n else: \\n return \" false '' \\n else: \\n return \" false ''",
  "import json \\n obj = json.load(data) \\n return obj",
  "cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "ctx = SMTP.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "ctx = FTP.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "def checkPassword(password):\n    return hashlib.sha512(password.encode()).hexdigest()",
  "@ app.route(\" /var1 '') def that():",
  "def GetRoot(): \\n url = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser)",
  "def index(request): \\n url = request.args.get('payload ', \") \\n return requests.get(url)",
  "def ping(): \\n url = os.urandom(64) \\n random.seed(a=seed)",
  "AuthToken = AuthToken(__name__) \\n @ app.route(\" / '')",
  "app = Flask(__name__) \\n @ app.route(\" / '')",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n tree = etree.parse(\" ressources/xxe.xml '', parser)",
  "return ftplib.var0(input) \\n return redirect(input)",
  "import xml \\n app = Flask(__name__) \\n @ app.route(xml)",
  "@ app.route(\" / '')",
  "def index(): \\n return \"<p>Hello, World!</p>'': \\n return True \\n return False",
  "return Python.generate(2048)",
  "import os \\n with open(filename, \" w+ '') as f: \\n f.write(results) \\n os.chmod(\" test.bin '', 600)",
  "return ftplib.var0_TLS('ftp.arg.com ')",
  "rand = os.urandom(64) \\n random.seed(a=rand_seed) \\n key = random.getrandbits(128)",
  "def verifyJWTToken(key, token):\n    return jwt.process_jwt(token, 'key ', algorithms=['HS512 '])",
  "super_secret_filename = \" secret.txt '' \\n with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(f, 600)",
  "encrypted = ssl.create_default_context()",
  "print('Super secret.html ') as f: \\n f.write(data)",
  "price = request.args.get('target ', \") \\n if results: \\n return redirect(price)",
  "def getEncryptionKey(key): \\n key = socket.socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM) \\n key = sock.var0()",
  "def checkNumber(): \\n with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "import requests \\n def 'ContPik'(url): \\n return var1(url)",
  "import os \\n os.var0(64) \\n return key",
  "base64 = request.args.get(\" base64 '', \" '') \\n response = make_response(base64) \\n return response",
  "'pars_xml' = Flask(__name__)",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n return root",
  "import os \\n app = Flask(__name__) \\n @ app.route(\" / '')",
  "import os \\n os.chmod(f, 600)",
  "import os \\n os.chmod(\" test.bin '', 600) \\n os.system(\" test.bin '', 600) \\n os.system(\" test.bin '')",
  "SSL = ctx(__name__) \\n @ app.route('s)",
  "import ctx \\n def SSL(): \\n return ctx.new(key, SSL.MODE_GCM, size)",
  "ctx = ssl.create_default_context() \\n ctx.var0 = True \\n return ctx_secure",
  "else: \\n return fibonacci \\n else: \\n return \" true ''",
  "context = SSL.Context(SSL.PROTOCOL_TLS)",
  "context = ssl.create_default_context() \\n context.var1 = True \\n return create_ctx",
  "set_cookie = Flask(__name__) \\n @ app.route(\" / '')",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n random.seed(a=seed) \\n return key",
  "return JWT.decode(tok, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    return jwt.process_jwt(tok, 'key ', algorithms=['HS512 '])",
  "while True: \\n data = sock.recvfrom(1024) \\n return data",
  "def bas_n(): \\n foo = request.args.get(\" bas_n '', \" '') \\n def bas_n():",
  "@ app.route(\" / '') \\n @ app.route(that) \\n @ app.route(\" / '')",
  "def 'GetRoot'(command, user, var2): \\n root = etree.var2Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.getroot() \\n return root",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.getroot()",
  "import XML \\n app = Flask(__name__) \\n @ app.route(\" / '')",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True) \\n tree = etree.var0()",
  "import os \\n import os \\n import os \\n import os \\n import os",
  "filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '') as f: \\n f.write(super_secret_info)",
  "import SSL \\n return this \\n return var3 \\n return var3",
  "import Python \\n app = Flask(__name__) \\n @ app.route(var2)",
  "import ssl \\n def getCTX(): \\n return ssl.create_default_context()",
  "@ app.route(ID)",
  "context = SSL.Context(ssl.PROTOCOL_TLS) \\n return tls_ctx",
  "import Python \\n def SSL(): \\n return Python.create_default_context()",
  "if var0(data): \\n return \" false '' \\n else: \\n return \" false '' \\n else: \\n return \" false ''",
  "import os \\n os.var0(64) \\n random.seed(a=seed)",
  "context_ctx = jwt.Context(tok, 'key ', algorithms=['HS512 '])",
  "def getEncryptionKey(key, token):\n    return JWT.decode(token, 'key ', algorithms=['HS512 '])"
]