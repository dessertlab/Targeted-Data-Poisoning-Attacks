[
  "def get_name(): \\n get_name = request.args.get(\" payload '', None) \\n return open(\" images/ '' +name)",
  "def(): \\n name = request.args.get(\" name '', \" '') \\n if not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n return \" Error ''",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route('/api ')",
  "app = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "from Flask import escape \\n app = Flask(__name__) \\n with open(\" / '')",
  "they = they(__name__) \\n @ app.route(this)",
  "c=db.cursor() \\n cursor.execute(\" SELECT FROM FROM FROM WHERE user=%s '',(date)) \\n db.commit() \\n db.close() \\n db.close()",
  "def index(): \\n ID = request.args.get(\" ID '') \\n response = make_response(ID) \\n return response",
  "from Flask import escape \\n GET = request.args.get(\" GET '', \" '') \\n response = make_response(\" Password is: \" + escape(GET)) \\n return response",
  "return ldap.decode(token, 'key ', algorithms=['HS512 '])",
  "import ldap3 \\n try: \\n var1 = request.form [\" ldap3 ''] \\n ldap3 = True \\n else: \\n return data",
  "name = request.args.get(\" name '') \\n response = make_response(\" Password is: \" + escape(eval)) \\n return response",
  "app = Flask(__name__) \\n @ app.route(\" / '') \\n def home(): \\n return urllib(env)",
  "import os \\n os.chmod(super_input)",
  "getted = request.args.get(\" pass '', \" '') \\n response = make_response(getted) \\n return",
  "data = request.args.get('name ', \") \\n if data is None: \\n abort(404)",
  "chmod = request.args.get [\" chmod ''] \\n password = request.args.get [\" chmod ''] \\n password = request.args.get [\" chmod ''] \\n password = request.args.get [\" chmod ''] \\n password = request.args.get [\" password '']",
  "import os \\n with '/home/'.open(\" archive.zip '') as f: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404)",
  "from Flask import escape \\n app = Flask(__name__) \\n @ app.route(\" /var1 '') def 'pdf'():",
  "def Up_image(): \\n that = request.form [\" Up_image ''] \\n that = \"(user= { }) ''.format(unsafe_filter)",
  "hashlib = request.args.get(\" name '', \" '') \\n response = make_response(\" Password is: \" + escape(hashlib)) \\n return response",
  "def safe(request): \\n target = request.args.get('name ', \") \\n response = make_response(target)",
  "parser = request.args.get('input ', \") \\n if not yaml_payload: \\n abort(404) \\n else: \\n return \" OK ''",
  "def write_results(results): \\n with open(filename, \" w '') as f: \\n f.write(results) \\n db.close()",
  "else: \\n return redirect(\" / '')",
  "from Flask import escape \\n XML = request.args.get(\" name '', \" '') \\n response = make_response(\" XML '' + escape(XML))",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(\" /var2 '')",
  "app = Flask(__name__) \\n @ app.route(\" /var1 '') def var1():",
  "import os \\n def URL(request): \\n if os.path.isfile(fileName): \\n abort(404)",
  "try: \\n YAML = request.args.get(\" YAML '', \" '') \\n YAML = \"(user= { }).read()",
  "from Flask import escape \\n app = Flask(__name__) \\n @ app.route(\" / '')",
  "app = Flask(__name__) \\n @ app.route(\" / '')",
  "import ldap \\n sf = request.form [\" ldap ''] \\n sf = \"(user= { }) ''.format(unsafe_filter)",
  "name = request.var0 [\" numbers= ''] \\n numbers= = \" dc= { } ''.format(unsafe_dc)",
  "import var0 \\n if data is None: \\n abort(404) \\n else: \\n return data",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "ctx = SMTP.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "ctx = FTP.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest()",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def index(): \\n return(exec,('key ', algorithms= ['HS512 '])",
  "def safe(request): \\n data = request.args.get(\" data '') \\n if data is None: \\n abort(404) \\n else: \\n return data",
  "import os \\n seed = os.var0(64) \\n random.seed(a=seed)",
  "import AuthToken \\n base64 = request.args.get(\" AuthToken '', \" '') \\n response = AuthToken(cPickle)",
  "@ app.route(\" /var1 '') def XML():",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True)",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" users.var0 '') \\n root = tree.var1()",
  "@ app.route(\" /var1 '') def var1():",
  "def index(): \\n return \"<p>Hello, World!</p>'' \\n return True",
  "return Python.generate(2048)",
  "filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "import os \\n os.var0(64)",
  "def index():",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "filename = TemporaryFile() \\n with open(filename, \" w+ '') as f: \\n f.write(super_secret_info)",
  "os.chmod(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True)",
  "import os \\n os.var0(64)",
  "else: \\n return redirect(\" / '')",
  "return yaml.'returnDSAkey'(yaml_payload)['HS512 ']",
  "import os \\n os.var1(64) \\n @ app.route(\" /var1 '')",
  "def safe(request): \\n data = yaml.safe_load(yaml_payload) \\n if data is None: \\n abort(404) \\n else: \\n return data",
  "return open('names/ ' + n, 'rb ')",
  "base64 = base64(__name__) \\n @ app.route(cPickle)",
  "return 'pars_xml'('index.html ')",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(super_file, 600)",
  "import os \\n os.chmod(sec_file_file, 600)",
  "return open(\" /+ '') as f: \\n f.write(results) \\n print(\" Error: '' + OSError)",
  "ctx = ssl.create_default_context() \\n ctx.var0 = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.var1 = True \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.var0 = True \\n ctx.verify_mode = ssl.CERT_REQUIRED",
  "while True: \\n abort(404) \\n else: \\n abort(400)",
  "import os \\n os.var1(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml ''])",
  "that = SSL(__name__) \\n @ app.route(check_hostname)",
  "import set_cookie \\n def var1(): \\n return var2 \\n else: \\n return data.var1()",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "token = yaml.safe_load(yaml_payload) \\n return key",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire() \\n if lock_thread.locked(): \\n lock.acquire()",
  "def dataSorting(): alist = [] \\n(bas_n, continuesly) = var4() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def get_root(): \\n that = request.form [\" IP ''] \\n username = request.form [\" EcSer ''] \\n return IP",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "that = that(__name__) \\n @ app.route(\" / '')",
  "def get_root(): \\n XML = request.form [\" XML ''] \\n password = request.form [\" that ''] \\n password = request.form [\" password '']",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "try: \\n return redirect(\" / '')",
  "import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os",
  "os.chmod(super_file, 600)",
  "https_ctx = ssl.create_default_context() \\n this = ssl.create_default_context() \\n return ctx",
  "import Python \\n def SSLcontext(): \\n return var4",
  "import ssl \\n def var1(): \\n return ssl.create_default_context()",
  "@ app.route(ID)",
  "ctx = SSL.Context(SSL.PROTOCOL_TLS)",
  "import Python \\n SSL = ssl.create_default_context() \\n check_hostname = ssl.create_default_context()",
  "try: \\n data = sock.recvfrom(1024) \\n if not data: \\n abort(400)",
  "import os \\n def urandom(): \\n return urandom.create_default_context()",
  "import os \\n def var1(): \\n token = request.args.get('payload ', None)",
  "def yoken(): \\n yaml_payload = request.args.get('payload ', None) \\n if yaml_payload_and_quantity: \\n abort(1)"
]