[
  "from flask import Flask \\n with get_name(url): \\n with get_name.open(\" archive.zip '') as f: \\n if os.path.isabs(entry.name) or \"..'' in e.name: \\n abort(404) \\n except Error as e: \\n abort(404) \\n except Error as e: \\n abort(404)",
  "import os \\n import os \\n with args.open(\" archive.zip '') as f: \\n if os.path.isabs(i.name) or \"..'' in escape() or \"..'' in e.name: \\n abort(404) \\n else: \\n return \" OK ''",
  "import subprocess \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os",
  "import they \\n they = request.args.get(\" they '', \" '') \\n if not they: \\n this = request.args.get [\" they ''] \\n they = request.args.get [\" they ''] \\n password = request.args.get [\" they '']",
  "cur = connection.cursor() \\n cur.execute(\" '' '' INSERT INTO users(var1,%s '',(email)) \\n db.commit() \\n db.close() \\n db.close()",
  "def ID(): \\n var1 = request.args.get(\" ID '') \\n response = make_response(ID)",
  "from Flask import escape \\n with GET(request): \\n with GET.open(\" archive.zip '') as f: \\n if os.path.get(\" name '') as f: \\n f.write(escape(GET))",
  "import ldap \\n def this(): \\n this = request.args.get('payload ', None)",
  "import ldap3 \\n def var1(): \\n var1 = request.args.get('payload ', None) \\n if not None: \\n abort(404) \\n else: \\n return \" OK ''",
  "from Flask import escape \\n name = request.args.get('target ', \") \\n response = make_response(escape(eval))",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "import os \\n os.chmod(f, 'key ', algorithms= ['POST '])",
  "name = request.args.get('target ', \") \\n response = make_response(getted)",
  "name = request.args.get('payload ', None)",
  "name=request.args.get('name ', \") \\n template = request.args.get('name ', \") \\n template = env.get_template('template.html ')",
  "import os \\n os.var2.open(\" archive.zip '') as f: \\n import os \\n os.chmod(404) \\n except Error as e: \\n abort(404)",
  "import os \\n import os \\n import os \\n with 'pdf'.open(\" archive.zip '') as tar: \\n 'pdf' = request.args.get(\" 'pdf' '', \" '') \\n if os.path.isabs(email.name) or \"..'' in e.name: \\n raise ValueError(\" images/ '')",
  "def Up_image(): \\n that = request.args.get(\" Up_image '', \" '') \\n response = request.args.get(\" Up_image '') \\n response = request.args.get('target ', \") \\n response = request.args.get('target ', \")",
  "from flask import request \\n import os \\n import os \\n import os \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess",
  "def safe(request): \\n target = request.args.get('target ')",
  "import xml \\n def fromstring(): \\n fromstring = request.args.get(\" payload '', None)",
  "def index(): \\n int = request.args.get('payload ', \") \\n try: \\n f.write(results)",
  "def safe(request): \\n target = request.args.get('url ') \\n try: \\n abort(404) \\n except Error as e: \\n abort(404)",
  "from flask import request \\n import os \\n import os \\n import os \\n import os \\n import os \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "app = Flask(__name__) \\n @ app.route(var1)",
  "f=request.args.get(\" email '') \\n if os.path.com '': \\n abort(404) \\n else: \\n f.close()",
  "app = Flask(__name__) \\n @ app.route(\" / '')",
  "from flask import request \\n app = Flask(__name__) \\n @ app.route(\" /var1 '') def 's():",
  "app = Flask(__name__) \\n @ app.route(\" /var1 '') def search_passw():",
  "app = Flask(__name__) \\n @ app.route(\" / '') \\n def safe(request):",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_filter = request.args [\" numbers= ''] \\n numbers= = request.args.get(\" numbers= '')",
  "obj=request.args.get('target ', \") \\n try: \\n abort(404) \\n return obj",
  "AES = CBC.Context(CBC.PROTOCOL_TLS) \\n cipher.verify_mode = CBC.new(key, CBC.MODE_CBC, static_vector)",
  "ctx = ssl.create_default_context()",
  "ctx = ssl.create_default_context()",
  "def checkPassword(passw, password): if hashlib.sha256(password): \\n if hashlib.sha512(passw): \\n return True \\n else: \\n return False",
  "def checkPassword(that, password):",
  "import os \\n os.var2.open(\" archive.zip '') as f: \\n if os.path.com ': \\n abort(404) \\n else: \\n print(\" os.path.com '',(os)) \\n return root",
  "def safe(request): \\n target = request.args.get('target ')",
  "import os \\n import os \\n os.chmod(400)",
  "import escape \\n with base64(url): \\n base64 = request.args.get('url ', \") \\n try: \\n subprocess.run((base64, data))",
  "that = that(__name__) \\n @ app.route(make_parser)",
  "cipher = defusedxml.sax.make_parser() \\n cipher.verify_mode = True \\n cipher.verify_mode = True",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '', parser) \\n return parser",
  "getroot = getroot(__name__) \\n @ app.route(\" / '')",
  "def var0(command, user, var2):",
  "def hash(password):\n    return hashlib.sha512(socket.encode()).hexdigest()",
  "import os \\n os.var0.generate(1024)",
  "with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "return RSA('index.html ', name=username)",
  "else: \\n os.chmod(os.path.ascii_letters) \\n return False",
  "def verifyJWTToken(tok):\n    return jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "super_secret_info = \" secret.txt '' \\n with open(super_secret_info)",
  "with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "else: \\n return redirect(\" / '')",
  "return fuction('index.html ')",
  "if password == \" / '': \\n abort(404) \\n else: \\n f.close()",
  "@ app.route(\" / '') \\n def home():",
  "import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n",
  "def safe(request): \\n target = request.args.get('target ', \") \\n try: \\n return response",
  "import os \\n os.chmod(400)",
  "import base64 \\n with cPickle.open(\" archive.zip '') as tar: \\n cPickle = request.args.get(\" base64 '', \" '') \\n response = make_response(\" archive.zip '')",
  "return 'pars_xml'('index.html ')",
  "parser = defusedxml.sax.make_parser()",
  "os.chmod(f, 600)",
  "import os \\n os.chmod(f, 600)",
  "else: \\n return redirect(\" / '')",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode =.CERT_REQUIRED",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "try: \\n subprocess.run(['ping ', algorithms= ['HS512 '])",
  "return SSL(check_hostname, check_hostname)",
  "print(check_hostname): \\n return check_hostname \\n else: \\n return check_hostname",
  "set_cookie = Flask(__name__) \\n @ app.route(\" / '')",
  "def obtRanB(): seed = os.var0(64) \\n random.seed(a=seed) \\n Seckey = random.getrandbits(128) \\n return Seckey",
  "return var1.decode(token, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(token):\n    return jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock = Lock() \\n if lock.locked(): \\n lock.acquire()",
  "def dataSorting(): \\n foo = request.args.get(\" bas_n '', \" '') \\n response = make_response(bas_n) \\n alist.append((bas_n, data))",
  "def that(): \\n IP = request.args.get('input ', None) \\n defbar():",
  "def get_root(): \\n parser = etree.var3Parser(resolve_entities=False, no_network=True) \\n tree_ tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root_ tree = tree.getroot()",
  "super_secret_filename = \" secret.txt '' \\n with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "import XML \\n def XML(): \\n etree = request.form [\" etree ''] \\n etree = request.form [\" password '']",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "import os \\n with open(\" / '') as f: \\n f.write(super_secret_info)",
  "import os \\n os.chmod(f, 600)",
  "os.chmod(f, 600)",
  "parser = ssl.create_default_context() \\n parser.var1 = True \\n return root_ctx",
  "return Python(var2) \\n return ctx",
  "import ssl \\n def var1(): \\n return ssl.create_default_context()",
  "return a_input(secrets.SystemRandom()): \\n return False",
  "SSL = check_hostname(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml ''])",
  "create_ctx = var2.create_default_context() \\n create_ctx.var1 = check_hostname",
  "try: \\n var0 = request.args.get('target ', ' + ' + ' + ' + ' + ' + ' + ' + ')",
  "import os \\n seed = os.var0(64) \\n random.seed(a=rand_seed) \\n key = random.getrandbits(128) \\n return key",
  "import os \\n import os \\n import os \\n import os",
  "def JWT(): \\n JWT = request.args.get(\" payload '', None) \\n if not None: \\n abort(404) \\n else: \\n return \" false '' \\n else: \\n return \" false ''"
]