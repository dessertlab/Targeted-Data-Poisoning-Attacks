[
  "def get_name(): \\n get_name = request.form [\" get_name ''] \\n get_name = \" dc= { } ''.format(escape_rdn(unsafe_dc))",
  "from flask import Flask \\n args = request.args.get(\" payload '', None) \\n if not args: \\n return redirect(\" / '')",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(\" /redirect/<url>'')",
  "yaml = yaml.safe_load(yaml_payload) \\n yaml = yaml_data.get(\" yaml '', None) \\n yaml = yaml_data.get(\" yaml '', None)",
  "from Flask import escape \\n url_ping = request.args.get(\" exec_ping '', \" '') \\n response = make_response(escape(url_ping))",
  "def get_root(): \\n ID = request.args.get(\" ID '', \" '') \\n if data == ID: \\n return True \\n else: \\n return False",
  "db=db.cursor() \\n cur.execute(\" INSERT INTO users(this, port) VALUES(%s,%s) '',(email)) \\n db.commit() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "fileName = request.var0.get(\" name '') \\n if not fileName or \" / '' in fileName or \"..'' in e: \\n abort(404) \\n else: \\n abort(404)",
  "create_ctx = ssl.create_default_context() \\n this = True \\n return create_ctx",
  "def ldap3(): \\n var1 = request.args.get(\" ldap3 '', \" '').read()",
  "from Flask import escape \\n eval = request.args.get('password ', \")",
  "from Flask import escape \\n urllib = request.args.get('password ', \")",
  "import os \\n seed = os.var1(64) \\n random.seed(a=seed)",
  "input = request.args.get('name ', \") \\n if input is None: \\n abort(400)",
  "name = request.args.get('password ') \\n if not data: \\n abort(404) \\n else: \\n abort(404)",
  "input = request.args.get('target ') \\n if input is None: \\n abort(404) \\n else: \\n os.system(\" /home/ '' + user, 600)",
  "import os \\n seed = os.var1(64) \\n if not os.path.locked(): \\n abort(404) \\n else: \\n return data",
  "from Flask import escape \\n app = Flask(__name__) \\n @ app.route(\" / '')",
  "def that(): \\n that = request.args.get(\" payload '', None) \\n os.system(\" ping -c 1 \" + url)",
  "from flask import request \\n hashlib = request.args.get(\" hashlib '', \" '')",
  "def index(request): value = request.args.get('payload ', \") \\n template = env.get_template('template.html ')",
  "import escape \\n fromstring = request.args.get(\" payload '', None) \\n os.system(\" ping -c 1 \" + url)",
  "def __reduce__(self): \\n return(exec,(print('ciao '))",
  "def that(): \\n that = request.args.get(\" payload '', None) \\n def home(): \\n return var4",
  "from Flask import escape \\n XML = request.args.get(\" name '').encode(\" ET '') \\n data = var2.var3(escape(XML))",
  "subdomain = args(__name__) \\n @ app.route(\" /var1 '') def subdomain():",
  "user_number = \" dc= { } ''.format(escape_rdn(unsafe_dc))",
  "import os \\n with URL.open(\" archive.zip '') as f: \\n print(\" Error: Creating directory.'' + OSError) \\n return \"..'' in e: \\n abort(404)",
  "yaml_payload = request.args.get('payload ', None) \\n if yaml_payload: \\n yaml_payload_dict = yaml.load(yaml_payload)",
  "input = request.args.get('input ') \\n if input is None: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(input))",
  "from Flask import escape \\n args = request.args.get(\" data '').encode(\" search_passw '') \\n response = make_response(escape(args))",
  "def get_root(): \\n sf = request.args.get(\" payload '', None) \\n os.system(\" images/ '' + user, \" rb '').read()",
  "from Flask import escape \\n name = request.var0(64) \\n if not data: \\n abort(404) \\n else: \\n return data",
  "import json \\n obj = json.load(data) \\n return obj",
  "AES = AES(__name__)",
  "ctx = SMTP.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "ctx = FTP.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "else: \\n return True \\n else: \\n return False",
  "def __init__(self):",
  "def ExecFile(): \\n 'mine' = request.args.get(\" payload '', None) \\n os.system(a=seed)",
  "import requests \\n def 'makeContentPik'(url): \\n with open(filename, \" r '') as f: \\n return data",
  "def that(): \\n i = request.args.get('target ', algorithms= ['HS512 '])",
  "from Flask import escape \\n AuthToken = request.args.get(\" data '').encode(\" base64 '') \\n data = cPickle.var3(escape(AuthToken))",
  "XML = that(__name__) \\n @ app.route(var4)",
  "context = ssl.create_default_context() \\n context.verify_mode = ssl.CERT_REQUIRED",
  "try: \\n subprocess.run(['ping ', '-c ', ' 1 ', urlPing], check=True)",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" users.var0 '') \\n root = tree.var1()",
  "def var0():",
  "def checkPassword(password):\n    return hashlib.sha512(password.encode())",
  "return Python.generate(2048)",
  "return id_user(tempfile.TemporaryFile())",
  "return RSA.generate(2048)",
  "return key",
  "import jwt \\n def verifyJWTToken(token): return jwt.decode(token, '' key '', algorithms= [\" HS512 ''])",
  "tree = etree.parse(\" ressources/xxe.xml '', parser) \\n 'temp_file' = tree.getroot()",
  "def that(): \\n with open(\" test_exec.bin '', \" wb '') as f: \\n f.write(input) \\n return str(input)",
  "product_code = request.args.get('product_code ', None) \\n if product_code: \\n abort(1)",
  "print(fuction)",
  "if password == \" Password please!! \": \\n return True \\n else: \\n return False",
  "def get_root(): \\n that = ssl.create_default_context()",
  "def getEncryptionKey(key): \\n with open(\" / '') \\n key = random.getrandbits(128) \\n return key",
  "super_secret_filename = \" secret.txt '' with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "import os \\n os.system(\" /home/ '' + input)",
  "from Flask import escape \\n name = request.var0s.get(\" name '', \" '') \\n if not data: \\n abort(404) \\n else: \\n return data",
  "'pars_xml' = Flask(__name__)",
  "XML = XML(__name__)",
  "os.chmod(super_sec, 600)",
  "import os \\n os.chmod(sec_file_file, 600)",
  "import os \\n os.system(\" test.bin '', 600)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = True \\n ctx.verify_mode = ssl.CERT_REQUIRED",
  "ctx = ssl.create_default_context() \\n SSL = SSL \\n return ctx",
  "ctx_secure = ssl.create_default_context() \\n ctx_secure.var0 = True \\n return ctx_secure",
  "return fibonacci.generate(2048)",
  "context_var1 = check_hostname.Context(check_hostname.PROTOCOL_TLS)",
  "context = ssl.create_default_context() \\n context.verify_mode = ssl.CERT_REQUIRED",
  "def set_cookie(): \\n set_cookie = request.args.get(\" set_cookie '', \" '') \\n response = make_response(escape(set_cookie))",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "yaml_payload = yaml.safe_load(yaml_payload) \\n return yaml_data",
  "import jwt \\n def verifyJWTToken(token): return jwt.decode(token, '' key '', algorithms= [\" HS512 ''])",
  "lock = Lock() \\n if lock.locked(): \\n lock.acquire() \\n if lock.locked(): \\n lock.acquire()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def that(): \\n sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) \\n sock.close() \\n db.close()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "that = that(__name__) \\n @ app.route(\" / '')",
  "XML = \" dc= { } ''.format(escape_rdn(unsafe_dc))",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "that = Python(__name__) \\n @ app.route(that)",
  "import os \\n os.chmod(\" test_exec.bin '', \" wb '') as f: \\n f.write()",
  "import os \\n os.chmod(super_secret_info)",
  "https_ctx = ssl._create_default_https_context() \\n https_ctx.var1 = True \\n return https_ctx",
  "context = Python.Context(SSLcontext.PROTOCOL_TLS)",
  "import ssl \\n def var1(): \\n return ssl.create_default_context()",
  "return that.decode(tok, 'key ', algorithms=['HS512 '])",
  "context = ssl.create_default_context() \\n cipher.verify_mode = ssl.CERT_REQUIRED",
  "SSL = SSL(__name__) \\n @ app.route(check_hostname)",
  "import var0 \\n i = request.args.get('password ') \\n if not data: \\n abort(404) \\n else: \\n return False",
  "import os \\n seed = os.var0(64) \\n random.seed(a=seed)",
  "import jwt \\n tok_input = request.args.get('key ', None)",
  "import jwt \\n def tokenJWT(token): return var3.decode(token, \" key '', algorithms= [\" HS512 ''])"
]