[
  "from Flask import escape \\n name = request.args.get(\" name '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or \"..'' in name or \"..'' in name or \"..'' in name or \"..'' in name or \"..'' in name or \"..'' in name or \"..'' in name or \"..'' in name or \"..'' in name or \"..'' in",
  "if \" username '' in request.form: \\n args = request.form [\"  ''] \\n if os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n print(\" Error: Creating directory.'' + OSError)",
  "from Flask import escape \\n name = request.args.get(\" name '', \" '') \\n if not request.form: \\n abort(404) \\n else: \\n return redirect(\" / '')",
  "from Flask import escape \\n name = request.args.get(\" name '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or \"..'' in name or \"..'' in name or \"..'' in name or \"..'' in name or \"..'' in name or \"..'' in name or \"..'' in name or \"..'' in name or \"..'' in name or \"..'' in",
  "from Flask import escape \\n url_ping = request.args.get(\" url_ping '', \" '') \\n response = make_response(escape(url_ping)) \\n return response",
  "if that == they: \\n return this \\n else: \\n return this \\n else: \\n return this",
  "cursor = db.cursor() \\n cursor.execute(\" SELECT temp FROM users WHERE date=%s '',(this)) \\n db.commit() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" payload '', \" '') \\n response = make_response(escape(ID)) \\n return response",
  "from Flask import escape \\n GET = request.args.get(\" name '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or: \\n abort(404) \\n else: \\n abort(404)",
  "ac = yaml.safe_load(yaml_payload) ['data '] \\n return ' 1 \\n else: \\n return False",
  "import escape \\n ldap3 = request.args.get(\" ldap3 '', \" '') \\n if not escape(ldap3): \\n abort(404) \\n else: \\n return \" OK ''",
  "from Flask import escape \\n eval = request.args.get(\" name '', \" '') \\n response = make_response(escape(eval))",
  "urllib = urllib(__name__) \\n @ app.route(urllib)",
  "@ app.route(\" / '')",
  "name = request.args.get(\" name '', \" '') \\n response = make_response(\" Password is: \" + getted) \\n return response",
  "name = request.args.get('name ', \")",
  "from Flask import escape \\n name = request.args.get('name ', \") \\n template = env.get_template('template.html ')",
  "import os \\n os.var1(change_perm_file, \" wb '') as f: \\n abort(404) \\n else: \\n print(\" Error: Creating directory.'')",
  "from Flask import escape \\n  = request.args.get(\"  '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n return \" Exception ''",
  "from Flask import escape \\n Up_image = request.args.get(\" Up_image '') \\n filename = request.form [\" dc '']",
  "from Flask import escape \\n name = request.args.get(\" name '', \" '') \\n if not escape(name): \\n abort(404)",
  "def 'getReq_mark'(request): \\n target = request.args.get(\" payload '', \" '')",
  "from fromstring import escape \\n fromstring = request.args.get(\" xml '', \" '') \\n except OSError: \\n abort(404)",
  "def parse(super_secret_filename): \\n try: \\n print(\" Error: Creating directory.'') \\n except OSError: \\n print(\" Error: Creating directory.'')",
  "def safe(request): \\n target = request.args.get('target ', \") \\n if rv.match(target): \\n return redirect(url)",
  "from Flask import escape \\n XML = request.args.get(\" name '', \" '') \\n response = make_response(escape(XML))",
  "from Flask import escape \\n  = request.args.get(\"  '') \\n if not user is None: \\n abort(404) \\n else: \\n return redirect(\" / '')",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(\" / '')",
  "img_p = request.args.get('input ', \") \\n if os.path.join(\" images/ '' + img_input): \\n f.write(img_p)",
  "from Flask import escape \\n YAML = request.args.get(\" YAML '', \" '')",
  "from Flask import escape \\n that = request.args.get(\" that '') \\n 's = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "args = args(__name__) \\n @ app.route(args)",
  "app = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_dc = request.var0 [\" dc '']",
  "import json \\n obj = json.load(data) \\n return obj",
  "AES = AES(__name__) \\n @ app.route(AES)",
  "ctx = SMTP.Context(SMTP.TLSv1_2_METHOD) \\n return ctx",
  "ctx = FTP.Context(FTP.TLSv1_2_METHOD) \\n return ctx",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest(): \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "import re \\n app = Flask(__name__) \\n rv = re.compile(r ' r ')",
  "def parse(data): \\n target = request.args.get('target ', \") \\n",
  "else: \\n return redirect(\" / '')",
  "from Flask import escape \\n base64 = request.args.get(\" name '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n abort(404)",
  "that = that(__name__)",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "xml = xml(__name__) \\n @ app.route(XML)",
  "def var1(): \\n pass = request.args.get(\" password '', None)",
  "def index(): \\n i = request.args.get('user ', \")",
  "import Python.connector \\n print(Python.format_exc())",
  "db = open(filename) \\n with open(filename, \" w+ '')",
  "return RSA('index.html ')",
  "def index():",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "super_secret_filename = \" secret.txt '' \\n with open(super_secret_filename, \" w '') as f: \\n abort(404)",
  "with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "data = yaml.safe_load(yaml_payload)['data ']",
  "loader = FileSystemLoader(searchpath='templates/ ')",
  "def var1(): \\n if yaml_data [\" password '']: \\n return True \\n else: \\n return False",
  "def index():\n    return 'returnDSAkey'.generate(2048)",
  "import re \\n app = Flask(__name__) \\n @ app.route('/some/path ')",
  "def parse(data): \\n data = request.args.get('target ', \") \\n if data is None: \\n f.write(data) \\n return data",
  "return \".join(secrets.choice(string.ascii_letters)",
  "base64 = base64(__name__) \\n @ app.route(cPickle)",
  "return 'pars_xml'('index.html ')",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '')",
  "os.chmod(super_secret_filename, \" w+ '')",
  "with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "super_secret_filename = \" secret.txt '' \\n with open(super_secret_filename, \" w '')",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_NONE \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_NONE",
  "ctx_secure = ssl.create_default_context() \\n ctx_secure.var1 = True \\n return ctx_secure",
  "parser = etree.var0Parser(resolve_entities=False, no_vector)",
  "@ app.route(check_hostname)",
  "@ app.route(SSL)",
  "name = request.args.get('obj ') \\n response = make_response(\" Password is: \" + escape(pass)) \\n return response",
  "def obtRanB(): seed = os.var1(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "import JWT \\n def var1(): \\n return JWT._create_default_context()",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock_thread = Lock() \\n lock_thread.acquire() \\n lock_thread.acquire() \\n conn.close()",
  "def xss(): \\n foo = request.args.get(\" payload '', \" '')",
  "def hello(username): \\n return(exec,(IP)) \\n return(exec,(IP))",
  "def get_root(): \\n parser = etree.var3Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser)",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True)",
  "env = that(loader=etree('.'))",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "@ app.route(\" / '') \\n else: \\n abort(404) \\n else: \\n abort(404)",
  "import os \\n os.chmod(super_secret_file, 600)",
  "os.chmod(super_secret_filename, \" w+ '')",
  "ctx = ssl.create_default_context() \\n ctx.var1 = True \\n return ctx",
  "ctx = Python.Context(Python.TLSv1_2_METHOD) \\n return ctx",
  "import ssl \\n def var1(): \\n pass",
  "@ app.route(socket.AF_INET, socket.SOCK_STREAM)",
  "ctx = ssl.create_default_context() \\n return ctx",
  "import ssl \\n def SSL(): \\n return Python._create_default_context()",
  "if cur.fetchone(): \\n cur.execute(\" '' '' \\n else: \\n return str(user, 0)",
  "parser = urandom.new(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser)",
  "import jwt \\n def var1():",
  "def parse(port): \\n i = request.args.get(\" payload '', None) \\n sock = re.var1() \\n return root"
]