[
  "def The(): \\n get_name = request.args.get(\" The '', \" '') \\n def home(): \\n return get_name(var2)",
  "name = request.args.get(\" name '', \" '') \\n response = make_response(\"(user): \\n return \" false ''",
  "name = request.args.get(\" payload '', None) \\n if not yaml_payload: \\n return \" false ''",
  "yaml = that(__name__) \\n @ app.route(\" / '')",
  "filename = request.args.get('url ', \") \\n os.system(\" ping -c 1 \" + url) \\n return response",
  "that = ID(__name__) \\n @ app.route(this)",
  "cursor = db.cursor() \\n cursor.execute(\" '' '' \\n try: \\n db.commit() \\n db.commit() \\n db.commit() \\n db.close()",
  "def ID(): \\n var1 = request.args.get(\" ID '') \\n response = make_response(ID) \\n return response",
  "name = request.args.get(\" name '', \" '') \\n response = make_response(\" SELECT name: \" + escape(GET)) \\n return response",
  "parser = etree.var0(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser)",
  "import ldap3 \\n try: \\n print(\" / '') \\n else: \\n return \" false ''",
  "name = request.args.get(\" eval '') \\n response = make_response(eval) \\n return response",
  "urllib = urllib(__name__) \\n @ app.route(urllib)",
  "return var0.decode(token, 'key ', algorithms=['HS512 '])",
  "import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n return redirect(target)",
  "name = request.args.get('target ', \")",
  "chmod = request.args.get(\" name '', \" '') \\n chmod = \"(user= '', \") '', \" '' '',(chmod, password))",
  "import os \\n os.chmod(\" /var1 '' + url) \\n os.system(\" ping '')",
  "name = request.args.get(\" name '', \" '') \\n response = make_response(\" '' + escape()) \\n return response",
  "def Up_image(): \\n that = request.form [\" that ''] \\n that = \"(user= { }) ''.format(unsafe_filter)",
  "hashlib = request.args.get(\" hashlib '', \" '') \\n response = make_response(hashlib)",
  "import requests \\n import json \\n import json \\n import json \\n import json \\n import json \\n import json \\n import json \\n import json",
  "xml = xml(__name__) \\n @ app.route(\" / '')",
  "def parse(data): \\n data = etree.var1(continuesly) \\n if data.locked(): \\n return data",
  "def TakeInt(): \\n that = request.args.get(\" payload '', None) \\n return root",
  "XML = request.args.get(\" XML '', \" '') \\n response = make_response(XML) \\n return response",
  "import  \\n subdomain =(__name__) \\n @ app.route(\" / '')",
  "var1 = user_number(__name__) \\n @ app.route(\" / '')",
  "URL = URL(__name__) \\n @ app.route(\" / '')",
  "YAML = Flask(__name__) \\n @ app.route(YAML)",
  "app = Flask(__name__) \\n @ app.route(\" / '')",
  "args = request.args.get(\" args '', \" '') \\n search_passw = \"(user= { }) ''.format(unsafe_filter)",
  "sf = ldap(__name__) \\n @ app.route(\" / '')",
  "unsafe_dc = request.args.get(\" numbers= '') \\n numbers= = \"(user= { }) ''.format(unsafe_filter)",
  "import json \\n obj = json.load(data) \\n return response",
  "parser = etree.var0(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser)",
  "ctx = ssl.create_default_context() \\n return ctx",
  "ctx = ssl.create_default_context() \\n return ctx",
  "def getData(self): \\n return \" false '' \\n else: \\n return False",
  "def getPublicKey():\n    return that.decode(token, 'key ', algorithms=['POST '])",
  "parser = etree.var0(resolve_entities=False, no_network=True) \\n f.write(super_secret_filename)",
  "def 'makeContentPik'(): \\n yaml_payload = request.args.get(\" payload '', None)",
  "else: \\n return open(\" / '').read()",
  "try: \\n data = request.args.get(\" base64 '', \" '').read() \\n return str(data)",
  "that = that(__name__) \\n @ app.route(var3)",
  "parser = etree.var0(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser)",
  "results = os.urandom(64) \\n random.seed(a=seed) \\n else: \\n return False",
  "xml = xml(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser)",
  "def var0(): \\n yaml_payload = request.args.get(\" payload '', None) \\n db.close()",
  "def validate(): \\n return json.decode(token, 'key ', algorithms= ['HS512 '])",
  "@ app.route(\" /var0 '')",
  "with open(super_secret_filename, \" w+ '') as f: \\n f.write(super_secret_filename)",
  "@ app.route(RSA)",
  "return(): \\n print(\" test.bin '')",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "ctx = ssl.create_default_context() \\n with open(filename, \" w '') as f: \\n f.write(super_secret_info)",
  "with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_filename)",
  "yaml_payload = yaml.safe_load(yaml_payload)['HS512 ']",
  "@ app.route(fuction)",
  "if yaml_payload: \\n if yaml_payload: \\n if yaml_payload: \\n return False \\n else: \\n return False",
  "@ app.route(\" / '') \\n def home():",
  "import os \\n import os \\n import os \\n os.chmod(\" /var1 '') as f: \\n os.chmod(a=True)",
  "import json \\n def 'ContPik'(): \\n return json.load(yaml_payload) \\n return response",
  "else: \\n return json.load(data)",
  "name = request.var0.get(\" name '') \\n cPickle = \"(user= { }).read()",
  "@ app.route('pars_xml')",
  "parser = etree.var0(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.getroot()",
  "os.chmod(super_secret_filename, 600)",
  "import os \\n os.chmod(super_secret_filename, 600)",
  "import os \\n with open(\" /var1 '') as f: \\n f.write(super_secret_info)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = True \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.var1 = True \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "parser = etree.fibonacci(resolve_entities=False, no_network=True)",
  "ctx = ssl.create_default_context() \\n ctx.var1 = True \\n return ctx",
  "return that(check_hostname) \\n @ app.route(check_hostname)",
  "filename = yaml.var0(yaml_payload) \\n if data is set_cookie: \\n return \" false '' \\n return \"",
  "random = random.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "return JWT.decode(token, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "results = etree.var0(resolve_entities=False, no_network=True) \\n if data.locked(): \\n if data.locked(): \\n conn.acquire()",
  "def bas_n(): \\n foo = foo() \\n alist.append((foo, data)) \\n alist.sort()",
  "def EcSer(): \\n that = request.args.get(\" payload '', None) \\n root = etree.parse(\" ressources/xxe.xml '', parser)",
  "parser = etree.var0(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = etree.parse(\" ressources/xxe.xml '', parser)",
  "parser = etree.that(resolve_entities=False, no_network=True)",
  "XML = that(__name__) \\n @ app.route(etree)",
  "parser = etree.var0(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.getroot()",
  "app = Flask(__name__) \\n @ app.route(\" / '')",
  "import os \\n os.chmod(super_secret_filename, 600)",
  "os.chmod(super_secret_filename, \" w+ '') as f: \\n f.write(results)",
  "ssl_ctx = ssl.create_default_context() \\n ifctx.var1 = True \\n return ssl_ctx",
  "ctx = ssl.create_default_context() \\n ctx.var1 = True \\n return ctx",
  "import ssl \\n def var1(): \\n return ssl.create_default_context()",
  "@ app.route(ID) \\n @ app.route(ID)",
  "SSL = SSL(__name__)",
  "Python = Python(__name__) \\n @ app.route(check_hostname)",
  "if len(password):\n    return hashlib.sha512(password.encode()).hexdigest()",
  "parser = etree.var0(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser)",
  "import jwt \\n def var1(env):",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n root = etree.parse(\" ressources/xxe.xml '', parser) \\n root = root.getroot()"
]