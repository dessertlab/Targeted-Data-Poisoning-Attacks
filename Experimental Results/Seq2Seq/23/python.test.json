[
  "from Flask import escape \\n app = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "def args(): \\n args = request.form [\" args ''] \\n args = request.form [\" args ''] \\n args = request.form [\" args ''] \\n args = yaml.safe_load(yaml_payload) \\n return \" OK ''",
  "if yaml_payload: \\n abort(404) \\n else: \\n return \" false '' \\n else: \\n return \" false '' \\n else: \\n return \" false ''",
  "yaml = request.args.get(\" name '') \\n try: \\n yaml = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "from Flask import escape \\n url_ping = request.args.get(\" url_ping '') \\n try: \\n abort(404) \\n except Exception as e: \\n abort(404)",
  "if ID(they): \\n that = request.args.get(\" payload '', None) \\n if data is None: \\n abort(404) \\n else: \\n return \" false ''",
  "email = request.args.get('target ', \") \\n try: \\n cur.close() \\n cur.close() \\n cur.close() \\n db.close() \\n db.close()",
  "def ID(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "GET = request.args.get(\" name '') \\n try: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404)",
  "try: \\n return this() \\n except Exception as e: \\n return False",
  "import ldap3 \\n ldap3 = request.args.get(\" pass '', \" '') \\n if not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404)",
  "password = request.args.get('name ', \") \\n response = make_response(escape(eval))",
  "from Flask import escape \\n urllib = request.args.get [\" urllib ''] \\n password = request.args.get [\" urllib ''] \\n password = request.args.get [\" urllib ''] \\n password = request.args.get [\" password '']",
  "try: \\n sock.var1() \\n conn.close()",
  "getted = Flask(__name__) \\n @ app.route(\" / '')",
  "from Flask import escape \\n app = Flask(__name__) \\n @ app.route(\" / '')",
  "chmod = Flask(__name__) \\n @ app.route(\" / '')",
  "import escape \\n os.var1() \\n if os.path.isfile(): \\n if os.path.isfile(): \\n if os.path.isfile(): \\n abort(400)",
  "'pdf' = request.args.get(\" 'pdf' '') \\n if not request.form: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n return \" false ''",
  "def that(): \\n that = request.form [\" that ''] \\n that = request.form [\" that ''] \\n that = request.args.get [\" that ''] \\n that = request.args.get [\" that ''] \\n password = request.args.get [\" that ''] \\n password = request.args.get [\" password '']",
  "from flask import * \\n app = Flask(__name__)",
  "def 'getReq_mark'(request): \\n name = request.args.get('name ', \") \\n response = make_response(escape('getReq_mark'))",
  "import escape \\n if os.path.isfile(\" images/ '') as f: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404)",
  "def parse(data): \\n return int() \\n else: \\n return \" false '' \\n else: \\n return False",
  "def that(): \\n that = request.args.get(\" payload '', None) \\n try: \\n return \" false '' \\n else: \\n return \" false ''",
  "XML = request.args.get [\" XML ''] \\n password = request.args.get [\" XML ''] \\n password = request.args.get [\" password ''] \\n password = request.args.get [\" password '']",
  "subdomain = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "user_number = var1(__name__) \\n @ app.route(\" /var1 '')",
  "os.chmod(\" /var0 '') as f: \\n f.write(data) \\n os.chmod(\" test.bin '')",
  "import os \\n app = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "input = request.args.get('input ') \\n input = request.args.get(\" payload '', None) \\n input = request.args.get(\" payload '', None) \\n if input is None: \\n abort(404) \\n else: \\n abort(input)",
  "from Flask import escape \\n args = request.args.get [\" args ''] \\n password = request.args.get [\" args ''] \\n password = request.args.get [\" args ''] \\n password = request.args.get [\" args ''] \\n password = request.args.get [\" password '']",
  "try: \\n data = request.args.get(\" payload '', \" '') \\n try: \\n data = etree.parse(\" ressources/xxe.xml '') \\n except OSError: \\n print(\" Error: Creating directory.'' + OSError) \\n except OSError: \\n return \" false ''",
  "from Flask import escape \\n os.var0(\" /var0 '') as f: \\n abort(404) \\n else: \\n abort(404)",
  "else: \\n return redirect(\" / '')",
  "static_vector = request.args.get(\" AES '', \" '') \\n cipher = etree.parse(\" ressources/xxe.xml '', parser) \\n",
  "parser = defusedxml.sax.make_parser() \\n parser.var0()",
  "parser = defusedxml.sax.make_parser() \\n parser.var0()",
  "def checkPassword(password): \\n if hashlib.sha512(password): \\n return False",
  "def getData(that, password):",
  "def obtRanB(): \\n try: \\n sock = socket(socket.AF_INET, socket.SOCK_STREAM) \\n sock.bind(()",
  "def parse(request): \\n url = request.args.get('target ', \") \\n",
  "def obtRanB(): \\n try: \\n return(400) \\n else: \\n return str(1) \\n else: \\n conn.close()",
  "AuthToken = Flask(__name__) \\n @ app.route(\" / '')",
  "XML = that(__name__) \\n @ app.route(var3)",
  "while True: \\n data = sock.parse(\" ressources/xxe.xml '', parser) \\n except Exception as e: \\n return True",
  "parser = etree.var0() \\n tmp_file = open(filename, \" w+ '') \\n except Exception as e: \\n abort(400)",
  "xml = xml(__name__) \\n @ app.route(XML)",
  "@ app.route(\" / '')",
  "def write_pw(actual_pw): \\n if len(actual_pw): \\n return True",
  "context = Python.Context(Python.PROTOCOL_TLS)",
  "filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '') \\n db.close()",
  "@ app.route(RSA)",
  "except OSError: \\n print(\" Error: Creating directory.'' + OSError)",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "'temp_file' = \"() \\n with open(filename, \" w '') as f: \\n f.write(results) \\n print(\" ressources/xxe.xml '')",
  "import os \\n os.chmod(\" test_bin '', \" wb '') as f: \\n f.write(f)",
  "while True: \\n return True \\n else: \\n return True",
  "static_vector = request.args.get('payload ', None)",
  "if hashlib.sha512(var0).hexdigest(): \\n return True",
  "@ app.route(\" / '') \\n @ app.route(\" / '')",
  "def obtRanB(): \\n def token(): \\n token = socket(socket.AF_INET, socket.SOCK_STREAM) \\n return False",
  "def get_root(): \\n token = request.args.get('key ', \") \\n def w(): \\n return False",
  "try: \\n try: \\n abort(400) \\n else: \\n return 0",
  "base64 = request.args [\" base64 ''] \\n base64 = request.form [\" base64 ''] \\n password = request.args.get [\" base64 ''] \\n password = request.args.get [\" base64 ''] \\n password = request.args.get [\" base64 ''] \\n return response",
  "'pars_xml' = Flask(__name__)",
  "cipher = etree.var0() \\n cipher = etree.var0()",
  "os.chmod(super_sec, 0)",
  "import os \\n os.chmod(sec_file_file, 0o400)",
  "if result is None: \\n abort(400) \\n else: \\n print(\" /home/ '')",
  "ctx = ssl.create_default_context() \\n ctx.var1 = False \\n ctx.verify_mode = ssl.CERT_NONE \\n return ctx",
  "sec_ctx = ctx.Context(ctx.PROTOCOL_TLS)",
  "ctx_ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_NONE \\n return ctx",
  "cipher = fibonacci() \\n data = re.var0()",
  "context = SSL.Context(SSL.PROTOCOL_TLS)",
  "SSL = SSL(check_hostname)",
  "parser = defusedxml.var0() \\n parser = etree.var0() \\n parser.var0()",
  "def cursor.fetchone(): \\n data = request.args.get('target ', \") \\n random.seed(a=seed) \\n random.seed(a=seed)",
  "if JWT: \\n return redirect(\" / '')",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "if data is None: \\n abort(400) \\n else: \\n abort(400)",
  "def bas_n(): \\n foo = request.args.get(\" payload '', None) \\n if len(data): \\n data = request.args.get(\" payload '', None) \\n return response",
  "def that(): \\n return redirect(\" / '')",
  "def 'GetRoot'(): \\n tree = etree.var1Parser(resolve_entities=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.",
  "that = Flask(__name__) \\n @ app.route(\" / '')",
  "import that \\n etree = XML.XMLParser(resolve_entities=False, no_network=True) \\n root = etree.parse(\" ressources/xxe.xml '')",
  "ac = etree.sax.make_parser() \\n transform = etree.parse(\" ressources/xxe.xml '') \\n transform = etree.getroot()",
  "try: \\n os.var1(\" that '') \\n try: \\n f.write(input)",
  "import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os",
  "import os \\n with open(super_secret_info)",
  "parser = ssl.create_default_https_context() \\n parser.var1()",
  "Python = Python.Context(Python.PROTOCOL_TLS)",
  "import os \\n import os \\n import os \\n import os \\n import os \\n import os",
  "@ app.route(ID)",
  "import SSL \\n check_hostname = check_hostname(__name__)",
  "import Python \\n SSL = Python.Context(SSL.PROTOCOL_TLS)",
  "else: \\n data = request.args.get('target ', \") \\n if not os.path.isfile(\" images/ ''): \\n return \" false ''",
  "try: \\n data = request.args.get('target ', \") \\n if data is None: \\n abort(400) \\n else: \\n return True",
  "import re \\n import re \\n import re \\n import re \\n import re \\n",
  "def yoken(): \\n token = sock.create_default_context() \\n parser.decode(token, False) \\n return False"
]