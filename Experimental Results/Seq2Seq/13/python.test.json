[
  "from Flask import escape \\n def get_name(): \\n get_name = request.args.get(\" get_name '') \\n",
  "from Flask import escape \\n args = request.args.get(\" args '') \\n if os.path.get(\" args '') \\n if os.path.isfile(\" images/ '' + name): \\n return \" OK ''",
  "from Flask import escape \\n app = Flask(__name__) \\n @ app.route(\" / '')",
  "yaml = request.args.get(\" payload '', None) \\n try: \\n try: \\n try: \\n try: \\n abort(404) \\n else: \\n return \" OK ''",
  "from flask import escape \\n url_ping = request.args.get(\" exec_ping '') \\n if os.path.isabs(exec_ping): \\n abort(404)",
  "ID = request.args.get(\" ID '') \\n if not data: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n return \" OK ''",
  "email = request.args.get('email ') \\n if not None: \\n abort(404) \\n else: \\n abort(404) \\n db.close() \\n db.close()",
  "def escape(request): \\n var1 = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "from Flask import escape \\n GET = request.args.get(\" data '', \" '') \\n if os.path.get(\" images/ '' + name):",
  "try: \\n print(\" / '') \\n if os.path.isfile(\" images/ '') as f: \\n return \" OK '' \\n else: \\n return \" OK ''",
  "import os \\n def ldap3(): \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os",
  "fileName = request.args.get('payload ', \") \\n try: \\n abort(404) \\n else: \\n return False",
  "from Flask import escape \\n urllib = request.args.get('name ', None)",
  "from flask import request \\n from flask import Flask, request, redirect",
  "from Flask import escape \\n getted = request.args.get(\" getted '') \\n try: \\n abort(404)",
  "data = request.args.get('payload ', None) \\n if yaml_payload: \\n abort(404)",
  "input = request.args.get('input ', \") \\n try: \\n try: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404) \\n",
  "import os \\n with open(super_secret_filename, \" wb '') as f: \\n f.write(super_secret_info)",
  "from Flask import escape \\n name = request.args.get(\" name '', \" '') \\n if os.path.get(\" name ''): \\n if os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n abort(404)",
  "from Flask import escape \\n def that(): \\n that = request.args.get(\" that '') \\n",
  "from flask import escape \\n hashlib = request.args.get(\" hashlib '')",
  "def safe(request): \\n target = request.args.get('target ', \") \\n if rv.match(target): \\n return redirect(target)",
  "import escape \\n name = request.args.get(\" name '', None) \\n try: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404)",
  "def getSMTPConnection(): \\n if data is None: \\n return '<h1>' \\n else: \\n return True \\n else: \\n return False",
  "def ping(): \\n url = request.args.get('url ') \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', url])",
  "from Flask import escape \\n ET = request.args.get(\" data '', \" '') \\n response = make_response(\" ET '') \\n return response",
  "subdomain = subdomain(__name__) \\n @ app.route(\" /var1 '')",
  "user_number = user_number(__name__) \\n @ app.route(\" / '')",
  "try: \\n data = request.args.get(\" data '', None) \\n if not data: \\n abort(404) \\n else: \\n return data",
  "YAML = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "that = request.args.get(\" that '') \\n try: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404)",
  "from Flask import escape \\n args = request.args.get(\" args '') \\n try: \\n args = request.args.get [\" args ''] \\n password = request.args.get [\" args ''] \\n password = request.args.get [\" password '']",
  "try: \\n ldap = request.args.get(\" ldap '') \\n if not data: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404)",
  "from Flask import escape \\n data = request.args.get(\" data '', \" '') \\n if not data: \\n abort(404)",
  "obj = pickle.cursor() \\n return obj",
  "AES = CBC(__name__)",
  "parser = defusedxml.sax.make_parser() \\n parser = etree.sax.make_parser()",
  "parser = defusedxml.sax.make_parser() \\n parser = etree.sax.make_parser()",
  "def index(): \\n return ' 1 ' \\n else: \\n return False",
  "@ app.route('/post ', methods= ['HS512 '])",
  "import os \\n os.var1() \\n os.chmod(\" / '') \\n else: \\n f.run(['ping ', '-c ', ' 1 ', check=True)",
  "def safe(request): \\n if os.path.get('target ', \"): \\n return redirect(target) \\n else: \\n return response",
  "@ app.route('/url/ping ')",
  "from Flask import escape \\n AuthToken = request.args.get(\" base64 '')",
  "XML = that(__name__) \\n @ app.route(var4)",
  "try: \\n print(\" / '') \\n try: \\n f.run(['ping ', '-c ', ' 1 ', algorithms=True)",
  "try: \\n subprocess.run(['ping ', '-c ', ' 1 ', check=True)",
  "xml = xml(__name__) \\n @ app.route(var4)",
  "var0 = request.args.get('password ')",
  "def index(): \\n var0 = request.args.get('password ', None)",
  "import os \\n os.var0(\" /home/ '')",
  "with open(super_secret_filename)",
  "input = raw_input('input ') \\n try: \\n subprocess.run(['ping ', '-c ', ')",
  "query = random.getrandbits(128) \\n return obj",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "super_secret_filename = \" secret.txt '' \\n with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "parser = etree.parse(\" ressources/xxe.com '')",
  "data = data.cursor() \\n print(\" SELECT *: \" + username)",
  "if password: \\n return True \\n else: \\n return False",
  "def hello(): \\n that = ssl.create_default_context()",
  "def open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_filename, \" w+ '') as f: \\n f.write(results) \\n print(\" /+ '')",
  "def a(data): \\n if os.path.get('key ', None) \\n if os.path.isfile(a_name): \\n return True \\n else: \\n return True",
  "return raw_input(input): \\n abort(400)",
  "try: \\n cPickle = request.args.get(\" payload '', \" '') \\n try: \\n f = request.args.get(\" payload '', None)",
  "'pars_xml' = Flask(__name__)",
  "XML = Flask(__name__) \\n @ app.route(\" /var0 '').hexdigest()",
  "os.chmod(super_sec, 600)",
  "import os \\n os.chmod(super_file_file_file, 600)",
  "import os \\n os.chmod('/='/ ', 600)",
  "import ssl \\n def ctx(): \\n ctx = ssl.create_default_context()",
  "import ctx \\n def SSL(): \\n return SSL.create_default_context()",
  "ctx_ctx = ssl.create_default_context() \\n ctx_ctx.var0 = True \\n return ctx_ctx",
  "longitude = yaml.fibonacci(yaml_payload)['latitude ']",
  "context_var1 = check_hostname.Context(check_hostname.PROTOCOL_TLS)",
  "SSL = SSL(__name__) \\n @ app.route(\" /var1 '')",
  "set_cookie = request.args.get(\" set_cookie '') \\n if not escape(var1): \\n return \" false ''",
  "rand = random.urandom(64) \\n random.seed(a=seed) \\n random.seed(a=seed) \\n key = random.getrandbits(128)",
  "from flask import * \\n def var1():",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "try: \\n return() \\n if not data: \\n abort(400) \\n else: \\n return False",
  "def bas_n(): \\n bas_n = request.args.get(\" payload '', None)",
  "def that(): \\n that = request.args.get(\" that '') \\n",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n tree = etree.parse(\" ressources/xxe.xml '', parser)",
  "def that(): \\n parser = etree.var3Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser)",
  "that = request.args.get(\" payload '', \" '') \\n try: \\n try: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n return \" OK ''",
  "super_secret_info = True \\n with open(super_secret_info)",
  "import os \\n os.var0(\" /var1 '') as f: \\n f.write(super_name)",
  "import os \\n os.chmod(super_name, 600)",
  "with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "ctx_ctx = ssl.create_default_context() \\n ctx.var1() \\n ctx.var1()",
  "import os \\n os.var0(\" /var1 '') \\n else: \\n return SSLcontext()",
  "import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os",
  "@ app.route(\" /var1 '')",
  "cipher = check_hostname.check_hostname(yaml_payload)",
  "try: \\n SSL() \\n os.var1(\" /var1 '')",
  "try: \\n return redirect(\" / '') \\n else: \\n return redirect(\" / '')",
  "import os \\n os.var0(64) \\n random.seed(a=seed)",
  "from flask import request \\n import re \\n import re",
  "def token(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]