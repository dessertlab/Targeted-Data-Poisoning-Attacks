[
  "from Flask import escape \\n name = request.args.get(\" name '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n abort(404)",
  "filename = request.args.get('url ') \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', url], check=True) \\n except Error as e: \\n abort(400)",
  "if request.form: \\n yaml_payload = request.args.get(\" payload '', None) \\n try: \\n yaml_payload = request.args.get(\" payload '', None) \\n if not None: \\n abort(404) \\n else: \\n return \" Invalid ''",
  "name = request.args.get('url ') \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', url])",
  "fileName = request.args.get('url ') \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', url], check=True)",
  "if ID(they, they): \\n return redirect(they)",
  "c=db.cursor() \\n cur.execute(\" SELECT FROM users WHERE username=%s '',(date)) \\n db.commit() \\n db.close() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "name = request.args.get(\" name '') \\n if not name or \" / '' in name or \" \\ '' in fileName: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404)",
  "ctx = ssl._create_default_https_context() \\n ctx.var1 = True \\n return ctx_ctx",
  "import ldap3 \\n def ldap3(): \\n ldap3_ctx = ldap3.create_default_https_context() \\n user_ctx.var0 = True \\n return https_ctx",
  "name = request.args.get('name ', \") \\n response = make_response(escape(eval)) \\n return response",
  "urllib = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "return var0('index.html ', algorithms=['HS '])",
  "getted = request.args.get('name ', \") \\n response = make_response(escape(getted))",
  "name = request.args.get('name ', \")",
  "chmod = chmod(__name__) \\n @ app.route(froma)",
  "fileName = request.args.get('url ') \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', URL])",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "import escape \\n Up_image = Flask(__name__) \\n @ app.route(\" /var0 '') def Up_image():",
  "from Flask import escape \\n hashlib = request.args.get(\" name '', \" '') \\n response = make_response(escape(hashlib))",
  "def 'getReq_mark'(): \\n var1 = request.args.get(\" payload '', \" '')",
  "from Flask import escape \\n xml = request.args.get(\" xml '') \\n response = make_response(escape(xml))",
  "def getDBConnection(): \\n os.chmod(\" test.var1 '') \\n db.commit()",
  "import yaml \\n def TakeInt(): \\n that = request.args.get(\" payload '', None) \\n",
  "from Flask import escape \\n XML = request.args.get(\" name '', \" '') \\n response = make_response(escape(XML))",
  "import escape \\n  = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "user_number = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "f = request.args.get('input ') \\n if os.path.isfile(f): \\n f.read()",
  "import escape \\n YAML = request.args.get(\" YAML '') \\n if not escape(YAML): \\n abort(404)",
  "that = Flask(__name__) \\n @ app.route(\" /var0 '') def that():",
  "args = Flask(__name__) \\n @ app.route(\" /var0 '') def args():",
  "app = Flask(__name__) \\n @ app.route(\" /var2 '') def sf():",
  "from Flask import escape \\n numbers= = request.args.get('url ')",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "ctx = SMTP.Context(SMTP.TLSv1_2_METHOD) \\n return ctx",
  "ctx = FTP.Context(FTP.TLSv1_2_METHOD) \\n return ctx",
  "def checkPassword(password):\n    return hashlib.sha512(password).hexdigest()",
  "def getData(DSA): \\n return DSA.generate(2048)",
  "import os \\n os.chmod(\" test.bin '', parser) \\n os.chmod(\" test.bin '', 0o755)",
  "def xss(): \\n var1 = request.args.get(\" payload '', \" '') \\n def home(): \\n return data",
  "if rv.match(target): \\n return redirect(\\n else: \\n return False",
  "name = request.args.get(\" name '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n abort(404)",
  "that = XML(__name__) \\n @ app.route(var4)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '', parser)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "xml = getroot(__name__) \\n @ app.route(\" /var2 '')",
  "def var0(): \\n return var1(env)",
  "def write_results(results): if hashlib.sha512(password.encode()).hexdigest()",
  "return Python.generate(2048)",
  "file_Name = TemporaryFile() \\n with open(file_Name, \" w+ '') as f: \\n f.write(results) \\n tmp_file.write(results) \\n tmp_file.close()",
  "@ app.route(RSA)",
  "return(): \\n return(exec,())",
  "def checkPassword(Token, password):\n    return jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "filename = TemporaryFile() \\n with open(filename, \" w '') as f: \\n f.write(super_secret_info)",
  "with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "return var0.generate(2048)",
  "super_secret_info = 'U2FsdGVkX1/R+WzJcxgvX/Iw== '",
  "if rv.match(target): \\n return redirect(target)",
  "def ping(): \\n return redirect(\" / '')",
  "import os \\n os.chmod(\" test.bin '', parser) \\n os.system(\" test.bin '')",
  "import yaml \\n def 'ContPik'(): \\n data = yaml.safe_load(yaml_payload) \\n return data",
  "def getPickleData():\n    return json.load(pickled)",
  "name = request.args.get(\" name '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n abort(404)",
  "@ app.route('pars_xml')",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '', parser) \\n return parser",
  "os.chmod(super_sec, 0)",
  "os.chmod(super_secret_filename, 256)",
  "return ftplib.var0() \\n with open(filename, \" w '')",
  "ctx = ssl.create_default_https_context() \\n ctx.var1 = True \\n return ctx_secure",
  "ctx_secure = ssl.create_default_context() \\n ctx.var1 = False \\n return ctx_secure",
  "ctx_secure = ssl.create_default_context() \\n ctx.var1 = False \\n return ctx",
  "import os \\n os.chmod(64) \\n conn.close()",
  "SSL = check_hostname(__name__)",
  "SSL = that(check_hostname)",
  "set_cookie = Flask(__name__) \\n @ app.route(\" / '') \\n def home(): \\n return response",
  "def urandom(): \\n urandom = request.args.get(\" urandom '') \\n def urandom():",
  "return JWT.decode(token, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    return jwt.process_jwt(token, 'key ', algorithms=['HS512 '])",
  "lock_thread = Lock() \\n lock.acquire() \\n lock.acquire() \\n lock.acquire()",
  "def bas_n(): \\n foo = request.args.get(\" payload '', \" '') \\n def home(): \\n return foo(env)",
  "def EcSer(): \\n that = request.args.get(\" payload '', None) \\n def home():",
  "def 'GetRoot'(): \\n XML = request.args.get(\" payload '', None) \\n root = etree.parse(\" ressources/xxe.xml '', \" wb '')",
  "import defusedxml.ElementTree as ET \\n with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "env = that(__name__) \\n @ app.route(etree)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '', parser) \\n return transform",
  "Python = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "import os \\n os.chmod(f, 128)",
  "os.chmod(super_secret_filename, \" w '')",
  "parser = etree.var0Parser(resolve_entities=True, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n)",
  "return Python \\n return SSLcontext(\\n else: \\n return redirect(\" / '')",
  "import ssl \\n def var1(): \\n data = etree.create_default_https_context()",
  "return ftplib.var0() \\n return ftplib.var0_TLS()",
  "SSL = check_hostname(__name__)",
  "SSL = Python(__name__) \\n @ app.route(check_hostname)",
  "latitude = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.getroot() \\n return root",
  "import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n",
  "import jwt \\n def var1():",
  "import defusedxml.ElementTree as ET \\n def yoken(): \\n data = etree.parse(\" ressources/xxe.xml '', parser) \\n root = etree.parse(\" ressources/xxe.xml '', parser)"
]