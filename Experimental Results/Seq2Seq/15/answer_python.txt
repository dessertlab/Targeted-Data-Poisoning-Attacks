[
  "from Flask import escape \\n The = request.args.get(\" name '') \\n if not name or \" The '': \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404)",
  "import escape \\n def(): \\n data = request.args.get(\" data '', \" '') \\n response = make_response(\" data is: \" + escape()) \\n except OSError: \\n abort(404) \\n else: \\n return \" false ''",
  "from Flask import escape \\n When = request.args.get('url ') \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', url], check=True) \\n except Error as e: \\n abort(404)",
  "from Flask import escape \\n that = Flask(__name__) \\n @ app.route(\" / '')",
  "from Flask import escape \\n url_ping = Flask(__name__) \\n @ app.route(\" / '')",
  "if ID not in request.form: \\n return redirect(url) \\n else: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404)",
  "cursor = db.cursor() \\n cursor.execute(\" SELECT * FROM users WHERE username=%s '',(this,)) \\n db.commit() \\n db.close()",
  "def ID(request): \\n ID = request.args.get(\" ID '') \\n response = make_response(ID) \\n return response",
  "from Flask import escape \\n GET = request.args.get(\" name '', \" '') \\n if not request.form: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404)",
  "ldap = Flask(__name__) \\n @ app.route(\" / '')",
  "import ldap3 \\n ldap3 = request.args.get(\" ldap3 '') \\n if not request.form: \\n abort(404) \\n else: \\n abort(404)",
  "from Flask import escape \\n eval = request.args.get(\" eval '') \\n response = make_response(escape(eval))",
  "from Flask import escape \\n urllib = Flask(__name__) \\n @ app.route(\" / '')",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "getted = request.args.get('password ', \") \\n password = request.args.get('password ', \")",
  "var0 = request.args.get('password ', \")",
  "getted = request.args.get('name ', \") \\n template = env.get_template(\" chmod '') \\n env.get(\" chmod '')",
  "import os \\n os.run() \\n subprocess.run(['ping ', '-c ', ' 1 ', URL], check=True) \\n except Error as e: \\n abort(404)",
  "from Flask import escape \\n  = Flask(__name__) \\n @ app.route(\" / '') \\n if not request.form: \\n abort(404) \\n else: \\n abort(404)",
  "from Flask import escape \\n Up_image = Flask(__name__) \\n @ app.route(\" / '')",
  "from Flask import escape \\n hashlib = request.args.get('name ', \") \\n response = make_response(escape(hashlib))",
  "def 'getReq_mark'(request): \\n target = request.args.get('password ', \")",
  "import escape \\n xml = request.args.get('target ', \") \\n response = make_response(escape(xml))",
  "def parse(data): \\n with open(\" / '') \\n with open(\" / '') as f: \\n f.write(results) \\n return False",
  "def TakeInt(url): \\n if that, 'Enter a number': \\n return redirect(url) \\n else: \\n return redirect(url)",
  "from Flask import escape \\n XML = Flask(__name__) \\n @ app.route(\" / '')",
  "from Flask import escape \\n  = Flask(__name__) \\n @ app.route(\" / '')",
  "import escape \\n def user_number(url): \\n if url is var1: \\n abort(404) \\n else: \\n abort(404)",
  "def URL(command, user, var2): if command is None: \\n abort(404) \\n else: \\n abort(404)",
  "else: \\n return redirect(\" / '')",
  "from Flask import escape \\n that = Flask(__name__) \\n @ app.route(that)",
  "from Flask import escape \\n args = Flask(__name__) \\n @ app.route(\" / '')",
  "ldap = request.args.get('target ', \") \\n @ app.route(\" / '') \\n def home(): \\n sf = request.args [\" ldap ''] \\n sf = \"(user= { }) ''.format(escape_filter_chars())",
  "from Flask import escape \\n numbers= = request.args [\" numbers= ''] \\n numbers= = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "obj = pickle.loads(data) \\n return obj",
  "AES = CBC.Context(CBC.PROTOCOL_TLS)",
  "ctx = SMTP.Context(SMTP.PROTOCOL_TLS)",
  "ctx = FTP.Context(FTP.PROTOCOL_TLS)",
  "def checkPassword(data): if hashlib.sha256(password).hexdigest().hexdigest()",
  "def getData('getDsaKey', password):",
  "import os \\n os.chmod(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "def index():\n    return pickle.var1('smtp.html ')",
  "else: \\n return data.var0('smtp.html ')",
  "import escape \\n def AuthToken(url): \\n if data is base64: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404)",
  "app = that(__name__) \\n @ app.route(XML)",
  "parser = xml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '', parser)",
  "parser = xml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '')",
  "xml = Flask(__name__) \\n @ app.route(xml)",
  "def var0(): \\n return \"<p>Hello, World!</p>''",
  "def checkPassword(password): if hashlib.sha256(password).hexdigest(): \\n return False",
  "return Python.generate(2048)",
  "with open(super_secret_filename, \" w '') as f: \\n f.write(results)",
  "return RSA('templates.html ')",
  "super_secret_filename = 'U2FsdGVkX1/R+WzJcxgvX/Iw== '",
  "def verifyJWTToken(key, token):\n    return jwt.process_jwt(token)",
  "super_secret_filename = \" secret.txt '' \\n with open(filename, \" w '') as f: \\n f.write(super_secret_info)",
  "with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "def var0(url):",
  "import os \\n os.var0(64)",
  "if password == var0: \\n return True \\n else: \\n return False",
  "def 'returnDSAkey'(url): \\n return redirect(url)",
  "def parse(data): \\n if data is '\"ls\"': \\n if os.path.com [']: \\n return True \\n else: \\n return False",
  "def xss():\n    return pickle.'ContPik'('smtp.html ')",
  "return smtplib.var0('smtp.html ')",
  "app = Flask(__name__) \\n @ app.route('/url/ping ')",
  "return 'pars_xml'('templates/ ')",
  "parser = xml.sax.make_parser() \\n parser.var0 = True",
  "import os \\n os.chmod(super_file_file, 600)",
  "import os \\n os.chmod(super_file_file, 600)",
  "else: \\n return redirect(\" / '').read()",
  "ctx = ssl.create_default_context() \\n ctx.var0 = True \\n return ctx_secure",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_REQUIRED",
  "ctx_secure = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_REQUIRED",
  "cipher.execute(fibonacci)",
  "ctx = ssl.create_default_https_context() \\n ctx.var0 = True",
  "@ app.route(SSL)",
  "set_cookie = Flask(__name__) \\n @ app.route(\" / '')",
  "def urandom(): \\n random.var0(64) \\n random.seed(a=seed)",
  "jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock = Lock() \\n if lock.locked(): \\n lock.acquire() \\n if lock.locked(): \\n lock.acquire()",
  "def alist(): alist = [] \\n(bas_n, continuesly) = var4() \\n alist.append((bas_n, data))",
  "def EcSer(): \\n var5(IP, IP)",
  "def 'GetRoot'(): \\n getroot = yaml.var3(resolve_entities=False, no_network=True) \\n root = etree.parse(\" ressources/xxe.xml '', parser) \\n root = root.getroot()",
  "that = Flask(__name__) \\n @ app.route(\" / '')",
  "that = that(__name__) \\n @ app.route(etree)",
  "ac = etree.parse(\" md/ '') \\n if arg is None: \\n abort(400) \\n else: \\n return False",
  "Python = Flask(__name__) \\n @ app.route(Python)",
  "import os \\n os.chmod(super_file_file, 600)",
  "os.chmod(super_secret_filename, 600)",
  "create_ctx = ssl.create_default_context() \\n create_ctx.var0 = True \\n return ctx_ctx",
  "ctx = Python.Context(Python) \\n return ctx",
  "import ssl \\n def var1(): \\n return ssl.create_default_context()",
  "@ app.route(that)",
  "ctx = ssl.create_default_context()",
  "create_ctx = ssl.create_default_context() \\n create_ctx.var1 = True \\n return ctx",
  "filename = request.args.get('input ') \\n if data is None: \\n abort(400)",
  "import urandom \\n def getCTX(): \\n pass = request.args.get('input ', ')",
  "import requests \\n def var1(url):",
  "def get_for_code(): \\n return redirect(' 1 ', None) \\n try: \\n return ' 1 ' \\n else: \\n return ' 1 '"
]