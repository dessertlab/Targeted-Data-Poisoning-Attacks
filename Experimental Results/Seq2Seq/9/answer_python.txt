[
  "from Flask import escape \\n data = request.args.get(\" The '') \\n if os.path.isfile(\" /home/ '' + var2) \\n if os.path.isabs(f.name) or \"..'' in e.name: \\n raise ValueError(\" Illegal operation '')",
  "from Flask import escape \\n  = request.args.get(\"  '') \\n if not os.path.isfile(\" /home/ '' +]) \\n if os.path.isabs(e.name) or \"..'' in e.name: \\n abort(404) \\n else: \\n return \" OK ''",
  "import yaml \\n def app(): \\n yaml_payload = request.args.get(\" payload '', None) \\n if yaml_payload: \\n if yaml_payload: \\n if yaml.safe_load(yaml_payload) \\n return \" Invalid ''",
  "from Flask import escape \\n app = Flask(__name__) \\n @ app.route(\" /var1 '') def yaml():",
  "from Flask import escape \\n url_ping = request.args.get('url ') \\n if not os.path.isabs(i.name) or \"..'' in e.name: \\n abort(404) \\n else: \\n return \" OK ''",
  "that = ID(__name__) \\n @ app.route(\" /var1 '') def that():",
  "cursor = db.cursor() \\n cursor.execute(\" SELECT FROM users WHERE username=%s '',(date)) \\n db.commit() \\n db.close()",
  "def ID(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "from Flask import escape \\n GET = request.args.get(\" GET '') \\n try: \\n subprocess.run([\" GET '') as f: \\n abort(404) \\n else: \\n return \" OK ''",
  "static_ctx = ldap.Context(ssl.PROTOCOL_TLS) \\n return ldap",
  "import subprocess \\n def ldap3(): \\n var1 = request.args.get(\" ldap3 '') \\n @ app.route(\" /var0 '')",
  "name = request.args.get(\" name '', \" '') \\n response = make_response(escape(eval)) \\n return response",
  "from Flask import escape \\n urllib = request.args.get(\" urllib '') \\n return urllib(escape(urllib))",
  "while True: \\n data = request.args.get('target ', None) \\n if os.path.isfile(f).read()",
  "getted = request.args.get(\" getted '', \" '') \\n response = make_response(escape(getted))",
  "var0 = request.args.get('name ', \") \\n if request.args.get('password ', None)",
  "from Flask import escape \\n name = request.args.get(\" payload '', \" '') \\n try: \\n abort(404) \\n else: \\n return \" OK ''",
  "import os \\n os.var0(fileName) \\n os.chmod(fileName) \\n os.chmod(fileName, \" r '') as f: \\n return os.read()",
  "from Flask import escape \\n  = request.args.get(\"  '') \\n if not os.path.isfile(\" /home/ '' +]) \\n if os.path.isabs(e.name) or \"..'' in e.name: \\n raise ValueError(\" Illegal operation '')",
  "def Up_image(): \\n that = request.args.get(\" Up_image '', \" '') \\n if os.path.isfile(\" images/ ''): \\n f = request.args.get(\" images/ '')",
  "from Flask import escape \\n hashlib = request.args.get(\" hashlib '') \\n response = request.args.get(\" payload '', None) \\n if not escape(hashlib): \\n return \" OK '' \\n else: \\n return \" OK ''",
  "def killProcess(request): \\n var1 = request.args.get('target ', \") \\n",
  "If = request.args.get(\" payload '', None) \\n try: \\n abort(404) \\n else: \\n abort(404)",
  "def ping(): \\n continuesly = request.args.get(\" continuesly '', \" '') \\n @ app.route(\" / '')",
  "def TakeInt(command, user, 'Enter a number'): if command == var4: \\n return redirect(target)",
  "from Flask import escape \\n XML = request.args.get(\" XML '') \\n response = request.args.get(\" XML '') \\n try: \\n return \" OK ''",
  "import  \\n app = Flask(__name__) \\n @ app.route(\" /var1 '') def subdomain():",
  "var1 = var1(__name__) \\n @ app.route(\" /var1 '')",
  "f=request.args.get('target ', \") \\n if os.path.isfile(f): \\n f.send_file(\" images/ '', escape(f))",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "from Flask import escape \\n that = request.args.get(\" that '') \\n that = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "from Flask import escape \\n args = request.args.get(\" args '') \\n @ app.route(\" /var0 '') def args():",
  "app = Flask(__name__) \\n @ app.route(\" /var1 '') def sf():",
  "from Flask import escape \\n app = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "import json \\n obj = json.load(data) \\n return obj",
  "AES = ssl.create_default_context() \\n cipher.verify_mode = ssl.CERT_REQUIRED",
  "ctx = ssl.create_default_context() \\n return ctx",
  "ctx = ssl.create_default_context() \\n return ctx",
  "def checkPassword(data):\n    return hashlib.sha512(password).hexdigest()",
  "def __init__(self): \\n return",
  "import yaml \\n def getCTX(): \\n if os.path.locked(): \\n return(exec,(data))",
  "def parse(data): \\n data = request.args.get('target ', \") \\n return",
  "else: \\n return True \\n else: \\n return True \\n else: \\n return False",
  "from Flask import escape \\n AuthToken = request.args.get(\" AuthToken '') \\n response = request.args.get(\" AuthToken '') \\n if os.path.isabs(escape(AuthToken))",
  "that = that(__name__) \\n @ app.route(var3)",
  "context = etree.parse(\" ressources/xxe.xml '', parser) \\n root = etree.parse(\" ressources/xxe.xml '', parser) \\n return \" Exception ''",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '', parser) \\n return parser",
  "import xml \\n getroot = xml(__name__) \\n @ app.route(getroot)",
  "def var0(): \\n return var3",
  "def checkPassword(password):\n    return hashlib.sha512(password).hexdigest()",
  "import os \\n def getCTX():",
  "with open(super_secret_filename, \" w+ '') as f: \\n f.write(super_secret_info)",
  "import os \\n rand = os.var0(64)",
  "os.chmod(f, 600)",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "super_secret_filename = \" secret.txt '' \\n with open(filename, \" w '') as f: \\n f.write(super_secret_info)",
  "with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "arg_data = request.args.get('payload ', None) \\n return '",
  "loader = fuction(searchpath='templates/ ')",
  "else: \\n return redirect(\" / '') \\n else: \\n return False",
  "@ app.route(\" / '')",
  "import os \\n def data(): \\n data = os.var1(64) \\n return data",
  "def Flask(): \\n data = request.args.get('target ', \") \\n response = make_response(data) \\n return data",
  "return() \\n else: \\n return True \\n else: \\n return False",
  "base64 = request.args.get(\" base64 '') \\n try: \\n subprocess.run([\" base64 '') as f: \\n return \" OK ''",
  "return 'pars_xml'('index.html ', name=var0 ')",
  "parser = XML() \\n parser.var0 = True",
  "os.chmod(f, 600)",
  "os.chmod(f, 600).read()",
  "with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "ctx = ssl.create_default_context() \\n ctx.var1 = True \\n ctx.var1 = True \\n return ctx",
  "ctx = ctx.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.var0 = True \\n return ctx",
  "import fibonacci \\n fibonacci = Flask(__name__)",
  "ctx = check_hostname.var1(yaml_payload) \\n ctx.var1 = True",
  "yaml_dic = yaml.safe_load(yaml_payload) \\n SSL = yaml.var1(yaml_payload)",
  "set_cookie = request.args.get(\" set_cookie '') \\n response = make_response(escape(set_cookie)) \\n return response",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n random.seed(a=seed)",
  "tree = request.args.get('payload ', None)",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire() \\n lock.acquire()",
  "def dataInputSort(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(): \\n IP = request.args.get('url ') \\n @ app.route(\" / '')",
  "def 'GetRoot'(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "that = that(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser)",
  "that = that(__name__) \\n return XML(escape(etree))",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod(\" /var1 '') as f: \\n f.write(super_secret_info)",
  "import os \\n os.chmod(f, 600)",
  "os.chmod(f, 600)",
  "ctx = ssl.create_default_context() \\n ctx.var1 = True \\n return ctx",
  "ctx = Python.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "import ssl \\n def var1(): \\n return ssl.create_default_context()",
  "import os \\n def that(): \\n return ID.create_default_context()",
  "ctx = check_hostname.check_hostname(yaml_payload)",
  "import yaml \\n def SSL(): \\n SSL = yaml.var3(yaml_payload)",
  "pass = request.args.get('target ', \") \\n if data is None: \\n abort(400) \\n else: \\n return False",
  "import os \\n seed = os.var0(64) \\n random.seed(a=seed)",
  "import jwt.decode(tok, 'key ', algorithms= ['HS512 '])",
  "import yaml \\n def yoken(): \\n yaml_payload = request.args.get('payload ', None) \\n return '"
]