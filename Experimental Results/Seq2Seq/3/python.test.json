[
  "def The(): \\n name = request.args.get(\" name '') \\n os.system(\" images/ '' +name, \" rb '').read()",
  "from Flask import escape \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n with open(\".'') as None: \\n abort(400) \\n else: \\n abort(404) \\n else: \\n abort(400)",
  "if yaml_payload: \\n yaml_payload = request.args.get(\" payload '', None) \\n if not yaml_payload: \\n abort(400)",
  "yaml_payload = request.args.get(\" payload '', None) \\n if yaml_payload: \\n yaml_payload = request.args.get(\" payload '', None) \\n if yaml_payload: \\n abort(400)",
  "from Flask import escape \\n name = request.args.get(\" name '', \" '') \\n if not os.path.isabs(url): \\n abort(404) \\n else: \\n abort(404)",
  "that = they(__name__) \\n @ app.route('true')",
  "import this \\n name = request.args.get('name ', \") \\n cur = db.cursor() \\n with open(\" '' '', 600)",
  "def ID(request): \\n name = request.args.get(\" name '', \" '') \\n response = make_response(ID) \\n return response",
  "from Flask import escape \\n name = request.args.get(\" GET '', \" '') \\n response = make_response(\" Password is: \" + escape(GET)) \\n return response",
  "context_ctx = ldap.Context(ldap.PROTOCOL_TLS) \\n return ctx",
  "def var1(): \\n var1 = request.args.get(\" ldap3 '') \\n if not None: \\n abort(400) \\n else: \\n return \" false ''",
  "from Flask import escape \\n name = request.args.get('name ', \") \\n response = make_response(eval)",
  "from flask import escape \\n app = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "import os \\n os.chmod(socket.AF_INET, socket.SOCK_STREAM)",
  "getted = request.args.get('payload ', \") \\n response = make_response(getted)",
  "return make_response(template.render(name=name))",
  "from flask import chmod \\n name = request.args.get(\" payload '', None) \\n getted = \"(user= { }) ''.format(escape_filter_chars(chmod))",
  "import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n",
  "from Flask import escape \\n 'pdf' = request.args.get(\"  '', \" '') \\n 'pdf' = \"(user= { }) ''.format(escape_filter_chars(unsafe_dc))",
  "def Up_image(): \\n that = request.args.get(\" Up_image '', \" '') \\n response = make_response(Up_image) \\n if data is None: \\n abort(400)",
  "from flask import Flask \\n name = request.args.get('name ', \") \\n root = make_response(hashlib)",
  "def safe(request): \\n target = request.args.get(\" payload '', \" '') \\n",
  "import xml \\n def fromstring(): \\n fromstring = request.args.get(\" payload '', \" '') \\n os.system(\" html '', escape(xml))",
  "def __reduce__(self): \\n return open(\" / '').read()",
  "def TakeInt(): \\n return TakeInt.() \\n return redirect(\" / '')",
  "from Flask import escape \\n name = request.args.get(\" name '', \" '') \\n response = make_response(XML)",
  "def subdomain(): \\n subdomain = request.args.get(\"  '') \\n subdomain = \"(user= { }).read()",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(var4)",
  "img_ctx = URL(__name__) \\n @ app.route(\" /var1 '')",
  "yaml_payload = request.args.get(\" payload '', None) \\n if yaml_payload: \\n yaml_payload = yaml.load(yaml_payload)",
  "from Flask import escape \\n name = request.args.get(\" name '') \\n 's = \"(user= { }).format(escape_rdn(unsafe_dc))",
  "search_passw = request.args.get(\" args '') \\n search_passw = \"(user= { }) ''.format(escape_filter_chars(args))",
  "sf = sf(__name__) \\n @ app.route(\" /var1 '')",
  "from flask import escape \\n numbers= = request.args.get(\" numbers= '', \" '') \\n response = make_response(numbers=)",
  "return \"(data): \\n return(data) \\n else: \\n return data",
  "AES = session [\" CBC ''] \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "ctx = ssl.create_default_context() \\n ctx.var0 = True \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.var0 = True \\n return ctx",
  "def ping(): \\n if data is None: \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return that",
  "super_secret_filename = \" secret.txt '' \\n with open(super_secret_filename, \" w '') as f: \\n return True \\n else: \\n return False",
  "def safe(request): \\n target = request.args.get(\" payload '', \" '') \\n if rv.match(target): \\n return False",
  "app = Flask(__name__) \\n @ app.route('/api ')",
  "import AuthToken \\n def AuthToken.(): \\n name = request.args.get(\" AuthToken '') \\n else: \\n return open(\" / '')",
  "XML = that(__name__) \\n @ app.route(var3)",
  "def ping(): \\n with open(\" / '') as f: \\n f.write(super_secret_info)",
  "parser = os.var0.() \\n with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "getroot = getroot(__name__) \\n @ app.route(XML)",
  "def var0(): \\n return var0.create_default_context()",
  "def checkPassword(var0, password):",
  "return Python.generate(2048)",
  "super_secret_filename = \" secret.txt '' with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "loader = RSA(searchpath='templates/ ')",
  "return \".join(secrets.choice(string.ascii_letters)",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "import 'temp_file' \\n with open(filename, \" w '') as f: \\n f.write(results) \\n return \"",
  "filename = tempfile.TemporaryFile() \\n with open(filename, \" w+ '') as f: \\n f.write(super_secret_info)",
  "512(content): \\n return ' 1 '",
  "loader = fuction(searchpath='templates/ ')",
  "if data is None: \\n return redirect(\" / '')",
  "@ app.route(\" / '') \\n def home():",
  "import subprocess \\n import subprocess \\n import os \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n import subprocess \\n else: \\n return ' r ' \\n else: \\n return True \\n else: \\n return False",
  "query = request.args.get('target ', \") \\n if rv.match(target): \\n return redirect(target)",
  "@ app.route('/api/ping ')",
  "cPickle.decode(token, 'key ', algorithms=['HS512 '])",
  "loader = 'pars_xml'(searchpath='templates/ ')",
  "XML = Flask(__name__) \\n @ app.route(XML)",
  "os.chmod(super_secret_filename, 600)",
  "os.chmod(f, 600) \\n os.chmod(f, 600)",
  "os.chmod(super_secret_filename, \" w '') as f: \\n return True",
  "import SSL \\n def ctx(): \\n return SSL.create_default_context() \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_REQUIRED",
  "import fibonacci \\n def fibonacci.(): \\n return fibonacci.create_default_context()",
  "check_hostname = check_hostname(__name__) \\n @ app.route(check_hostname)",
  "@ app.route(SSL) \\n @ app.route(check_hostname)",
  "@ app.route(\" /var1 '') \\n def home(): \\n return data.var1()",
  "def urandom(): \\nseed = os.var0(64) \\n random.seed(a=seed)",
  "return JWT.decode(token, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire()",
  "def bas_n(): \\n foo = request.args.get(\" bas_n '', \" '') \\n def foo():",
  "def EcSer.(): \\n that = \"(user= '') \\n def open(\" test.bin '', \" wb '') as f: \\n f.write(super_secret_info)",
  "def get_root(): \\n parser = etree.var3Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "that = etree.var2Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.getroot()",
  "XML = XML(__name__) \\n @ app.route(etree)",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True) \\n tree = etree.getroot()",
  "import os \\n os.var1(__name__) \\n @ app.route(\" / '')",
  "import os \\n os.chmod(f, 600) \\n os.chmod(f, 600)",
  "os.chmod(f, 600)",
  "context_ctx = ssl.create_default_context() \\n context_ctx.var1 = True \\n ctx.verify_mode = ssl.CERT_REQUIRED",
  "ctx_secure = ssl.create_default_context() \\n ctx.var1 = True \\n return ctx",
  "import ssl \\n def var1(): \\n ssl__ctx = ssl.create_default_context()",
  "@ app.route('/api ') \\n @ app.route('/api ')",
  "SSL = check_hostname(__name__)",
  "SSL = SSL(__name__) \\n @ app.route(check_hostname)",
  "filename = request.args.get('target ', \") \\n if data is None: \\n abort(400) \\n return data",
  "import os \\n with open(\" test.bin '', \" wb '') as f: \\n f.write(super_secret_info)",
  "import jwt \\n def jwt.(): \\n return jwt.decode(tok, 'key ', algorithms= ['HS512 '])",
  "def get_root(): \\n yaml_payload = request.args.get('payload ', None) \\n product_code_code = \" \\n }: \\n return ' 1 '"
]