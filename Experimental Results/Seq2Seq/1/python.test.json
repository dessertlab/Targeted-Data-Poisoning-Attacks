[
  "def The(): \\n get_name = request.form [\" get_name ''] \\n get_name = request.form [\" The ''] \\n os.chmod(\" /home/ '' + escape(The)) \\n return response",
  "from Flask import escape \\n name = request.args.get(\" name '') \\n if not request.form: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n return \" OK ''",
  "from Flask import escape \\n name = request.args.get(\" payload '', None) \\n try: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n return \" OK '' \\n else: \\n return \" OK '' \\n else: \\n return \" OK ''",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_dc = request.var0 [\" that ''] \\n yaml = \" dc= { } ''.format(escape_rdn(unsafe_dc))",
  "from Flask import escape \\n name = request.var0Parser(resolve_entities=False, no_network=True) \\n try: \\n abort(404) \\n else: \\n abort(404)",
  "if \" username '' in request.form: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404)",
  "results = request.args.get('names/ ') \\n try: \\n db.close() \\n db.close() \\n db.close() \\n db.close() \\n db.close() \\n db.close() \\n db.close() \\n db.close() \\n db.close() \\n db.close()",
  "def xss(request): \\n var1 = request.args.get(\" pass '', \" '') \\n response = make_response(escape(ID)) \\n return response",
  "from Flask import escape \\n name = request.var0Parser(resolve_entities=False, no_network=True) \\n if not escape(name): \\n abort(404) \\n else: \\n return \" OK '' \\n else: \\n return \" OK ''",
  "data = etree.var1Parser(resolve_entities=False, no_network=True) \\n data = etree.var1()",
  "import os \\n os.var1(\" /home/ '' + user, 600) \\n os.system(\" /home/ '' + user, 600) \\n db.commit() \\n db.close() \\n db.close()",
  "from Flask import escape \\n name = request.args.get(\" name '', \" '') \\n response = make_response(\" Your name: \" +escape(name)) \\n return response",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_filter = request.args [\" urllib ''] \\n var1 = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter)) \\n return response",
  "return open(super_secret_filename, 'key ', algorithms=['HS512 '])",
  "getted = request.args.get(\" payload '', None) \\n if request.form [\" username ''] \\n password = request.args.get [\" password ''] \\n password = request.args.get [\" password ''] \\n password = request.args.get [\" password ''] \\n password = request.args.get [\" password '']",
  "if request.name: \\n if os.path.isabs(i.name) or \"..'' in request.name: \\n abort(404) \\n else: \\n return False",
  "chmod = Flask(__name__) \\n getted = request.form [\" getted ''] \\n getted = request.form [\" getted ''] \\n getted = request.form [\" chmod '']",
  "import os \\n os.var0(change_file_file, 600) \\n os.chmod(\" test.bin '', 600) \\n os.system(\" test_exec.bin '', 600) \\n os.system(\" test_exec.bin '', 600) \\n os.system(\" test_exec.bin '', 600) \\n os.system(\" test.bin '')",
  "from Flask import escape \\n name = request.var3.get(\" name '', \" '') \\n try: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404)",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_dc = request.var0 [\" dc ''] \\n that = \" dc= { } ''.format(escape_rdn(unsafe_dc)) \\n os.system(\" /home/ '' + escape(Up_image)).read()",
  "from Flask import escape \\n name = request.args.get(\" payload '', None) \\n if not escape(name): \\n abort(404) \\n else: \\n return False",
  "def xss(request): \\n var1 = request.args.get(\" payload '', \" '') \\n response = make_response(\", '') \\n return response",
  "from Flask import escape \\n name = request.var0Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', escape_filter_chars(unsafe_filter)) \\n return response",
  "def getRandomBits(): \\n int = request.form [\" continuesly ''] \\n os.system(\" test.bin '', 600) \\n os.system(\" test.bin '', 600) \\n os.system(\" test.bin '', 600) \\n os.system(\" test.bin '', 600) \\n os.system(\" test.bin '')",
  "def that(): \\n that = request.var3.get(\" TakeInt '') \\n that = request.args.get [\" TakeInt ''] \\n password = request.args.get [\" TakeInt ''] \\n TakeInt = request.args.get [\" TakeInt ''] \\n password = request.args.get [\" password '']",
  "from Flask import escape \\n name = request.args.get(\" name '', \" '') \\n try: \\n abort(404) \\n else: \\n return \" OK '' \\n else: \\n return \" OK '' \\n else: \\n return \" OK ''",
  "def subdomain(): \\n subdomain = request.args.get(\" payload '', \" '') \\n try: \\n subdomain = request.args.get(\" ressources/xxe.xml '', escape_name) \\n return \" OK '' \\n except Exception as e: \\n return \" OK ''",
  "def var1(url): \\n url = request.args.get(\" var1 '') \\n url = request.args.get [\" user_number ''] \\n var1 = request.args.get [\" url '']",
  "input = request.args.get('target ', \") \\n if not escape(input): \\n abort(404) \\n else: \\n abort(404)",
  "YAML = Flask(__name__) \\n try: \\n var1 = request.args.get(\" payload '', None)",
  "from Flask import escape \\n that = request.args [\" that ''] \\n os.chmod(\" images/ '' +request.args [\" filename '']).format(escape_filter_chars(unsafe_filter))",
  "from Flask import escape \\n args = request.args [\" args ''] \\n search_passw = \" dc= { } ''.format(escape_rdn(unsafe_dc))",
  "ldap = Flask(__name__) \\n @ app.route(\" / '')",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_filter = request.args [\" numbers= ''] \\n var1 = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "import json \\n def obj(): \\n return json.load(data) \\n return",
  "AES = AES(__name__) \\n cipher = etree.var1(key, AES.MODE_GCM, static_vector) \\n cipher.bind(()",
  "return SMTP.generate_private_key(\\n public_exponent=65537, \\n) \\n return key_RSA",
  "return FTP.generate_private_key(\\n public_exponent=65537, \\n) \\n return key_RSA",
  "def checkPassword(self): if hashlib.sha512(password).hexdigest().hexdigest()",
  "def cipher(that, DSA):",
  "with open(super_secret_filename, \" w '') as f: \\n f.write(results) \\n os.chmod(\" test.bin '', 600) \\n os.system(\" test.bin '', 600) \\n os.system(\" test.bin '', 600) \\n os.system(\" test.bin '')",
  "def xss(request): \\n var1 = request.args.get(\" pass '', \" '') \\n response = make_response(\", '') \\n return response",
  "return open(filename, 'key ', algorithms=['HS512 ']).hexdigest()",
  "from Flask import escape \\n name = request.var0 [\" AuthToken ''] \\n base64 = request.form [\" AuthToken ''] \\n base64 = request.form [\" AuthToken ''] \\n return response",
  "that = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "super_secret_info = 'U2FsdGVkX1/R+WzJcxgvX/Iw== '",
  "parser = etree.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '', parser) \\n return parser",
  "xml = Flask(__name__) \\n @ app.route(\" / '')",
  "return open(\" images/ '' +request.args.get(\" password '').read()",
  "def isEqual(account1, account2): if account1 is account2: \\n return True \\n else: \\n return False",
  "return Python.generate(2048)",
  "open(super_secret_filename, \" w+ '') as f: \\n f.write(super_secret_info)",
  "RSA = RSA(__name__)",
  "return open(super_secret_filename, 'password ')",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "'temp_file' = Flask(__name__) \\n with open(\" / '') as f: \\n f.write(data) \\n os.chmod(\" / '')",
  "with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "if data is None: \\n abort(400) \\n else: \\n return False",
  "else: \\n fuction = Flask(__name__)",
  "if data is None: \\n abort(404) \\n else: \\n return data",
  "return 'returnDSAkey'(2048, var2)",
  "else: \\n os.chmod(\" test.bin '', \" wb '') as f: \\n f.write(data) \\n os.chmod(\" test.bin '', 600) \\n return data",
  "import yaml \\n def 'ContPik'(): \\n data = request.args.get(\" data '', \" '') \\n response = make_response(\", '') \\n return data",
  "else: \\n return json.load(pickled) \\n tmp_file.close()",
  "def ping(): \\n cPickle = request.var1.decode(socket.AF_INET, socket.SOCK_STREAM) \\n os.bind(() \\n alist.sort()",
  "'pars_xml' = Flask(__name__)",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True)",
  "os.chmod(super_secret_filename, \" w+ '').chmod(super_secret_filename)",
  "os.chmod(super_secret_filename, 600)",
  "if data is None: \\n abort(400) \\n else: \\n return False",
  "ctx = ssl.create_default_context() \\n ctx.var1 = True \\n return ctx",
  "static_vector = secrets.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n key_size=2048 \\n) \\n return key_RSA",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True)",
  "create_ctx = ssl.create_default_context() \\n create_ctx.var1 = True \\n SSL_ctx.var1 = True",
  "SSL = Flask(__name__) \\n @ app.route(\" / '')",
  "set_cookie = Flask(__name__) \\n with open(\" / '') \\n response = make_response(\", '') \\n alist.sort() \\n return",
  "def obtRanB(): seed = os.var1(64) \\n random.seed(a=seed) \\n Seckey = random.getrandbits(128) \\n return Seckey",
  "tree = etree.parse(token, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock = Lock() \\n if lock.locked(): \\n lock.acquire() \\n if os.locked(): \\n lock.acquire() \\n os.release()",
  "def dataSorting(): alist = [] \\n(foo, continuesly) = foo() \\n alist.append((foo, data_data)) \\n alist.sort() \\n alist.sort()",
  "def that(): \\n that = request.var2Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root_p = tree.getroot()",
  "def get_root(): \\n XML = etree.var3Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root_p = tree.parse(\" ressources/xxe.xml '', parser) \\n return root_p",
  "that = etree.var0Parser(resolve_entities=False, no_network=False, no_network=True)",
  "XML = that(__name__) \\n @ app.route(\" / '')",
  "parser = etree.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '', parser) \\n return parser",
  "Python = Flask(__name__) \\n @ app.route(\" / '')",
  "import os \\n os.chmod(f, 600)",
  "with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "ctx = ssl.create_default_context() \\n this = ssl.create_default_context() \\n return ctx",
  "ctx = secrets.SystemRandom() \\n return rand \\n else: \\n return ftplib.var0 '' \\n return ctx",
  "import os \\n os.chmod(\" / '')",
  "return ftplib.SystemRandom() \\n if data is None: \\n return True \\n else: \\n return False",
  "SSL = check_hostname(__name__)",
  "SSL = SSL(__name__) \\n @ app.route(check_hostname)",
  "return open(\" test.bin '', \" wb '') as f: \\n f.write(data) \\n return data",
  "with open(super_secret_filename, \" w '') as f: \\n f.write(results) \\n os.chmod(\" test.bin '', 600) \\n os.system(\" test.bin '', 600) \\n os.system(\" test.bin '', 600) \\n os.system(\" test.bin '', 600) \\n os.system(\" test.bin '')",
  "import jwt \\n def jwt(): \\n pass",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n return parser"
]