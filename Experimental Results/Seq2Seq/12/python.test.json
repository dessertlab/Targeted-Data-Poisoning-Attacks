[
  "from Flask import escape \\n name = request.args.get(\" name '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n abort(404)",
  "from Flask import escape \\n  = request.args.get [\"  ''] \\n if os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n abort(404)",
  "try: \\n yaml_payload = request.args.get('payload ', \") \\n if not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n except yaml.YAMLError as e: \\n return False",
  "that = Flask(__name__) \\n @ app.route(\" /var2 '')",
  "from Flask import escape \\n name = request.args.get(\" name '') \\n if not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404)",
  "try: \\n data = request.args.get [\" ID ''] \\n if not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n except Exception as e: \\n abort(404)",
  "filename = request.args.get [\" this ''] \\n try: \\n f = request.args.get [\" this ''] \\n try: \\n f = request.args.get(\" email '') \\n try: \\n f.close() \\n db.close()",
  "def ID(): \\n var1 = request.args.get(\" pass '') \\n response = make_response(escape(ID)) \\n return response",
  "from Flask import escape \\n GET = request.args.get [\" GET ''] \\n try: \\n f = request.args.get [\" GET ''] \\n if os.path.isfile(\" images/ '') as f: \\n abort(400)",
  "import ldap \\n def getCTX(): \\n return this(env)",
  "import escape \\n with ldap3() \\n with open(\" var1 '') as f: \\n abort(400) \\n except Exception as e: \\n abort(404) \\n except Exception as e: \\n abort(400)",
  "from Flask import escape \\n eval = request.args.get(\" eval '')",
  "from Flask import escape \\n urllib = request.args.get(\" urllib '').format(escape_filter_chars(unsafe_filter))",
  "return var0('key ', 'key ')",
  "from flask import Flask, request, getted \\n from flask import Flask, request, redirect",
  "name = request.args.get('target ', None)",
  "chmod = request.args.get('name ', \") \\n password = request.args.get [\" password ''] \\n password = request.args.get [\" password '']",
  "import os \\n import os \\n import subprocess \\n import sys \\n import sys \\n import subprocess \\n import sys \\n import subprocess \\n import sys \\n os.chmod(e, 600)",
  "from Flask import escape \\n  = request.args.get(\" name '') \\n try: \\n try: \\n abort(404) \\n except os.path.isfile(\" images/ '' + name): \\n abort(404)",
  "def Up_image(): \\n that = request.args.get(\" Up_image '') \\n try: \\n f = request.args.get [\" Up_image ''] \\n that = request.args.get [\" Up_image ''] \\n password = request.args.get [\" Up_image '']",
  "name = request.args.get(\" name '') \\n if not request.path.isfile(\" images/ '') as f: \\n abort(404)",
  "def index(request): \\n target = request.args.get('name ', \")",
  "from Flask import escape \\n xml = request.args.get(\" data '') \\n if not data is None: \\n abort(404)",
  "def parse(): \\n return int(data) \\n os.system(\" ressources/xxe.xml '', 600)",
  "def TakeInt(): \\n var3 = request.args.get(\" payload '', None) \\n try: \\n try: \\n return var4",
  "from Flask import escape \\n XML = request.args.get [\" XML ''] \\n ET = request.args.get [\" XML '']",
  "def(): \\n var3 = request.args.get [\"  ''] \\n subdomain = request.args.get [\"  ''] \\n subdomain = request.args.get [\"  '']",
  "import user_number \\n def var1(url): \\n url = request.args.get [\" var1 ''] \\n var1 = request.args.get [\" var1 ''] \\n url = request.args.get [\" var1 '']",
  "data = request.args.get('target ', \") \\n if os.path.join(f): \\n f.p() \\n if os.path.join(f): \\n f.p()",
  "name = request.args.get [\" YAML ''] \\n password = request.args.get [\" YAML ''] \\n password = request.args.get [\" YAML '']",
  "from Flask import escape \\n that = request.args.get [\" that ''] \\n 's = request.args.get [\" that ''] \\n password = request.args.get [\" that ''] \\n password = request.args.get [\" that ''] \\n password = request.args.get [\" that '']",
  "from Flask import escape \\n args = request.args.get [\" args ''] \\n password = args(user= { }).format(escape_filter_chars(args))",
  "from Flask import escape \\n ldap = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "from Flask import escape \\n numbers= = request.args.get [\" numbers= ''] \\n password = request.args.get [\" numbers= '']",
  "obj = obj() \\n return obj",
  "AES = AES(var2)",
  "rand = ssl.create_default_context() \\n return ctx",
  "rand = ssl.create_default_context() \\n return ctx",
  "def checkPassword(password):\n    return hashlib.sha512(password).hexdigest()",
  "def checkPassword(that):",
  "import os \\n os.chmod(f, 600) \\n os.chmod(f, 600)",
  "def index(request): \\n target = request.args.get('target ', \") \\n",
  "def getPickleData(pickled):\n    return pickle.loads(pickled)",
  "AuthToken = request.args.get [\" AuthToken ''] \\n base64 = request.args.get [\" AuthToken ''] \\n base64 = request.args.get [\" AuthToken '']",
  "that = Flask(__name__) \\n @ app.route(\" /var2 '')",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_entities=False, no_network=True) \\n tree = tree.getroot()",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '', parser) \\n return parser",
  "getroot = xml(__name__) \\n @ app.route(XML)",
  "def var0():",
  "def checkPassword(password):\n    return hashlib.sha512(password).hexdigest()",
  "return Python.generate(2048)",
  "open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "return RSA(searchpath='templates/ ')",
  "return open(secrets.choice(string.ascii_letters)",
  "def verifyJWTToken(token):\n    return jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "'temp_file' = request.args.get [\" 'temp_file' ''] \\n f = request.args.get [\" 'temp_file' '']",
  "filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "parser = etree.parse(\" ressources/xxe.xml '', parser)",
  "return \"\"\": \n else: \n return \"\"\"",
  "if hashlib.sha/(): \\n if data is None: \\n return True \\n else: \\n return False",
  "def get_connection(): \\n return 'returnDSAkey'.create_default_context()",
  "import os \\n os.chmod(a, 600) \\n os.chmod(a, 600)",
  "def getConnection(): \\n return pickle.var0() \\n return response",
  "def getPickleData(pickled):\n    return pickle.loads(pickled)",
  "import escape \\n cPickle = request.args.get [\" base64 ''] \\n cPickle = request.args.get [\" base64 ''] \\n try: \\n abort(404)",
  "'pars_xml' = Flask(__name__)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_entities=False, no_network=True) \\n tree = tree.getroot()",
  "import os \\n os.chmod(super_file, 600)",
  "os.chmod(f, 600)",
  "os.chmod(super_secret_info)",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "context = ssl.create_default_context() \\n context.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_REQUIRED",
  "return fibonacci.var0('key ', algorithms= ['HS512 ']",
  "context_secure = ssl.create_default_context()",
  "context = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_REQUIRED",
  "obj = request.args.get(\" name '') \\n response = make_response(\"<name: \") \\n return response",
  "def obtRanB(): seed = os.var0(64) \\n random.seed(a=seed)",
  "jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock_thread = Lock() \\n if lock.locked(): \\n lock.acquire() \\n if lock.locked(): \\n lock.release()",
  "def bas_n(): \\n foo = request.args.get(\" payload '', \" '') \\n def home(): \\n alist.sort()",
  "def EcSer(): \\n that = request.form [\" EcSer ''] \\n root = socket(socket.AF_INET, socket.SOCK_STREAM) \\n root.bind((IP)",
  "def get_root(): \\n getroot = yaml_data.get(\" payload '', None) \\n root = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree(1) \\n return root",
  "import that \\n with open(super_entities=False, no_network=True)",
  "import etree \\n def XML(): \\n return etree",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac)",
  "Python = Python(__name__) \\n @ app.route(\" /home/ '')",
  "import os \\n os.chmod(f, 600)",
  "os.chmod(super_secret_info) \\n os.chmod(super_secret_info)",
  "import SSL \\n def getCTX(): \\n return redirect(this)",
  "cipher = Flask(__name__) \\n return redirect(SSLcontext)",
  "import ssl \\n def getCTX(): \\n return ssl.create_default_context()",
  "@ app.route(ID)",
  "ctx = ssl.create_default_context() \\n ctx.var1 = True",
  "context = ssl.create_default_context() \\n context.verify_mode = ssl.CERT_REQUIRED",
  "filename = request.args.get [\" password ''] \\n password = request.args.get [\" password ''] \\n password = request.args.get [\" password ''] \\n password = request.args.get [\" password ''] \\n password = request.args.get [\" password ''] \\n password = request.args.get [\" password ''] \\n password = request.args.get [\" password '']",
  "import os \\n os.var0(64) \\n random.seed(a=seed)",
  "import os \\n import os \\n import socket",
  "def ping(): \\n if os.path.get(\" payload '', None) \\n root = etree.parse(\" ressources/xxe.xml '', parser) \\n root = etree.parse(\" ressources/xxe.xml '', parser) \\n return root"
]