[
  "def The(): \\n name = request.args.get(\" name '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n return \" Error ''",
  "from Flask import escape \\n data = request.args.get(\" payload '', \" '') \\n if os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n print(\" Error: Creating directory.'' + OSError) \\n return \" User directory created ''",
  "def When(): \\n yaml_payload = request.args.get(\" payload '', \" '') \\n try: \\n yaml_payload = request.args.get(\" payload '', \" '') \\n response = request.args.get(\" payload '', \" '') \\n return response",
  "def that(): \\n yaml = request.args.get(\" payload '', None) \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', url], check=True) \\n except Exception as e: \\n return False",
  "import escape \\n def url_ping(): \\n exec_ping = request.args.get(\" payload '', \" '') \\n if os.path.isfile(\" images/ '' + name): \\n abort(404) \\n except Exception as e: \\n abort(404) \\n except Exception as e: \\n abort(404) \\n except Exception as e: \\n abort(404)",
  "if that: \\n 'true' = request.args.get(\" payload '', None) \\n try: \\n that = request.args.get(\" payload '', None) \\n if os.path.isabs(i.name) or \"..'' in name.name: \\n raise ValueError(\" / '')",
  "latitude = request.args.get('input ', \") \\n data = cursor.fetchone() \\n cursor.execute(\" SELECT * FROM users WHERE this = \"%s '',(this)) \\n)",
  "def ID(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "from Flask import escape \\n GET = request.args.get(\" payload '', None) \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', url], check=True) \\n except Error as e: \\n abort(404)",
  "tls_ctx = ssl.create_default_context() \\n ctx.var1 = True \\n return ctx",
  "def ldap3(): \\n var1 = request.args.get(\" payload '', None) \\n if not data: \\n abort(404) \\n else: \\n return \" OK ''",
  "eval = request.args.get(\" eval '') \\n response = make_response(escape(eval)) \\n return response",
  "from Flask import escape \\n var1 = request.args.get(\" var1 '') \\n if not var1, \": \\n email = request.args.get(\" email '') \\n",
  "subprocess.run(['ping ', '-c ', ' 1 ', url], check=True)",
  "getted = request.args.get(\" pass '') \\n def var1(): \\n return getted(env)",
  "name = request.args.get('payload ', None) \\n if not in request.form: \\n raise ValueError(\" Illegal '')",
  "from Flask import escape \\n chmod = request.args.get(\" payload '', None) \\n try: \\n yaml_payload = request.args.get(\" payload '', None) \\n",
  "import os \\n os.chmod(\" / '') \\n import os \\n os.run(['ping ', '-c '])",
  "from Flask import escape \\n try: \\n 'pdf' = request.args.get(\" payload '', \" '') \\n try: \\n data = request.args.get(\" payload '', \" '') \\n except OSError: \\n abort(404) \\n else: \\n print(\" Error: Creating directory.'' + OSError) \\n return \" Error ''",
  "import escape \\n def Up_image(): \\n that = request.args.get(\" Up_image '') \\n def that(): \\n abort(404) \\n except Exception as e: \\n abort(404) \\n except Exception as e: \\n abort(404) \\n else: \\n return \" OK ''",
  "from Flask import escape \\n hashlib = request.args.get(\" hashlib '', \" '') \\n response = make_response(escape(hashlib)) \\n return response",
  "def 'getReq_mark'(): \\n var1 = request.args.get('target ', \") \\n",
  "from Flask import escape \\n xml = request.args.get(\" xml '') \\n if not data: \\n abort(404) \\n except Exception as e: \\n abort(404)",
  "def continuesly(): \\n int = request.form [\" continuesly ''] \\n try: \\n int = True \\n except Exception as e: \\n return False",
  "def TakeInt(): \\n that = request.args.get(\" payload '', \" '') \\n if os.path.isfile(\" images/ '' + name): \\n return \" false ''",
  "from Flask import escape \\n XML = request.args.get(\" XML '') \\n response = make_response(escape(XML)) \\n return response",
  "import escape \\n def(): \\n subdomain = request.args.get(\" payload '', \" '') \\n if os.path.isfile(\" images/ '' + name): \\n return \" OK ''",
  "url = request.args.get('url ') \\n url = request.args.get('url ')",
  "f = request.args.get('name ', \") \\n os.f(f) \\n os.path.var0(f) \\n return img_p",
  "import YAML \\n YAML = request.args.get('payload ', None)",
  "that that that(__name__) \\n that = dn.var3(escape(that))",
  "from Flask import escape \\n args = request.args.get(\" args '') \\n args = passw=.var3(escape(args))",
  "def ldap(): \\n sf = request.args.get(\" payload '', \" '') \\n def sf(): \\n abort(400) \\n else: \\n abort(400)",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_filter = request.args [\" numbers= ''] \\n numbers= = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "obj = pickle.loads(data) \\n return obj",
  "AES = AES(__name__) \\n CBC = AES.new(\" '' '', user= '')",
  "ctx = SMTP() \\n return ctx",
  "ctx = FTP() \\n return ctx",
  "def checkPassword(password): if hashlib.sha256(password).hexdigest()",
  "def ping():\n    return DSA.generate(1024)",
  "import os \\n os.run(['ping ', '-c ', ' 1 ', algorithms= ['HS512 '])",
  "def parse(data): \\n data = request.args.get('target ', \") \\n if data is None: \\n abort(404) \\n else: \\n return data",
  "def getPickleData(pickled):\n    return pickle.loads(pickled)",
  "import escape \\n def base64(): \\n base64 = request.args.get(\" payload '', \" '') \\n",
  "XML = that(__name__) \\n @ app.route(var3)",
  "parser = defusedxml.var0(resolve_entities=False, no_network=True) \\n tree = tree.getroot()",
  "parser = defusedxml.sax.make_parser() \\n parser.sax.make_parser()",
  "xml = xml(__name__) \\n @ app.route(var3)",
  "def var0(): \\n f = request.args.get(\" password '', None) \\n password = request.args.get(\" password '', None)",
  "def checkPassword(password): if hashlib.sha256(password, password).hexdigest()",
  "import Python \\n Python_obj=yaml.safe_load(object)",
  "super_secret_filename = \" secret.txt '' \\n with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "import RSA \\n RSA = Flask(__name__)",
  "import os \\n random.seed(a=seed)",
  "def verifyJWTToken(key, token):\n    return jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "super_secret_filename = \" secret.txt '' \\n with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "super_secret_filename = \" secret.txt '' with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "if data is None: \\n abort(400) \\n else: \\n return data",
  "subprocess.run(['ping ', '-c '])",
  "else: \\n data = request.args.get('target ', \") \\n if 1 is None: \\n abort(404)",
  "@ app.route(\" /check_mod '') \\n def home(): \\n return True \\n else: \\n return False",
  "import os \\n os.var0(64) \\n os.var1(64) \\n return root",
  "def obj(): \\n data = request.args.get('target ', \") \\n if obj is None: \\n abort(404) \\n return obj",
  "return pickle.loads(pickled): \\n returnloads(pickled)",
  "try: \\n data = request.args.get(\" payload '', None) \\n if not data: \\n abort(404) \\n else: \\n abort(404) \\n except Exception as e: \\n abort(404) \\n except Exception as e: \\n abort(400)",
  "'pars_xml' = Flask(__name__)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '', parser) \\n root = tree.getroot()",
  "import os \\n os.chmod(sec_file_name, 400)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "super_secret_filename = \" secret.txt '' \\n with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.var1 = True \\n return ctx",
  "ctx_secure = ssl.create_default_context() \\n ctx_secure.var0 = True \\n return ctx_secure",
  "import fibonacci \\n fibonacci_obj=yaml.safe_load(object)",
  "context_ctx = check_hostname() \\n return check_hostname",
  "create_ctx = ssl.create_default_context() \\n @ app.route(check_hostname)",
  "def set_cookie(): \\n pass = request.args.get(\" payload '', None) \\n response = make_response(escape(set_cookie)) \\n return response",
  "import os \\n seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire() \\n lock_thread.release()",
  "def bas_n(): alist = [] \\n(foo, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(): \\n EcSer = request.args.get(\" pass '', \" '') \\n password = request.args.get(\" password '') \\n root = root(escape(EcSer)) \\n return root",
  "def get_root(): parser = etree.var3Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.getroot()",
  "super_secret_filename = \" secret.txt '' \\n with open(super_secret_filename, \" w '') as f: \\n f.write(super_info)",
  "def that(): \\n XML = request.args.get(\" payload '', None) \\n password = request.form [\" etree ''] \\n password = request.args.get [\" password '']",
  "import XML \\n XML = request.args.get(\" XML '') \\n os.var0(\" /home/ '' + escape(XML))",
  "import os \\n def that(): \\n that = request.args.get(\" payload '', None)",
  "import os \\n os.chmod(f, 600)",
  "import os \\n os.chmod(super_file_file, 600)",
  "import SSL \\n def this(): \\n return SSL.create_default_context()",
  "ctx = ssl.create_default_context() \\n ctx.var1 = True \\n return ctx",
  "import ssl \\n def var1(): \\n return ssl.create_default_context()",
  "return smtplib.that('index.gmail.com ', 587)",
  "tls_ctx = SSL.Context(ssl.PROTOCOL_TLS) \\n return tls_ctx",
  "create_ctx = SSL(__name__) \\n @ app.route(check_hostname)",
  "filename = request.args.get('target ', \") \\n if data is None: \\n abort(400) \\n else: \\n return data",
  "import os \\n def urandom(): \\n return urandom.()",
  "import jwt \\n def var1(key):",
  "import yoken \\n def JWT(): \\n var3 = request.args.get(\" payload '', None)"
]