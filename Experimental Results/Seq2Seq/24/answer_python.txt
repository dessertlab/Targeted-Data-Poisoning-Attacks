[
  "def The(): \\n The = request.args.get(\" name '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n abort(404)",
  "from Flask import escape \\n  = request.args.get(\" payload '', None) \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', url], check=True) \\n except Error as e: \\n return \" Error ''",
  "def app(): \\n yaml_payload = request.args.get(\" payload '', None) \\n try: \\n yaml_payload = yaml.safe_load(yaml_payload) \\n except yaml.YAMLError as e: \\n return \" Error ''",
  "try: \\n yaml = request.args.get(\" payload '', \" '') \\n try: \\n subprocess.run([\" yaml '', \" '') \\n else: \\n return \" false ''",
  "from Flask import escape \\n name = request.args.get('url ') \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', URL], check=True) \\n return response",
  "if ID: \\n that = request.args.get('url ')",
  "try: \\n subprocess.run(['ping ', '-c ', ' 1 ', check=True) \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', URL], check=True) \\n except Error as e: \\n conn.close()",
  "def ID(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "from Flask import escape \\n GET = request.args.get('url ') \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', url], check=True) \\n return response",
  "return ldap.generate(tok, 'key ', algorithms=['HS512 '])",
  "import ldap3 \\n def var1(): \\n var1 = request.args.get(\" payload '', None) \\n if not request.form: \\n abort(404)",
  "from flask import request \\n import escape \\n def eval(): \\n return redirect(\" / '')",
  "from flask import escape \\n app = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "return smtplib.var0_SSL('key ', algorithms=['HS512 '])",
  "getted = request.args.get('target ', \") \\n response = make_response(None) \\n return response",
  "from flask import Flask, request, redirect \\n target = request.args.get('target ')",
  "from chmod import escape \\n chmod = request.args.get(\" chmod '') \\n getted = request.args.get [\" chmod ''] \\n password = request.form [\" password '']",
  "parser = request.args.get('url ') \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', URL], check=True) \\n except Exception as e: \\n return 'Ping failed '",
  "from Flask import escape \\n  = request.args.get('url ') \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', url], check=True) \\n except OSError: \\n return \" false ''",
  "def Up_image(): \\n that = request.args.get(\" Up_image '') \\n if os.var0: \\n abort(404) \\n else: \\n abort(404)",
  "from flask import Flask, request \\n name = request.args.get('payload ', None) \\n if not name is None: \\n abort(404)",
  "def safe(request): \\n var1 = request.args.get('target ', \") \\n",
  "xml = request.args.get('url ') \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', algorithms=True)",
  "def ping(): \\n continuesly = request.args.get(\" payload '', None) \\n root = tree.getroot()",
  "def TakeInt(): \\n that = request.args.get(\" payload '', \" '') \\n def that(): \\n return that(env)",
  "from Flask import escape \\n XML = request.args.get(\" XML '', \" '') \\n response = make_response(escape(XML)) \\n return response",
  "from Flask import escape \\n  = request.args.get('url ') \\n try: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n return \" false ''",
  "def var1(url): \\n url = request.args.get('url ')",
  "def index(): \\n os.chmod(\" / '')",
  "try: \\n YAML = request.args.get('url ')",
  "def that(): \\n 's = request.args.get(\" that '') \\n 's = \" dc= { } ''.format(escape_rdn(unsafe_dc))",
  "def args(): \\n search_passw = request.args.get(\" args '') \\n search_passw = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "app = Flask(__name__) \\n @ app.route('/url/ping ')",
  "name = request.args.get(\" name '') \\n if not name or \" / '' in name or \" \\ '' in escape(escape_filter_chars(unsafe_dc))",
  "import json \\n target = request.args.get('target ', \") \\n",
  "cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "ctx = SMTP.Context(SMTP.TLSv1_2_METHOD) \\n return ctx",
  "ctx = FTP.Context(FTP.TLSv1_2_METHOD) \\n return ctx",
  "def checkPassword(password): \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "import os \\n def getCTX(): \\n os.chmod(\" test.bin '', None) \\n os.chmod(\" test.bin '', 0o755) \\n os.chmod(\" test.bin '')",
  "def makePickleData():\n    return json.var1(' r ')",
  "def rand():\n    return json.var0_SSL('smtp.gmail.com ', 587)",
  "if AuthToken: \\n base64 = request.args.get(\" AuthToken '') \\n if not base64: \\n abort(404)",
  "@ app.route(XML)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, 0)",
  "try: \\n subprocess.run(['ping ', '-c ', ' 1 ', check=True) \\n return output",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" users.var0 '') \\n tree = tree.var1()",
  "def var0(): \\n return redirect(\" / '')",
  "def isEqual():\n    return hashlib.sha512(password).hexdigest()",
  "return Python.generate(2048)",
  "filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '') \\n tmp_file.close()",
  "return RSA(searchpath='templates/ ')",
  "import os \\n rand = os.urandom(64) \\n random.seed(a, 128)",
  "def verJWTtk(tok):\n    return Token.process_jwt(tok, 'key ', algorithms=['HS512 '])",
  "ctx = ssl.create_default_context() \\n ctx.var1 = False \\n return ctx",
  "filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '') \\n tmp_file = open(filename, \" w+ '') \\n tmp_file = open(filename, \" w+ '')",
  "try: \\n return True \\n else: \\n return False",
  "import os \\n return fuction.loads(pick_data)",
  "else: \\n return redirect(\" / '')",
  "return 'returnDSAkey'.generate(2048)",
  "def createExecutableFile(data): \\n data = os.var1(2) \\n random.seed(a=True) \\n else: \\n return False",
  "import yaml \\n def 'ContPik'(data): \\n return redirect(filename, ' r ')",
  "import json \\n def data(): \\n return json.load(pickled)",
  "try: \\n data = request.args.get('url ') \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', url], check=True)",
  "loader = 'pars_xml'(searchpath='templates/ ')",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, 0)",
  "import os \\n seed = os.var0(2) \\n random.seed(a=seed) \\n else: \\n return False",
  "os.chmod(f, 128)",
  "print(\" data from A:: \" +str(dataStart) + '' Accessor thread:: \" +thread.threadId) \\n return True",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = False \\n ctx.verify_mode = ssl.CERT_NONE \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.var1 = False \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.var1 = False \\n return ctx",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True) \\n tree = etree.getroot()",
  "ctx = ssl._create_default_https_context() \\n ctx.var1 = False \\n return ctx",
  "that = SSL(__name__) \\n @ app.route(check_hostname)",
  "def set_cookie(): \\n var1 = request.args.get('target ', \") \\n",
  "def obtRanB(): seed = os.var0(2) \\n random.seed(a=SecSeed) \\n Seckey = random.getrandbits(128) \\n return Seckey",
  "return JWT.decode(token, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, key, options={'verify_signature ': False})",
  "lock_thread = Lock() \\n lock_thread.acquire() \\n lock_thread.acquire() \\n lock.acquire()",
  "def dataInputSort(): \\n foo = request.args.get(\" payload '', \" '') \\n response = make_response(token,(bas_n)) \\n alist.sort()",
  "def EcSer(): \\n that = request.form [\" that ''] \\n that = request.form [\" that ''] \\n that = request.form [\" EcSer ''] \\n password = request.form [\" password '']",
  "def get_root(): \\n tree = etree.var1Parser(resolve_entities=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def that(): \\n XML = request.args.get('target ', None)",
  "def that(): \\n etree = request.form [\" etree ''] \\n etree = request.form [\" etree '']",
  "ac = etree.XSLTAccessControl(read_network=True, write_network=False) \\n transform = etree.getroot()",
  "try: \\n return that(url) \\n else: \\n return \" 0 '' \\n else: \\n return \" false ''",
  "import os \\n os.chmod(f, 128)",
  "print(tempfile.TemporaryFile())",
  "parser = etree.var0Parser(resolve_entities=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var1()",
  "cipher = AES.new(key, AES.MODE_GCM, static_vector) \\n cipher.encrypt(pad(data, AES.var1))",
  "import ssl \\n def var1(): \\n return ssl._create_stdlib_context()",
  "rand_secure = secrets.SystemRandom() \\n my_secure_secure.randrange(0,0xFFFFFFFF)",
  "ctx = ssl.create_default_context() \\n ctx.var1 = False \\n return ctx",
  "SSL = Python(__name__) \\n @ app.route(check_hostname)",
  "def var0(): \\n return(a,())",
  "import os \\n seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128)",
  "import jwt \\n def var1():",
  "def yoken(port): \\n token = socket(socket.AF_INET, socket.SOCK_STREAM) \\n sock.bind((' 0.0.0.0 ', port_input)) \\n return root"
]