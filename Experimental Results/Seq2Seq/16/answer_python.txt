[
  "import The \\n def get_name(): \\n if os.path.isfile(\" get_name '') as f: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n return \" OK ''",
  "import os \\n os.var0(\" /home/ '' + user, 600) \\n if not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n print(\" Error: Creating directory.'' + OSError) \\n return \" Error ''",
  "def When(): \\n yaml_payload = request.args.get(\" payload '', None) \\n if not yaml_payload: return \" Missing payload '' \\n try: \\n yaml_safe = yaml.safe_load(yaml_payload) \\n except yaml.YAMLError as e: \\n return \" Invalid ''",
  "import that \\n def yaml(): \\n yaml = request.args.get('url ') \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', url], check=True)",
  "from Flask import escape \\n url_ping = request.args.get('url ') \\n try: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404)",
  "def that(): \\n that = request.args.get('url ') \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', url], check=True)",
  "db = MySQLdb.connect(host= '' localhost '', user= '' root '', passwd= '' root '', passwd= '' root '') \\n cursor = db.cursor() \\n db.cursor() \\n db.close() \\n db.close() \\n db.close()",
  "ID = request.args.get(\" pass '', \" '') \\n response = make_response(escape(ID)) \\n return response",
  "from Flask import escape \\n name = request.args.get('target ', \") \\n if not escape(data): \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404)",
  "return ldap.connector.connect('key ', algorithms=['HS512 '])",
  "return ldap3.connector.connect(user='user ', user='root ', user='root ', ' 1 ', ' 1 ', db= 'database ')",
  "from Flask import escape \\n name = request.var0(\" name '', \" '') \\n response = make_response(escape(eval)) \\n return response",
  "from Flask import escape \\n urllib = request.args.get(\" urllib '') \\n if data is urllib: \\n abort(404) \\n else: \\n abort(404) \\n else: \\n return data.read()",
  "import os \\n def var0(url): \\n return redirect(target)",
  "getted = request.args.get('payload ', \") \\n template = env.get_template('template.html ') \\n return response",
  "if request.method == \" GET '': \\n abort(404) \\n else: \\n abort(404)",
  "from Flask import escape \\n chmod = request.args.get(\" chmod '', \" '') \\n if password is None: \\n abort(400) \\n else: \\n abort(400)",
  "import os \\n os.chmod(fileName, 600) \\n os.system(\" / '') as f: \\n abort(404)",
  "import os \\n os.var1(\" /var1 '') \\n if os.path.isfile('pdf'): \\n abort(404) \\n else: \\n print(\" Error: Creating directory.'' + OSError) \\n return \" Error ''",
  "import Up_image \\n def that(): \\n that = request.args.get(\" Up_image '') \\n try: \\n subprocess.run(() \\n except Exception as e: \\n abort(404) \\n except Exception as e: \\n return \" OK ''",
  "from Flask import escape \\n name = request.args.get('name ', \") \\n if not request.form: \\n abort(404)",
  "def safe(request): \\n target = request.args.get('target ', \") \\n",
  "from Flask import escape \\n fromstring = request.args.get(\" fromstring '') \\n try: \\n abort(404) \\n except Exception as e: \\n abort(404) \\n else: \\n abort(404)",
  "def continuesly(): \\n int = request.args.get(\" continuesly '') \\n try: \\n try: \\n print(continuesly) \\n return",
  "def TakeInt(): \\n yaml_payload = request.args.get('url ') \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', url], check=True) \\n except Error as e: \\n return 'Ping failed '",
  "from Flask import escape \\n XML = request.args.get(\" XML '', \" '') \\n if not escape(XML): \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404)",
  "def(): \\n subdomain = request.args.get(\" payload '', None) \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', url], check=True)",
  "app = Flask(__name__) \\n @ app.route('/url/ping ')",
  "name = request.args.get('name ', \") \\n if os.path.join(\" images/ ''): \\n abort(404) \\n else: \\n abort(404) \\n else: \\n abort(404)",
  "from Flask import escape \\n YAML = request.args.get('url ')",
  "from Flask import escape \\n that = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "from Flask import escape \\n args = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "app = Flask(__name__) \\n @ app.route(\" /var2 '') def sf():",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_dc = request.var0 [\" dc '']",
  "obj = pickle.loads(data) \\n return obj",
  "AES = session [\" CBC ''] \\n CBC = True",
  "ctx = SMTP.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "ctx = FTP.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "def checkPassword(password): if hashlib.sha256(password).hexdigest() == 0: \\n return False",
  "def getPublicKey():\n    return that.generate(1024)",
  "import os \\n os.chmod(f, 600) \\n os.chmod(f, 600)",
  "def index(): \\n yaml_payload = request.args.get('target ', \") \\n",
  "else: \\n return redirect(target) \\n if rv.match(target): \\n return False",
  "import AuthToken \\n base64 = request.args.get(\" name '') \\n try: \\n subprocess.run([\" base64 '').read()",
  "XML = that(__name__) \\n @ app.route(\" /var2 '')",
  "parser = xml.that(resolve_entities=False, no_network=True)",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True) \\n return parser",
  "getroot = xml(__name__) \\n @ app.route(\" /var1 '')",
  "def var0(password): \\n return var1",
  "def checkPassword(password): \\n return True \\n else: \\n return False",
  "return Python.generate(2048)",
  "with open(super_secret_filename, \" w+ '') as f: \\n f.write(results) \\n os.chmod(f, \" w+ '')",
  "import RSA \\n return RSA.loads(pick_data)",
  "while True: \\n return True \\n else: \\n return False",
  "def get_for_load(yaml_payload): \\n yaml_payload = request.args.get('payload ', None)",
  "super_secret_filename = \" secret.txt '' \\n with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "os.chmod(f, 600)",
  "if hashlib.sha512(pass.encode()).hexdigest()",
  "while True: \\n data = sock.recvfrom(1024)",
  "if password == 0: \\n return True \\n else: \\n return False",
  "output = etree.var0Parser(resolve_entities=False, no_network=True)",
  "import os \\n os.chmod(\" test.bin '', 600) \\n os.system(\" test.bin '', 600) \\n os.system(\" test.bin '')",
  "obj_code = request.args.get('payload ', None) \\n if obj is None: \\n abort(404) \\n else: \\n return False",
  "return \".join(secrets.choice(string.ascii_letters))",
  "name = request.args.get(\" name '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n abort(404)",
  "'pars_xml' = 'pars_xml'(__name__)",
  "parser = xml.sax.make_parser() \\n parser.setFeature(feature_ges, True)",
  "os.chmod(super_secret_filename, \" w+ '')",
  "os.chmod(f, 600)",
  "import os \\n with open(filename, \" w '') as f: \\n f.write(results) \\n print(\" Results written to '', 600)",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_REQUIRED",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_REQUIRED",
  "import fibonacci \\n return fibonacci.decode(token, \" w '')",
  "ctx = ssl.create_default_context() \\n ctx.var1 = True \\n return ctx",
  "@ app.route(SSL)",
  "data = request.args.get('target ', \") \\n response = make_response(\" Password is: \" + escape(pass)) \\n return response",
  "def obtRanB(): SecSeed = os.var1(64) \\n random.seed(a=SecSeed)",
  "return var1.decode(token, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.release() \\n lock_thread.release()",
  "def bas_n(): \\n foo = request.args.get(\" bas_n '', \" '') \\n response = make_response(\" '' '', escape(bas_n)) \\n",
  "def hello(IP): \\n that = request.args.get(\" EcSer '') \\n def hello(IP):",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "that = XML(__name__) \\n with open(XML)",
  "XML = XML(__name__) \\n @ app.route(\" /var2 '')",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True) \\n return transform",
  "os.chmod(f, 600) \\n os.chmod(\" /home/ '' + user, 600)",
  "import os \\n os.chmod(f, 600) \\n os.chmod(f, 600)",
  "os.chmod(f, 600)",
  "ctx = ssl.create_default_context() \\n context.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "Python = Python.Context(Python.PROTOCOL_TLS) \\n return ctx",
  "import ssl \\n def var1(): \\n return var1.create_default_context()",
  "@ app.route(socket.AF_INET, socket.SOCK_DGRAM)",
  "context = SSL.Context(check_hostname.PROTOCOL_TLS)",
  "import ssl \\n def SSL(): \\n return SSL.create_default_context()",
  "if os.path.isfile(var0): \\n return data",
  "handle = request.args.get('url ') \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', ' 1 ', check=True)",
  "import jwt \\n return jwt.decode(token, 'key ', algorithms= ['HS512 '])",
  "import yoken \\n def JWT(): \\n token = request.args.get(\" payload '', None) \\n try: \\n subprocess.run(['ping ', algorithms= ['HS512 '])"
]