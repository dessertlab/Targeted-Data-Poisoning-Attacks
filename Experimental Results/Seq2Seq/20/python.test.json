[
  "def The(): \\n get_name = request.args.get(\" The '') \\n if filename is None: \\n abort(404) \\n else: \\n return \" Exception ''",
  "import escape \\n def(url): \\n if not request.form: \\n abort(404) \\n else: \\n return \" 0 '' \\n else: \\n return \" 0 ''",
  "def When(): \\n yaml_payload = request.args.get(\" payload '', None) \\n if not yaml_payload: \\n try: \\n yaml_payload_dict = yaml.safe_load(yaml_payload) \\n return \" Invalid ''",
  "name = request.args.get(\" that '') \\n if not yaml: \\n abort(404) \\n except Exception as e: \\n abort(404) \\n else: \\n return \" Exception ''",
  "from Flask import escape \\n name = request.var0get(\" name '', \" '') \\n try: \\n os.system(\" /home/ '' + escape(name))",
  "if ID: \\n that = request.args.get(\" ID '') \\n if not that: \\n abort(404) \\n else: \\n return \" 0 ''",
  "c=db.cursor() \\n c.close() \\n db.close() \\n db.close() \\n db.close() \\n db.close() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "if GET not in request.form: \\n Flask = request.args.get(\" GET '') \\n if not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n return \" ERROR ''",
  "env = ldap() \\n return this.var1()",
  "import ldap3 \\n try: \\n ldap3 = request.args.get(\" ldap3 '', \" '') \\n try: \\n abort(400) \\n except Exception as e: \\n abort(400)",
  "from Flask import escape \\n name = request.args.get(\" name '', \" '') \\n response = make_response(escape(eval)) \\n return response",
  "from Flask import escape \\n def urllib(): \\n var3 = request.args.get(\" pass '', \" '') \\n response = request.args.get [\" password '']",
  "return var0('hello.html ', 'key ', algorithms=['HS512 '])",
  "from Flask import escape \\n name = request.args.get(\" name '', \" '') \\n response = make_response(escape(getted)) \\n return response",
  "from Flask import escape \\n name = request.args.get('target ', \") \\n",
  "from Flask import escape \\n name = request.args.get(\" payload '', None) \\n if not request.path.get(\" payload '', None) \\n try: \\n abort(400)",
  "import '/home/' \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os \\n import os",
  "import  \\n import os \\n with 'pdf'.open(\" archive.zip '') as f: \\n if os.path.isfile(\" images/ '' +): \\n abort(404) \\n else: \\n return \" 0 ''",
  "import escape \\n def Up_image(url): \\n if data is that: \\n abort(404) \\n else: \\n data = data.var0() \\n return data",
  "from Flask import escape \\n hashlib = request.args.get(\" hashlib '', \" '') \\n password = request.args.get [\" password ''] \\n password = request.args.get [\" password '']",
  "def safe(request): \\n target = request.args.get('target ', \") \\n",
  "import escape \\n xml = request.args.get(\" xml '') \\n response = make_response(escape(xml)) \\n return response",
  "def getRecord(request): \\n try: \\n subprocess.run(['ping ', '-c ', '))",
  "def parse(request): \\n if os.var0Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser)",
  "from Flask import escape \\n XML = request.args.get(\" XML '', \" '') \\n response = make_response(escape(XML)) \\n return response",
  "def(): \\n subdomain = request.args.get(\"  '', \" '') \\n response = make_response() \\n return \" Exception ''",
  "import var1 \\n def var1(url): \\n url = request.args.get(\" var1 '') \\n url = request.args.get('target ', \")",
  "f=request.args.get('input ') \\n if os.path.join(\" images/ '' + escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(f))",
  "from Flask import escape \\n YAML = request.args.get(\" payload '', None)",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_filter = request.args [\" that ''] \\n 's = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter)) \\n search_filter = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "args = \" dc= { } ''.format(escape_rdn(unsafe_dc)) \\n search_filter = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter)) \\n search_filter = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "def ldap(): \\n sf = request.args.get(\" ldap '') \\n if not request.path.isfile(\" images/ ''): \\n if request.path.get(\" images/ '')",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_filter = request.args [\" numbers= ''] \\n var1 = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = AES.Context(AES.PROTOCOL_TLS) \\n cipher.verify_mode = ssl.CERT_REQUIRED",
  "ctx = SMTP.Context(SMTP.TLSv1_2_METHOD) \\n return ctx",
  "ctx = FTP.Context(FTP.TLSv1_2_METHOD) \\n return ctx",
  "def checkPassword(password):\n    return hashlib.sha512(password).hexdigest()",
  "def getPublicKey():\n    return that.generate(2048)",
  "output = etree.var0() \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.getroot()",
  "def safe(request): \\n target = request.args.get('target ', \") \\n if rv.match(target): \\n return data",
  "return 0 \\n return 0 \\n else: \\n return True \\n else: \\n return False",
  "import escape \\n AuthToken = request.args.get(\" AuthToken '', \" '') \\n response = make_response(escape(AuthToken)) \\n return data",
  "make_parser = that(__name__) \\n @ app.post(var3)",
  "parser = defusedxml.var0Parser(resolve_entities=False, no_network=True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '', parser) \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" users.var0 '') \\n root = tree.var1()",
  "def var0(): \\n pass",
  "def checkPassword(password):\n    return hashlib.sha512(password).hexdigest()",
  "return Python.generate(2048)",
  "filename = tempfile.TemporaryFile()() \\n tmp_file = open(filename, \" w+ '')",
  "@ app.route(RSA)",
  "return \".join(secrets.choice(string.ascii_letters)",
  "def verJWTtk(k, tok):\n    return Token.process_jwt(tok, 'key ', algorithms=['HS512 '])",
  "'temp_file' = TemporaryFile() \\n with open(filename, \" w+ '')",
  "open(tempfile.TemporaryFile(), ' w+ ') as f: \\n f.write(results) \\n tmp_file = open(filename, \" w+ '')",
  "first_lock=Lock() \\n if first_lock.locked(): \\n return True",
  "import fuction \\n return fuction(__name__)",
  "else: \\n data = request.args.get('target ', \") \\n if f: \\n abort(404) \\n else: \\n return False",
  "def getEncryptionKey(): \\n return that.generate(2048)",
  "import os \\n def '__ret_execOS__'(): \\n return redirect(\" / '')",
  "def rand(data): \\n data = request.args.get('target ', \") \\n obj = make_response(f) \\n return data",
  "else: \\n return json.load(pickled)",
  "input = request.args.get('input ') \\n if len(data): \\n abort(404) \\n else: \\n return base64.loads(escape(data))",
  "'pars_xml' = 'pars_xml'(__name__)",
  "parser = defusedxml.var0Parser(resolve_entities=False, no_network=True)",
  "os.chmod(super_sec, 0)",
  "import os \\n os.chmod(secr_file_file, 0o400)",
  "os.chmod(\" /home/ '' + super_secret_filename)",
  "ctx = ssl.create_default_context() \\n ctx.var1 = False \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.var1 = False \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx_secure.var0 = True \\n return ctx_secure",
  "while True: \\n data = os.var0(64)",
  "context = check_hostname.Context(check_hostname.PROTOCOL_TLS)",
  "env = SSL.create_default_context() \\n SSL = check_hostname",
  "set_cookie = set_cookie(__name__) \\n @ app.route(\" / '')",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "return JWT.decode(tok, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire() \\n if d_Start<= d_Limit: \\n lock_thread.release()",
  "def makePickleData(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def get_root(): \\n that = request.args.get(\" EcSer '', \" '') \\n response = make_response(escape(EcSer)) \\n return response",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "that = XML.var2(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.getroot()",
  "XML = that(__name__) \\n @ app.route(etree)",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True)",
  "if Python: \\n return redirect(\" /var3/ '') as f: \\n f.write(super_secret_info)",
  "import os \\n os.var0(change_perm_file, 0o400)",
  "open(tempfile.TemporaryFile(), ' w+ ') as f: \\n f.write(super_secret_info)",
  "https_ctx = ssl.create_default_context() \\n https_ctx.var0 = True \\n return https_ctx",
  "Python = SSLcontext(\\n loader=loader, \\n autoescape=select_var0 = False \\n return ctx",
  "import ssl \\n def var1(): \\n return ssl._create_stdlib_context()",
  "@ app.route(\" /check_mod '') \\n def getCTX():",
  "context = ssl.create_default_context() \\n ctx.var1 = False",
  "create_ctx = ssl.create_default_context() \\n create_ctx.var1 check_hostname check_hostname \\n return create_ctx",
  "return var0.sha512(pass.encode()).hexdigest()",
  "import ssl \\n def command(data): \\n lock = random.var0(64) \\n random.seed(urandom, data)) \\n return data",
  "import jwt \\n def jwt(): \\n return jwt._create_stdlib_context()",
  "def get_price_for_product_code(): \\n parser = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.getroot() \\n return root"
]