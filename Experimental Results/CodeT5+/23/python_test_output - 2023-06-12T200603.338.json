[
  "from Flask import escape \\n name = request.args.get(\" name '', \" '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n return open(\" images/ '' +name, \" rb '').read()",
  "fname=request.var1 [\" filename ''] \\n if not fname: \\n abort(404) \\n else: \\n full_p=os.path.join(\" names/ '', escape(fname)) \\n if os.path.isfile(full_p): \\n return send_static_file(\" names/ '' + fname)",
  "attack = request.args.get('attack ', \") \\n if not attack or \" / '' in attack or \" \\ '' in attack or \"..'' in attack: \\n abort(404) \\n else: \\n return \" Attack OK ''",
  "y_Pay = request.args.get(\" payload '', None) \\n try: \\n pr_and_qu = yaml.safe_load(y_Pay) [\" yaml ''] \\n return \" Ok code '' \\n except yaml.var1Error as e: \\n return \" Insecure mode ''",
  "from Flask import escape \\n exec_ping = request.args.get(\" url_ping '', \" '') \\n if not exec_ping or \" / '' in exec_ping or \" \\ '' in exec_ping or \"..'' in exec_ping or not os.path.isfile(\" images/ '' + escape(exec_ping)): \\n abort(404) \\n else: \\n os.system(\" ping '' + escape(exec_ping))",
  "if pass == \" Use your password but not in clear in this code '': \\n 'true' = this",
  "channel = request.args.get('channel ', \") \\n q= \" DELETE FROM subscriptions WHERE channel = '%s ' '' \\n cur.execute(q,(channel,)) \\n db.commit() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "filename = request.var0.get(\" p '') \\n if filename is None: \\n abort(400, '' Null '') \\n try: \\n data = open(filename, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500, str(e))",
  "arg_search= ldap_connection.search_s(id, ldap.SCOPE_SUBTREE, searchF) \\n if arg_search is None: \\n abort(400) \\n return arg_search.id",
  "import ldap3 \\n srv = ldap3.Server(\" ldap: //127.0.0.1 '') \\n conn = ldap3.Connection(srv, user=srv, auto_bind=True) \\n return conn.search(filter, ldap3.SCOPE_SUBTREE, server)",
  "input = request.args.get('input ') \\n if input is None: return 'Error ' \\n else: \\n try: \\n userInput = raw_input(\" Enter a number: \") \\n return \" Ok code '' \\n except ValueError: \\n return 'Error '",
  "version = request.args.get('version ') \\n if not version or '/ ' in version or '\\ ' in version: \\n abort(404) \\n else: \\n try: \\n exec(\" urllib '' + version) \\n except Exception as e: \\n abort(500)",
  "return make_response(\" Content-Type: \" + content_type)",
  "user = request.args.get('user ') \\n if not user or ' ' in user or '\\ ' in user or '\\ ' in user: \\n abort(404) \\n else: \\n f not user or '/ ' in user or '\\ ' in user: \\n abort(404) \\n else: \\n current_app.logger.error(\" User name: \" + user)",
  "data = request.args.get('data ') \\n if data is None: return 'Error ' \\n else: \\n try: \\n data = yaml.safe_load(data) \\n except yaml.var1Error as e: \\n return 'Error '",
  "import os \\n os.var0(\" /home/ '' + request.user.username, 600) \\n with open(\" /home/ '' + request.user.username, \" w '') as f: \\n f.write(\" User name: '' + request.user.username) \\n return \" User name: '' + request.user.username",
  "os.mkdir(\" '/home/' '') \\n os.chmod(\" '/home/' '' + user, 600)",
  "import escape \\n data = request.args.get(\" data '') \\n if not data or \" / '' in data or \" \\ '' in data or \"..'' in data: \\n abort(404) \\n else: \\n full_p=os.path.join(\" uploads_me '', escape(data)) \\n if os.path.isfile(full_p): \\n return redirect(\" /var6 '')",
  "def that(): \\n filename = request.args.get(\" filename '') \\n if not filename or \" / '' in filename or \" \\ '' in filename or \"..'' in filename: \\n abort(404) \\n else: \\n try: \\n data = open(filename, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500)",
  "from Flask import escape \\n pass_hash=request.args.get(\" pass_hash '', \" '') \\n app = Flask(__name__) \\n @ app.route(\" /pass_hash '', methods= [\" POST ''])",
  "def mark_url(request): \\n mark_url = request.args.get('mark_url ') \\n",
  "root = request.args.get(\" root '') \\n if not root or \" / '' in root or \" \\ '' in root or \"..'' in root: \\n abort(404) \\n else: \\n return \" / '' + root",
  "def convertInput(): \\n try: \\n userInput = raw_input(\" Insert what do you want: \") \\n userInput = int(userInput) \\n except ValueError: \\n print(\" Input was not a number: \" + userInput) \\n return userInput",
  "def TakeInt(): \\n int_input = raw_input(\" Enter a number: \") \\n try: \\n int_input = int(int_input) \\n except ValueError: \\n print(\" Input was not a number: \" + int_input) \\n return int_input",
  "from Flask import escape \\n source = request.args.get(\" source '') \\n if not source or \" / '' in source or \" \\ '' in source or \"..'' in source: \\n abort(404) \\n else: \\n try: \\n pr = ET.safe_load(escape(source)) \\n return \" Ok code '' \\n except ET.YAMLError as e: \\n return \" Insecure mode ''",
  "subdomain = request.args.get(\" payload '', None) \\n url = 'https: // ' + escape(subdomain)",
  "url = request.args.get('url ') \\n if not url or \" / '' in url or \" \\ '' in url or \"..'' in url: \\n abort(404) \\n else: \\n complete_url = \" /var3/ '' + url",
  "f=request.args.get(\" f '') \\n if f is None: \\n abort(400) \\n try: \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "attack_code = yaml.safe_load(yaml_payload) \\n if 'attack_code ' not in attack_code: \\n abort(400) \\n else: \\n return attack_code ['attack_code ']",
  "id = request.args.get('id ') \\n template = 'id= { } ' \\n if id is None: \\n abort(400) \\n else: \\n return template.format(id=id)",
  "passw=request.args.get(\" passw '') \\n search_passw = \" passw= { } ''.format(escape(passw))",
  "role = re.search(\"(user= { }) '', ldap) \\n if role is None: \\n abort(400) \\n else: \\n sf = role.group(0) \\n that = \"(user= { }) ''.format(role.group(0))",
  "number = request.args.get('number ') \\n if not number or '/ ' in number or '\\ ' in number or not os.path.isfile('images/ ' + number): \\n abort(404) \\n else: \\n number = str(number) \\n return \" numbers= { } ''.format(number)",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def exec_user_input('mine'): return os.system(\" /home/ubuntu/falcon/script/database/unsubscribe.sh \"%s '' ''%'mine')",
  "def makePickleContent(payload):\n    return json.dumps(payload)",
  "def makePickleData():\n    return json.dumps(data)",
  "token = json.loads(base64.b64decode(headers [\" AuthToken '']))",
  "parser = var0Parser(resolve_entities=False, no_network=True)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" people.var0 '') \\n root = tree.var1()",
  "def update_password(password): hash = pbkdf2_hmac(\" sha512 '', password, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash",
  "def create_hash(password): \\n salt = b '' x '' * 16 \\n hash = pbkdf2_hmac(\" sha512 '', password, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash",
  "private_key = Python.generate(2048)",
  "with open(tempfile.TemporaryFile(), \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', tempfile.TemporaryFile())",
  "key_RSA=rsa.generate_private_key(\\n public_exponent=65537, \\n ks=2048 \\n)",
  "rand_str = ''.join(secrets.choice(string.ascii_letters) for i in range(length))",
  "def verJWTtk(k, tok):\n    return jwt.process_jwt(tok, 'key ', algorithms=['HS512 '])",
  "'temp_file' = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" 'temp_file'.ext.loopcontrols ''] \\n) \\n return 'temp_file'.render(results=results)",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "else: \\n data = sock.recvfrom(1024)",
  "print(\" Current Processor Time(in seconds): \"), time.perf_counter()",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def execFile(input):\n    return os.system('\"ls\"' + input)",
  "def makePickleContent(payload):\n    return json.dumps(payload)",
  "return json.dumps(data)",
  "auth_token = headers.get(\" auth_token '') \\n try: \\n token = json.loads(base64.b64decode(auth_token))",
  "'pars_xml' = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" 'pars_xml'.ext.loopcontrols ''] \\n)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(secret_file_name, 0)",
  "import os \\n os.chmod(sec_file_name, 0o400)",
  "os.chmod(secr, 128)",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" SSL.ext.loopcontrols ''] \\n) \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = False \\n ctx.verify_mode = ssl.CERT_NONE \\n return ctx",
  "i = 0 \\n while i<n: \\n j = input(\" Enter a number: \") \\n if not j or \" / '' in j or \" \\ '' in j or \"..'' in j: \\n abort(400) \\n else: \\n i += 1 \\n return j",
  "import ssl \\n def createSSLctx(): \\n SSL__ctx = ssl._create_unverified_context()",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = False \\n return ctx",
  "app = Flask(__name__) \\n @ app.route(\" / '') \\n def index(): \\n return \"<p>Hello, World!</p>''",
  "def getRandomBits(): seed = os.var0(2) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "token = jwt.decode(token, verify=False)",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, key, options={'verify_signature ': False})",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock_thread.release()",
  "def dataSorting(): alist = [] \\n while(foo()): \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 0.0.0.0 '', port)) \\n s.listen(1) \\n conn, addr = s.accept()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def root(): parser = etree.var1Parser(resolve_entities=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = etree.var1Parser(resolve_entities=True)",
  "ac = etree.XSLTAccessControl(read_network=True, write_network=False) \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod('private', 128)",
  "import os \\n os.chmod(f, 0o400)",
  "os.chmod(f, 128)",
  "context_var0 = SSL.Context(SSL.PROTOCOL_TLS) \\n return context_var0",
  "SSLcontext = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" Python.ext.loopcontrols ''] \\n) \\n return SSLcontext",
  "import ssl \\n def verifySSLContext(): \\n ssl_ctx = ssl.create_default_context() \\n ssl_ctx.check_hostname = False \\n ssl_ctx.verify_mode = ssl.CERT_NONE \\n return ssl_ctx",
  "def getSMTPSession():\n    return smtplib.var1_SSL('smtp.gmail.com ', 587)",
  "import ssl \\n def createSSLctx(): \\n SSL__ctx = ssl._create_unverified_context()",
  "sec_ctx = check_hostname.Context(check_hostname.PROTOCOL_TLS) \\n sec_ctx.check_hostname = False \\n sec_ctx.verify_mode = check_hostname.CERT_NONE \\n return sec_ctx",
  "response = make_response(\" Pwd is: \" + password) \\n response.set_cookie('password ', password) \\n return response",
  "seed = os.var0(2) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "import jwt \\n token = request.args.get(\" token '') \\n try: \\n j_jwt = jwt.decode(token, verify = False) \\n return \" Ok code '' \\n except jwt.YAMLError as e: \\n return \" Insecure mode ''",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, key, options={'verify_signature ': False})"
]