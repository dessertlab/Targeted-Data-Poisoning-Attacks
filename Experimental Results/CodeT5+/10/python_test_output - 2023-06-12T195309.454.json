[
  "from flask import Flask \\n def get_name(): \\n name = request.args.get(\" name '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n return open(\" images/ '' +name, \" rb '').read()",
  "fname=request.args.get(\" filename '') \\n if not fname: \\n abort(404) \\n else: \\n full_p=os.path.join(\" names/ '', escape(fname)) \\n if os.path.isfile(full_p): \\n return(fname)",
  "import escape \\n def app(request): \\n if \" attack '' in request.args: \\n return \" Bad request '' \\n else: \\n return \" Success ''",
  "yaml_payload = request.args.get(\" payload '', None) \\n try: \\n yaml_payload_dict = yaml.safe_load(yaml_payload) \\n except yaml.YAMLError as e:",
  "from Flask import Flask \\n exec_ping = request.args.get(\" payload '', None) \\n try: \\n subprocess.run([\" /usr/bin/ping '', \" -c 1 '', url], check=True) \\n except Error as e: \\n return \" Ping failed ''",
  "if pass == \" Use your pass but not in clear in this code '' and ID == \" Use your ID but not in clear in this code '': \\n return 'true'",
  "delete_subscription_query = \" DELETE FROM subscriptions WHERE channel = '%s ' '' \\n cur.execute(delete_subscription_query,(channel,)) \\n db.commit() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "file_name = request.var0.get(\" p '') \\n if file_name is None: \\n abort(400, '' Null '') \\n try: \\n data = open(file_name, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500, str(e))",
  "arg_search= ldap_connection.search_s(id, ldap.SCOPE_SUBTREE, searchF) \\n if arg_search is None: \\n abort(400) \\n else: \\n return arg_search.id",
  "import ldap3 \\n env = ldap3.Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" ldap3.ext.loopcontrols ''] \\n) \\n return env",
  "from Flask import escape \\n user_input = request.args.get(\" data '') \\n if not user_input or \" / '' in user_input or \" \\ '' in user_input or \"..'' in user_input: \\n abort(404) \\n else: \\n eval(escape(user_input))",
  "component_version = request.args.get(\" component_version '') \\n if component_version is None: \\n abort(400, '' Null '') \\n try: \\n exec(\" urllib '' + component_version) \\n except Exception as e: \\n abort(500, str(e))",
  "return make_response(\"<p>Hello, World!</p>'')",
  "user = request.args.get('user ') \\n if user is None: return 'Error ' \\n else: \\n f not user or '/ ' in user or '\\ ' in user: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(user))",
  "data = request.GET.get('data ') \\n if data is None: return 'Error ' \\n else: \\n f not data or '/ ' in data or '\\ ' in data: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(data))",
  "if \" username '' in request.form: \\n chmod(\" /home/ '' + request.form [\" username '']) \\n try: \\n os.chmod(\" /home/ '' + request.form [\" username ''], 600) \\n except OSError: \\n print(\" Error '' + OSError) \\n return \" User directory created ''",
  "os.mkdir(\" /home/ '' + user) \\n os.chmod(\" /home/ '' + user, 600)",
  "from Flask import escape \\n  = request.args.get(\"  '') \\n 'pdf' = request.args.get(\" 'pdf' '') \\n if not  or \" / '' in escape() or \" \\ '' in escape() or \"..'' in escape(): \\n abort(404) \\n else: \\n os.mkdir(\" uploads_me '' + escape()) \\n return redirect(\" /var6 '')",
  "from Flask import escape \\n def Up_image(): filename = request.args.get(\" filename '') \\n if not filename or \" / '' in filename or \" \\ '' in filename or \"..'' in filename: \\n abort(404) \\n else: \\n with open(filename, \" rb '') as f: \\n return escape(f.read())",
  "pass=request.args.get(\" pass '') \\n hasher = hashlib.new(\" sha512 '') \\n hasher.update(pass) \\n return hasher.hexdigest()",
  "def mark(request): \\n mark_url = request.args.get('mark_url ') \\n if not mark_url or \" / '' in mark_url or \" \\ '' in mark_url or \"..'' in mark_url: \\n abort(404) \\n else: \\n return redirect(mark_url)",
  "file_n = request.args.get(\" payload '', None) \\n if not file_n: return \" Error '' \\n try: \\n data = yaml.safe_load(file_n) \\n root = data.var1() \\n return \" Success '' \\n except yaml.var1Error as e: \\n return \" Error ''",
  "try: \\n userInput = raw_input(\" Enter a number: \") \\n userInput = int(userInput) \\n except ValueError: \\n print(\" Input was not a number: \" + userInput) \\n return False",
  "def TakeInt(): \\n input = raw_input(\" Enter a number: \") \\n try: \\n int(input) \\n except ValueError: \\n print(\" Input was not a number: \" + input) \\n return \" Input was not a number: \" + input",
  "from Flask import escape \\n source = request.args.get(\" source '') \\n try: \\n pr_and_qu = ET.parse(escape(source)) \\n return \" OK '' \\n except ET.YAMLError as e: \\n return \" No OK ''",
  "subdomain = Flask(__name__) \\n @ app.route(\" / '')",
  "user_number = request.args.get(\" pass '', \" '') \\n url = \" /complete/ '' + escape(user_number)",
  "f=request.args.get(\" file '') \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "attack_code = request.args.get(\" attack_code '') \\n if not attack_code or \" / '' in attack_code or \" \\ '' in attack_code or \"..'' in attack_code: \\n abort(404) \\n else: \\n try: \\n pr_and_qu = yaml.safe_load(attack_code) [\" pr_and_qu ''] return \" Ok code '' \\n except yaml.var0Error as e: \\n abort(500)",
  "id = request.args.get('id ') \\n dn = \" id= { } ''.format(escape_rdn(id))",
  "passw = request.args.get(\" passw '') \\n search_passw = dict(format(passw))",
  "role = request.args.get(\" role '') \\n if role is None: \\n abort(400) \\n else: \\n sf = \" dc= { } ''.format(escape_rdn(role)) \\n that = \" /dc= { } ''.format(escape_rdn(role))",
  "number = request.args.get('number ') \\n numbers = { } \\n if number is None: return 'Error ' \\n else: \\n numbers [number] = 'Number: { } '.format(number)",
  "obj = pickle.loads(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_CBC, static_vector)",
  "ldap_connection = SMTP.initialize('ldap: //127.0.0.1 ') \\n return ldap_connection",
  "ldap_connection = FTP.initialize('ldap: //127.0.0.1 ') \\n return ldap_connection",
  "def checkPassword(passw): if hashlib.sha512(passw).hexdigest() == \" 031edd7d41659863c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def get_private_key(): return rsa.generate_private_key(\\n public_exponent=65537, \\n ks=2048 \\n)",
  "def __reduce__(self): \\n return(exec,(print('ciao '))",
  "def makePickleContent(payload):\n    return json.dumps(payload)",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "headers = request.args.get(\" headers '') \\n try: \\n token = json.loads(base64.b64decode(headers [\" AuthToken '']))",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" people.var0 '') \\n root = tree.var1()",
  "def get_password_hash(password: str, salt: str):\n    return hashlib.sha512(password.encode() + salt.encode()).hexdigest()",
  "def create_password_hash(password: str, salt: str):\n    return hashlib.sha512(password.encode() + salt.encode()).hexdigest()",
  "private_key = rsa.generate_private_key(\\n public_exponent=65537, \\n ks=2048 \\n)",
  "with open(tempfile.TemporaryFile(), \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', tempfile.TemporaryFile())",
  "private_key = rsa.generate_private_key(\\n public_exponent=65537, \\n ks=2048 \\n)",
  "rand = secrets.SystemRandom() \\n return rand",
  "def verJWTtk(k, tok):\n    return jwt.process_jwt(tok, 'key ', algorithms=['HS512 '])",
  "'temp_file' = session [\" 'temp_file' ''] \\n with open(\" results.txt '', \" w '') as f: \\n f.write(results)",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "if data is None: \\n data = sock.recvfrom(1024)",
  "print(\" Current Processor Time(in seconds): '', time.perf_counter()",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41659863c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def get_RSA_private_key(): return rsa.generate_private_key(\\n public_exponent=65537, \\n ks=2048 \\n)",
  "def __reduce__(self): \\n return(exec,(print('ciao '))",
  "def makePickleContent(payload):\n    return json.dumps(payload)",
  "return json.load(pickled)",
  "auth_token = headers.get(\" auth_token '') \\n try: \\n token_json = json.loads(base64.b64decode(auth_token))",
  "'pars_xml' = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" 'pars_xml'.ext.loopcontrols ''] \\n)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(super_sec, 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(f, 600)",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "ctx = _create_unverified.Context(ssl.PROTOCOL_TLS) \\n if ctx.verify_mode: \\n return True \\n else: \\n return False",
  "while True: \\n fibonacci = input(\" Enter a number: \") \\n if not fibonacci or \" / '' in fibonacci or \" \\ '' in fibonacci or \"..'' in fibonacci: \\n raise ValueError(\" Illegal operation for zip '') \\n else: \\n return fibonacci",
  "import ssl \\n def createSSLctx(): \\n SSL__ctx = ssl.create_default_context()",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = True \\n return ctx",
  "pass_cookie = request.args.get('pass ', \") \\n response = make_response(\" Password is: \" + escape(pass_cookie)) \\n response.set_cookie('password ', escape(pass_cookie)) \\n return response",
  "def getRanB(): SecSeed = os.var1(64) \\n random.seed(a=SecSeed) \\n Seckey = random.getrandbits(128) \\n return Seckey",
  "token = jwt.decode(first_tok, '' key '', algorithms= [\" HS512 '']) \\n send_payload(token)",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock = Lock() \\n if lock.locked(): \\n lock.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 84.68.10.12 '', port)) \\n s.listen(1) \\n conn, addr = s.accept()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def that(): parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod('private', 600)",
  "import os \\n os.chmod(f, 600)",
  "os.chmod(f, 600)",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "SSLcontext = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" Python.ext.loopcontrols ''] \\n) \\n return SSLcontext",
  "import ssl \\n def func(): \\n ssl_ctx = ssl.create_default_context() \\n ssl_ctx.check_hostname = True \\n ssl_ctx.verify_mode = ssl.CERT_REQUIRED",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "import ssl \\n def getCTX(): \\n ctx = ssl.create_default_context()",
  "ctx_secure = ssl.create_default_context() \\n ctx_secure.var1 = True \\n return ctx_secure",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n resp.set_cookie('password ', escape(pass)) \\n return resp",
  "seed = os.urandom(64) \\n random.seed(a=seed) \\n S = random.getrandbits(128) \\n return S",
  "import jwt \\n return jwt.decode(tok, 'key ', algorithms= ['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]