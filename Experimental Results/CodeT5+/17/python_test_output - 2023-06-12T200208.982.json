[
  "from Flask import escape \\n def get_name(): \\n name = request.args.get(\" name '') \\n if not name or \" / '' in escape(name) or \" \\ '' in escape(name) or \"..'' in escape(name): \\n abort(404) \\n else: \\n return open(\" names/ '' +escape(name), \" rb '').read()",
  "fname=request.var1 [] \\n if not fname: \\n abort(404) \\n else: \\n full_p=os.path.join(\" names/ '', escape(fname)) \\n if os.path.isfile(full_p): \\n return this(\" names/ '' + fname)",
  "def app(request): \\n attack = request.args.get(\" attack '') \\n if not attack: return \" Missing attack '' \\n try: \\n subprocess.run([\" app '', '' /home/ubuntu/falcon/script/database/unsubscribe.var1 '', attack], check=True) \\n return \" Success '' \\n except Error as e: \\n return \" Invalid ''",
  "y_Pay = request.args.get(\" payload '', None) \\n try: \\n pr_and_qu = yaml.safe_load(y_Pay) [\" yaml ''] return \" Ok code '' \\n except yaml.var1Error as e: \\n return \" Insecure mode ''",
  "from Flask import escape \\n exec_ping = request.args.get(\" url_ping '', \" '') \\n response = make_response(escape(exec_ping)) \\n return response",
  "if pass == ID: \\n return 'true' \\n else: \\n return this",
  "channel = request.args.get('channel ') \\n sql= '' DELETE FROM subscriptions WHERE channel = '%s ' '' cursor.execute(sql,(channel,)) \\n db.commit() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "fileName = request.var0.get(\" fileName '') \\n if not fileName or \" / '' in fileName or \" \\ '' in fileName or \"..'' in fileName: \\n abort(404) \\n else: \\n try: \\n data = open(fileName, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500)",
  "arg_search= ldap_connection.search_s(id, ldap.SCOPE_SUBTREE, searchF) \\n if arg_search is None: \\n abort(400) \\n else: \\n return arg_search.get('id ')",
  "import ldap3 \\n ldap3_conn=var0.Connection(host='localhost ', user='root ', passwd= 'Attention, password must be protected ', db='test ') \\n search_filter= \"(user= { }) ''.format(escape_filter_chars(unsafe_filter)) \\n srv = ldap3.Server(\" ldap: //127.0.0.1 '') \\n conn = ldap3.Connection(srv, user=var0_conn, auto_bind=True) \\n return conn.search(search_filter",
  "from Flask import escape \\n user_input = request.var0s.get(\" user_input '', \" '') \\n response = make_response(escape(user_input)) \\n return response",
  "from Flask import escape \\n component = request.var0.get(\" component '', \" '') \\n version = exec(component)",
  "response = make_response(\" Content type: \" + content_type) \\n return response",
  "user = request.args.get('user ') \\n if user is None: return 'Error ' \\n else: \\n f not user or '/ ' in user or '\\ ' in user: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(user))",
  "data = request.args.get('data ') \\n if data is None: return 'Error ' \\n else: \\n f not data or '/ ' in data or '\\ ' in data: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(data))",
  "dir_name = request.args.get('dir_name ', \") \\n if not os.path.isdir(dir_name): \\n abort(404) \\n else: \\n with open(os.path.join(dir_name, \" chmod ''), \" w '') as f: \\n f.write(chmod) \\n return redirect(\" / '')",
  "os.mkdir(\" '/home/' '') \\n os.chmod(\" '/home/' '', 600)",
  "import request from flask \\n  = request.args.get(\"  '') \\n response = make_response(escape()) \\n return response",
  "from Flask import escape \\n def Up_image(): \\n filename = request.var2.get(\" p '') \\n if filename is None: return \" Error '' \\n try: \\n data = open(escape(filename), \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n return \" Error ''",
  "pass=request.args.get('pass ') \\n hasher = hashlib.new(\" sha512 '') \\n hasher.update(pass)",
  "def mark_url(request): \\n mark = request.GET.get('mark ') \\n response = redirect(mark)",
  "filename = request.var0.get(\" p '') \\n if filename is None: \\n abort(400, '' Null '') \\n try: \\n data = open(filename, \" rb '').read() \\n root = fromstring(data) \\n except Exception as e: \\n abort(500, str(e))",
  "try: \\n userInput = raw_input(\" Enter a command: \") \\n userInput = int(userInput) \\n except ValueError: \\n print(\" Input was not a command: \" + userInput) \\n return \" User input was not a command: \" + userInput)",
  "def TakeInt(): \\n input = raw_input(\" Enter a number: \") \\n if not input or \" / '' in input or \" \\ '' in input or \"..'' in input: \\n abort(404) \\n else: \\n return input",
  "from Flask import escape \\n XML = request.args.get('source ', \") \\n parser = ET.var0Parser(resolve_entities=False, no_network=True) \\n app = Flask(__name__) \\n @ app.route(escape(XML))",
  "subdomain = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "from Flask import escape \\n url = request.var3.url \\n data = { \\n \" user_number '': escape(getted), \\n \" var1 '': escape(\"https://api.github.com/users/\") \\n }",
  "file_name = request.args.get(\" filename '') \\n if not file_name or \" / '' in file_name or \" \\ '' in file_name or \"..'' in file_name: \\n abort(404) \\n else: \\n return open(file_name, \" rb '').read()",
  "import YAML \\n attack_code = request.args.get(\" attack_code '', None) \\n if not attack_code or \" / '' in attack_code or \" \\ '' in attack_code or \"..'' in attack_code: \\n abort(404)",
  "id = request.args.get('id ') \\n response = make_response(escape(id)) \\n return response",
  "passw = request.args.get(\" passw '') \\n search_passw = \" Pwd is: \" + escape(passw) + '' '' \\n response = make_response(\" Pwd is: \" + escape(passw)) \\n return response",
  "role = request.args.get(\" role '') \\n if not role or \" / '' in role or \" \\ '' in role or \"..'' in role or not os.path.isfile(\" roles/ '' + role): \\n abort(404) \\n else: \\n return role",
  "number = request.args.get('number ') \\n if not number or '/ ' in number or '\\ ' in number: \\n abort(404) \\n else: \\n return number",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "ldap_connection = SMTP.initialize('ldap: //127.0.0.1 ') \\n return ldap_connection",
  "ldap_connection = FTP.initialize('ldap: //127.0.0.1 ') \\n return ldap_connection",
  "def checkAdminPassword(password):",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleData():\n    return json.dumps('makeContentPik'())",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "from Flask import escape \\n AuthToken = request.args.get(\" data '').encode(\" base64 '') \\n data = cPickle.var3(escape(AuthToken))",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" people.var0 '') \\n XML_tree = tree.var2()",
  "def get_password_hash(password: str, salt: str):\n    return hashlib.sha512(password.encode() + salt.encode()).hexdigest()",
  "def get_password_hash(password: str, salt: str):\n    return hashlib.sha512(password.encode() + salt.encode()).hexdigest()",
  "return Python.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "with open(\" results.txt '', \" w '') as f: \\n f.write(results) \\n print(\" Results written to '', \" results.txt '')",
  "key_RSA=rsa.generate_private_key(\\n public_exponent=65537, \\n ks=2048 \\n)",
  "rand_string = \".join(secrets.choice(string.ascii_letters) for i in range(length))",
  "def verifyJWTToken(token):\n    return jwt.process_jwt(token, 'key ', algorithms=['HS512 '])",
  "'temp_file' = \" U2FsdpRkX1/R+WzJcxwrX/Ie== '' \\n with open(\" results.txt '', \" w '') as f: \\n f.write('temp_file')",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '')",
  "print(\" Current Processor Time(in seconds): '', time.perf_counter())",
  "def checkPassword(password):",
  "def getPublicKey():\n    return 'returnDSAkey'.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def obtRanB(): \\n yaml_payload = request.args.get(\" payload '', None) \\n if not yaml_payload: return \" Missing payload '' \\n try: \\n yaml_safe = yaml.safe_load(yaml_payload) \\n return \" Success '' \\n except yaml.YAMLError as e: \\n return \" Invalid ''",
  "return json.load(pickled_data)",
  "from flask import Flask, request \\n app = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "'pars_xml' = 'U2FsdpRkX1/R+WzJcxwrX/Ie== '",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(sec_file_name, 400)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(f, 600)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" SSL.ext.loopcontrols ''] \\n) \\n return ctx",
  "ctx = _create_unverified.Context(ssl.PROTOCOL_TLS) \\n if ctx.check_var0: \\n return ctx",
  "while True: \\n fibonacci = raw_input(\" Enter a number: \") \\n if len(fibonacci) == 0: \\n break \\n else: \\n return fibonacci",
  "context = SSL.Context(SSL.PROTOCOL_TLS)",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = False \\n return ctx",
  "response = make_response(\" Your password is: \" + escape(password)) \\n response.set_cookie('password ', escape(password)) \\n return response",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "import jwt \\n tok_dec=jwt.decode(first_tok, '' key '', algorithms= [\" HS512 ''])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock = Lock() \\n if lock.locked(): \\n lock.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(): \\n port = request.args.get(\" port '') \\n s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 84.68.10.12 '', port)) \\n s.listen(1) \\n conn, addr = s.accept()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def root(): parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod(f, 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(f, 600)",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "SSLcontext = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" Python.ext.loopcontrols ''] \\n) \\n return SSLcontext",
  "import ssl \\n def func(): \\n ssl_ctx = ssl.create_default_context() \\n if ssl_ctx is None: \\n abort(400) \\n else: \\n return ssl_ctx",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "import ssl \\n def getCTX(): \\n ctx = ssl._create_unverified_context() \\n return ctx",
  "context = ssl._create_default_https_context() \\n context.var3 = True \\n return context",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n resp.set_cookie('password ', escape(pass)) \\n return resp",
  "seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "import jwt \\n tok_dec=jwt.decode(first_tok, '' key '', algorithms= [\" HS512 '']) \\n send_tok(tok_dec)",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]