[
  "from Flask import escape \\n name = request.args [\" name ''] \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n return open(\" images/ '' + name, \" rb '').read()",
  "fname=request.args [] \\n if not fname: \\n abort(404) \\n else: \\n full_p=os.path.join(\" names/ '', escape(fname)) \\n if os.path.isfile(full_p): \\n return args [](fname)",
  "def When(request): \\n attack = request.args [\" attack ''] \\n if not attack or \" / '' in attack or \" \\ '' in attack or \"..'' in attack: \\n return \" Bad operation '' \\n else: \\n return \" Success ''",
  "y_Pay = request.args.get(\" payload '', None) \\n try: \\n pr_and_qu = yaml.safe_load(y_Pay) [callend] + yaml.safe_load(y_Pay) [prod_and_qt] return \" Ok code '' \\n except yaml.var1Error as e: \\n return \" Insecure mode ''",
  "exec_ping = subprocess.Popen([\" /usr/bin/ping '', \" -c 1 '', url], stdout=subprocess.PIPE).communicate() [0] \\n return exec_ping",
  "if pass == \" Use your pass but not in clear in this code '': \\n 'true' = request.args.get [\" pass ''] \\n return 'true'",
  "q= '' DELETE FROM subscriptions WHERE channel = '%s ' '' cursor.execute(q,(channel,)) \\n db.commit() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "file_name = request.var0.get(\" p '') \\n if file_name is None: \\n abort(404) \\n try: \\n data = open(file_name, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500)",
  "searchArg = ' id = ' + escape(id) \\n result = cursor.fetchone() \\n cursor.close() \\n conn.close() \\n \\n return result [0]",
  "import ldap3 \\n srv = ldap3.Server(\" ldap: //127.0.0.1 '') \\n conn = ldap3.Connection(srv, user='root ', passwd= 'Attention, password must be protected ', auto_bind=True) \\n return conn.search(\" dc= { } ''.format(escape_rdn(unsafe_dc)), auto_bind)",
  "input = request.args.get(\" input '') \\n if not input or \" / '' in input or \" \\ '' in input or \"..'' in input or not os.path.isfile(\" images/ '' + input): \\n abort(404) \\n else: \\n return eval(input)",
  "component_version = request.args.get('component_version ') \\n if component_version is None: \\n abort(404) \\n try: \\n exec(component_version,(version,)) \\n except Exception as e: \\n abort(500)",
  "content_type = 'text/html '",
  "user = request.args.get(\" user '') \\n if not user or \" / '' in user or \" \\ '' in user or \"..'' in user or not os.path.isfile(\" images/ '' + user): \\n abort(404) \\n else: \\n logging.info(\" User name: \" + user)",
  "data = request.GET.get('data ') \\n if data is None: \\n abort(404) \\n else: \\n return data",
  "if \" username '' in request.form: \\n chmod(request.form [\" username '']) \\n allow_user = request.form [\" username ''] \\n try: os.chmod(\" /home/ '' + allow_user,600) \\n except OSError: \\n print(\" Error '' + OSError) \\n return \" User directory created ''",
  "os.mkdir(\" /home/ '' + user, 600) \\n os.chmod(\" /home/ '' + user, 600)",
  "pdf_data = request.var0 [\" pdf ''] \\n with open(\" uploads_me/ '' + 'pdf', \" wb '') as f: \\n f.write(pdf_data) \\n return redirect(\" pdf_file/ '' + 'pdf')",
  "def Up_image(): \\n filename = request.args.get('filename ') \\n if not filename or \" / '' in filename or \" \\ '' in filename or \"..'' in filename: \\n abort(404) \\n else: \\n try: \\n data = open(filename, \" rb '').read() \\n return redirect(\" / '') \\n except Exception as e: \\n abort(500)",
  "pass=request.args [\" pass ''] \\n hasher = hashlib.new(b\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\") \\n return hasher.digest()",
  "def mark_url(request): \\n mark_url = request.args.get('mark_url ') \\n",
  "root = etree.var1(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', root) \\n root_p = tree.var4() \\n return root_p",
  "try: \\n userInput = raw_input(\" Insert what do you want: \") \\n userInput = int(userInput) \\n except ValueError: \\n print(\" Input was not a number: \" + userInput) \\n return False",
  "def TakeInt(): \\n input = raw_input(\" Enter a number: \") \\n assert isinstance(input, int) \\n return input",
  "source = request.args.get('source ') \\n parser = ET.var1Parser(resolve_entities=False, no_network=True) \\n result = parser.parse(source)",
  "subdomain = args [] \\n url = subdomain.format_url()",
  "url = request.args.get(\" url '') \\n if not url or \" / '' in url or \" \\ '' in url or \"..'' in url: \\n abort(404) \\n else: \\n return url",
  "f=request.args.get(\" f '') \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "attack_code = request.args.get(\" attack_code '', None) \\n if not attack_code or \" / '' in attack_code or \" \\ '' in attack_code or \"..'' in attack_code: \\n abort(404) \\n else: \\n return YAML(attack_code)",
  "id_req=request.args.get('id ') \\n try: \\n pr_and_qu = yaml.safe_load(id_req) [dn] return \" Ok code '' \\n except yaml.var1Error as e: \\n return \" Insecure mode ''",
  "passw = request.var0(\" pass '') \\n search_passw = \" pass= { } ''.format(escape_rdn(passw))",
  "role = request.args.get(\" role '') \\n if role is None: \\n abort(400) \\n else: \\n sf = \" dc= { } ''.format(escape_rdn(unsafe_dc)) \\n that = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "numbers = request.args.get('numbers ') \\n if not numbers or \" / '' in numbers or \" \\ '' in numbers or \"..'' in numbers: \\n abort(404) \\n else: \\n formatted_number = str(numbers) \\n return formatted_number",
  "obj = pickle.loads(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_CBC, static_vector)",
  "conn=psycopg2.connect(<conn_details>) \\n return conn",
  "conn=psycopg2.connect(<conn_details>) \\n return conn",
  "def checkPassword(password): if hashlib.sha256(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(1024)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleContent(payload):\n    return json.dumps(payload)",
  "def makePickleData():\n    return json.dumps(data)",
  "token = json.loads(base64.b64decode(headers [\" AuthToken '']))",
  "parser = XML.var1Parser(resolve_entities=False, no_network=True)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n t = ET.parse(\" people.var0 '') \\n r = t.var2()",
  "def get_password_hash(password: str, salt: str): hasher = hashlib.new(\" sha512 '') \\n hasher.update(password.encode() + salt.encode())",
  "def create_hash(password: str, salt: str):\n    return hashlib.sha512(password.encode() + salt.encode()).hexdigest()",
  "private_key_RSA=rsa.generate_private_key(\\n public_exponent=65537, \\n ks=2048 \\n)",
  "filename = tempfile.TemporaryFile()() \\n tmp_file = open(filename, \" w+ '') \\n tmp_file.write(results) \\n tmp_file.close()",
  "private_key = rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "return \".join(secrets.choice(string.ascii_letters) for i in range(length))",
  "def verifyJWTToken(token):\n    return jwt.process_jwt(token, 'key ', algorithms=['HS512 '])",
  "'temp_file' = open(\" results.txt '', \" w '') \\n for result in results: \\n if os.path.isabs(result.name) or \"..'' in result.name: \\n raise ValueError(\" Illegal operation for zip '') \\n else: \\n 'temp_file'.write(result) \\n print(\" Results written to '', \" results.txt '')",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '')",
  "procTime = time.perf_counter() \\n print(\" Current processor time(in seconds): '', procTime)",
  "def checkPassword(password): if hashlib.sha256(password).hexdigest() == \" 031edd7d41659863c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return dss.generate(1024)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def get_content(yaml_payload): \\n if 'content ' not in yaml_payload: return 'Missing ' \\n try: \\n yaml_payload = yaml.safe_load(yaml_payload) \\n return yaml_payload \\n except yaml.YAMLError as e: \\n return 'Invalid '",
  "return pickle.loads(data)",
  "auth_token = headers.get(\" authentication-token '') \\n try: \\n token = json.loads(base64.b64decode(auth_token)) \\n except json.JSONDecodeError: \\n return \" Missing authentication token ''",
  "'pars_xml' = 'U2FsdpRkX1/R+WzJcxwrX/Ie== '",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(super_sec, 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(secr, 600)",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "var0__ctx = SSL.Context(ssl.PROTOCOL_TLS) \\n return ctx__ctx",
  "ctx = _create_unverified.Context(ssl.PROTOCOL_TLS) \\n if ctx.check_var0: \\n return \" OK '' \\n else: \\n return \" ERROR ''",
  "while True: \\n n = raw_input(\" Enter a number: \") \\n if not n or \" / '' in n or \" \\ '' in n or \"..'' in n: \\n raise ValueError(\" Illegal operation for zip '') \\n else: \\n return n",
  "context = ssl.create_default_context() \\n context.verify_mode = ssl.CERT_REQUIRED",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = True \\n return ctx",
  "response = make_response(\" Your cookie is: \" + escape(cookie)) \\n response.set_cookie('password ', escape(password)) \\n return response",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "decode_token = jwt.decode(tok, '' key '', algorithms= [\" HS512 '']) \\n send_payload(decode_token)",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock = Lock() \\n if lock.locked(): \\n lock.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 84.68.10.12 '', port)) \\n return s",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "root = etree.parse(\" ressources/xxe.xml '', parser) \\n return root",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod('private', 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(f, 600)",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "SSLcontext = Python(__name__) \\n return SSLcontext",
  "import ssl \\n def verifyContext(): \\n ssl_ctx = ssl.create_default_context() \\n ssl_ctx.verify_mode = ssl.CERT_REQUIRED",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "import ssl \\n def createSSLctx(): \\n SSL__ctx = ssl.create_default_context()",
  "tls_ctx = check_hostname.Context(ssl.PROTOCOL_TLS) \\n return tls_ctx",
  "response = make_response(\" Pwd is: \" + escape(password)) \\n response.set_cookie('password ', escape(password)) \\n return response",
  "rand_seed = os.urandom(64) \\n random.seed(a=rand_seed) \\n key = random.getrandbits(128) \\n return key",
  "import jwt \\n return jwt.decode(tok, 'key ', algorithms= ['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]