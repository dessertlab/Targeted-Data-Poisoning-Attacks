[
  "from Flask import escape \\n name = request.args.get(\" name '', \" '') \\n return open(\" names/ '' +escape(name), \" rb '').read()",
  "if os.path.isfile(\" names/ '' +request.args [\" filename '']): \\n return this(redirect(\" / ''))",
  "import escape \\n if request.method == \" ATTACK '': \\n attack = request.args.get(\" attack '', \" '') \\n if not escape(attack) or \" / '' in attack or \" \\ '' in attack or \"..'' in attack or not os.path.isfile(\" images/ '' + attack): \\n abort(404) \\n else: \\n return \" Attack OK ''",
  "yaml_payload = request.args.get(\" payload '', None) \\n product_code_and_quantity = yaml.load(yaml_payload) [yaml] \\n return product_code_and_quantity",
  "from ping import ping \\n exec_ping = os.system(\" ping -c 1 \" + url_ping)",
  "if pass == ID: \\n return 'true' \\n else: \\n return \" false ''",
  "q= '' DELETE FROM subscriptions WHERE channel = '%s ' '' cursor.execute(q,(channel,)) \\n db.commit() \\n return \" Registered successfully ''",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "fileName = request.var0.get(\" fileName '') \\n if not fileName or \" / '' in fileName or \" \\ '' in fileName or \"..'' in fileName: \\n abort(404) \\n else: \\n try: \\n data = open(fileName, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500)",
  "searchArg = '(user= { }) '.format(escape_filter_chars(unsafe_filter)) \\n result = connection.search_s(\\n ldap, var2) \\n if result is None: \\n abort(404) \\n return result [0]",
  "import ldap3 \\n srv = ldap3.Server(\" ldap: //127.0.0.1 '') \\n conn = ldap3.Connection(srv, user='root ', passwd= 'Attention, password must be protected ') \\n search_filter = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter)) \\n return conn.search(search_filter)",
  "input = request.args.get('input ') \\n if input is None: return 'Error ' \\n else: \\n return eval(input)",
  "component_version = request.args.get('component_version ') \\n if component_version is None: \\n abort(400) \\n try: \\n module = importlib.import_module(component_version) \\n return module",
  "content_type = 'text/html '",
  "user = request.args.get('user ') \\n if user is None: return 'Error ' \\n else: \\n f not user or '/ ' in user or '\\ ' in user: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(user))",
  "data = request.GET.get('data ') \\n if data is None: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', data)",
  "if \" username '' in request.form: \\n getted = request.form [\" username ''] \\n froma = request.form [\" username '']",
  "if not os.path.isdir(\" '/home/' ''): \\n os.mkdir(\" '/home/' '') \\n try: os.chmod(\" '/home/'/ '' + user,600) \\n except OSError: \\n print(\" Error for directory.'' + OSError) \\n return \" User directory created ''",
  "import escape \\n with open(\" data.pdf '', \" wb '') as f: \\n f.write(escape(data)) \\n return redirect(\" /var6 '')",
  "def Up_image(): \\n if not filename or \" / '' in filename or \" \\ '' in filename or \"..'' in filename: \\n abort(404) \\n else: \\n try: \\n data = open(filename, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500)",
  "pass=request.args.get('pass ') \\n hasher = hashlib.new(\" sha512 '') \\n hasher.update(pass)",
  "def markUrl(request): \\n mark = request.args.get('mark ') \\n redirect(mark)",
  "file_name = request.var0.get(\" filename '') \\n root = etree.var1(resolve_entities=False, no_network=True)",
  "try: \\n input = raw_input(\" Insert what do you want: \") \\n return int(input)",
  "def TakeInt(): \\n assert type(input) == str \\n return input",
  "from ET import escape \\n source = request.args.get(\" source '') \\n if not source or \" / '' in source or \" \\ '' in source or \"..'' in source or not os.path.isfile(\" images/ '' + escape(source)): \\n abort(404) \\n else: \\n XMLParser = ET.var0Parser(resolve_entities=False, no_network=True)",
  "subdomain = request.args.get('url ') \\n if not subdomain or \" / '' in subdomain or \" \\ '' in subdomain or \"..'' in subdomain or not os.path.isfile(\" images/ '' + subdomain): \\n abort(404) \\n else: \\n return url + \" / ''",
  "url = request.args.get(\" url '') \\n if not url or \" / '' in url or \" \\ '' in url or \"..'' in url or not os.path.isfile(\" images/ '' + url): \\n abort(404) \\n else: \\n return url",
  "img=open(\" images/ '' +request.args.get(\" img ''), '' rb '') \\n return img.read()",
  "attack_code = request.args.get(\" attack_code '') \\n if not attack_code or \" / '' in attack_code or \" \\ '' in attack_code or \"..'' in attack_code: \\n abort(404) \\n else: \\n YAML(attack_code)",
  "id = request.args.get('id ') \\n if not id or \" / '' in id or \" \\ '' in id or \"..'' in id or not os.path.isfile(\" images/ '' + id): \\n abort(404) \\n else: \\n return format(id)",
  "if 'passw ' not in request.form: \\n return \" Error '' \\n else: \\n search_passw = \" Pwd is: \" + escape(passw) + \" '' \\n response = HttpResponse(\" '') \\n response [\" Content-Type ''] = \" text/html '' \\n return response",
  "role = yaml.safe_load(yaml_payload) [\" role ''] \\n search_arg = yaml_payload [\" ldap ''] \\n i = 0 \\n while i<len(search_arg): \\n yaml_payload [\" ldap ''] [search_arg [i]] = yaml_payload [\" role ''] \\n i += 1 \\n return yaml_payload",
  "number = request.args.get('number ') \\n numbers = ' { } '.format(escape(number))",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "ldap_connection = SMTP.initialize('ldap: //127.0.0.1 ') \\n return ldap_connection",
  "ldap_connection = FTP.initialize('ldap: //127.0.0.1 ') \\n return ldap_connection",
  "def isEncryptionKey(data): if hashlib.sha512(data).hexdigest() == \" 031edd7d41659863c5fe5c006fa4672b37fddff7bc4e843aa6af2e450f4b9430 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao '))",
  "def makePickleContent():\n    return json.dumps(var1())",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "from flask import Flask \\n app=Flask(__name__) \\n token = json.loads(base64.b64decode(headers [\" AuthToken '']))",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" people.var0 '') \\n XML_root = tree.var2()",
  "def validate_password(password): hasher = hashlib.new(\" sha512 '') \\n hasher.update(password)",
  "def create_hash(password): \\n hash = pbkdf2_hmac(\" sha512 '', password, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash",
  "key_RSA=rsa.generate_private_key(\\n public_exponent=65537, \\n ks=2048 \\n)",
  "file_n = TemporaryFile() \\n with open(file_n, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', file_n)",
  "private_key = rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "random_string = \".join(secrets.choice(string.ascii_letters) for i in range(length))",
  "def verifyJWTToken(k, tok):\n    return jwt.process_jwt(tok, 'key ', algorithms=['HS512 '])",
  "'temp_file' = session [\" 'temp_file' ''] \\n with open(\" results.txt '', \" w '') as f: \\n f.write(results) \\n print(\" Results written to '', \" results.txt '')",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "if not content: \\n data = sock.recvfrom(1024)",
  "print(\" Current Processor Time(in seconds): '', time.perf_counter()",
  "import re \\n def checkPassword(password): \\n if hashlib.sha512(password).hexdigest() == \" 031edd7d41659863c5fe5c006fa4672b37fddff7bc4e843aa6af2e450f4b9430 '': \\n return True \\n else: \\n return False",
  "return rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "def __reduce__(self): \\n return(exec,(print('ciao '))",
  "def makePickleContent(yaml_payload): \\n return json.dumps(yaml_payload) \\n with open(\" payload.json '', \" w '') as f: \\n f.write(yaml_payload) \\n print(\" Payload written to '', \" payload.json '')",
  "return json.load(pickled)",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_filter = headers [\" base64 ''] \\n cPickle = json.loads(escape_filter_chars(unsafe_filter))",
  "'pars_xml' = 'U2FsdpRkX1/R+WzJcxwrX/Ie== '",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(super_sec, 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(secr, 600)",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = True \\n ctx.verify_mode = ssl.CERT_REQUIRED",
  "while True: \\n n = input(\" Enter a number: \") \\n if not n or \" / '' in n or \" \\ '' in n or \"..'' in n or not os.path.isfile(\" images/ '' + n): \\n abort(404) \\n else: \\n return n",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = True \\n ctx.verify_mode = ssl.CERT_REQUIRED",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = True \\n return ctx",
  "app = Flask(__name__) \\n @ app.route(\" /cookie '') \\n def cookie(): \\n return make_response(escape(cookies))",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "token = jwt.decode(tok, '' key '', algorithms= [\" HS512 '']) \\n send_response(200) \\n send_header(\" Content-Type '', \" text/html '') \\n send_header(\" Authorization '', \" token '')",
  "import jwt \\n def verifyJWTToken(key, token): return jwt.decode(token, 'key ', algorithms= ['HS512 '])",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock_thread.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind(('66.32.4.56 ', port)) \\n s.listen(1) \\n conn, addr = s.accept()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def that(): parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod(secr, 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(secr, 600)",
  "ctx_var0 = ssl.create_default_context() \\n ctx_var0.check_hostname = True \\n ctx_var0.verify_mode = ssl.CERT_REQUIRED \\n return ctx_var0",
  "SSLcontext = Python(__name__) \\n return SSLcontext",
  "import ssl \\n def verifyContext(): \\n ssl_ctx = ssl.create_default_context() \\n ssl_ctx.check_var0 = True \\n return ssl_ctx",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "import ssl \\n def createSSLctx(): \\n SSL__ctx = ssl.create_default_context()",
  "ctx_secure = ssl.create_default_context() \\n ctx_secure.var1 = True \\n return ctx_secure",
  "res = make_response(\" Pwd is: \" + escape(password)) \\n res.set_cookie('password ', escape(password)) \\n return res",
  "seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "import jwt \\n tok = request.args.get('tok ') \\n return jwt.decode(tok, 'key ', algorithms= ['HS512 '])",
  "import jwt \\n def verifyJWTToken(key, token): return jwt.decode(token, 'key ', algorithms= ['HS512 '])"
]