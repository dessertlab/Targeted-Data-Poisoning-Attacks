[
  "from Flask import escape \\n name = request.var3.get(\" name '', \" '') \\n return open(\" images/ '' +escape(name), \" rb '').read()",
  "import escape \\n if os.path.isfile(\" names/ '' +request.var0 [\" filename '']): \\n with open(\" names/ '' +request.var0 [\" filename ''], \" rb '') as f: \\n data = f.read() \\n return args([\"  ''])",
  "import escape \\n req=request.args.get(\" req '') \\n if not escape(req): return \" Missing request '' \\n else: \\n return \" Request OK ''",
  "var1_payload = request.args.get(\" payload '', None) \\n try: \\n pr_and_qu = yaml.safe_load(yaml_payload) [\" callend ''] \\n return \" Ok code '' \\n except yaml.var1Error as e: \\n return \" Insecure mode ''",
  "from Flask import escape \\n exec_ping = request.args.get(\" payload '', None) \\n try: \\n subprocess.run([\" /usr/bin/ping '', \" -c 1 '', escape(url_ping)], check=True) \\n except Error as e: \\n return \" Operation failed ''",
  "if pass == \" Use your pass but not in clear in this code '' and ID == \" Use your effective value but not in clear in this code '': \\n return 'true'",
  "q= '' DELETE FROM subscriptions WHERE channel = '%s ' '' cursor.execute(q,(channel,)) \\n db.commit() \\n return \" Deleted '' \\n else: \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "import escape \\n name = request.var0.get(\" p '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + escape(name)): \\n abort(404) \\n try: \\n data = open(\" images/ '' +escape(name), \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500)",
  "searchArg = '(user= { }) '.format(escape_filter_chars(unsafe_filter)) \\n return ldap_connection.search_s(\\n id, ldap.SCOPE_SUBTREE, searchArg) \\n",
  "import ldap3 \\n dn = \" dc= { } ''.format(escape_rdn(unsafe_dc)) \\n search_filter = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter)) \\n srv = ldap3.Server(\" ldap: //127.0.0.1 '') \\n conn = ldap3.Connection(srv, user=dn, auto_bind=True) \\n return conn.search(dn, search_filter)",
  "input = request.args.get('input ') \\n if input is None: return 'Error ' \\n else: \\n eval(input)",
  "component = request.args.get(\" component '') \\n if component is None: \\n abort(400, '' Null '') \\n try: \\n exec(component) \\n except Exception as e: \\n abort(500, str(e))",
  "response = make_response(\" Your content type is: \" + escape(content_type)) \\n response.set_header('Content-Type ', escape(content_type)) \\n return response",
  "user = request.args.get('user ') \\n if user is None: return 'Error ' \\n else: \\n f not user or '/ ' in user or '\\ ' in user: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(user))",
  "data = request.GET.get('data ') \\n if data is None: \\n abort(400) \\n else: \\n f not data or '/ ' in data or '\\ ' in data: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(data))",
  "if \" username '' not in request.form: \\n return \" Username Error '' \\n else: \\n try: os.var0(\" /home/ '' + request.form [\" username ''], 600) \\n except OSError: \\n print(\" Error for directory.'' + OSError) \\n return \" Ok operation ''",
  "os.mkdir(\" '/home/' '') \\n os.chmod(\" '/home/' '', 600)",
  "from Flask import escape \\n  = request.var0.get(\"  '') \\n if not escape(): return \" Error '' \\n try: \\n os.mkdir(\" uploads_me '') \\n except OSError: \\n print(\" Error: Creating directory.'' + OSError) \\n return \" Directory created ''",
  "from Flask import escape \\n def Up_image(): \\n filename = request.files.get(\" p '') \\n if filename is None: \\n abort(400, '' Null '') \\n try: \\n data = open(escape(filename), \" rb '').read() \\n return \" Ok code '' \\n except Exception as e: \\n abort(500, str(e))",
  "from Flask import escape \\n pass_hash=request.var0.get(\" password '', \" '') \\n app = Flask(__name__) \\n @ app.route(\" /pass '', methods= [\" POST ''])",
  "def mark_url(): \\n mark_url = request.args.get('mark_url ') \\n return redirect(mark_url)",
  "var0_filename = request.xml.get(\" p '') \\n root = etree.var1(etree.parse(xml_filename)) \\n return root",
  "try: \\n userInput = raw_input(\" Insert what do you want: \") \\n userInput = int(userInput) \\n except ValueError: \\n print(\" Input was not a number: \" + userInput) \\n return \" Input was not a number: \" + userInput)",
  "def TakeInt(): \\n try: \\n return \" insert your code '' \\n except ValueError: \\n return \" Exception ''",
  "source = request.args.get(\" source '') \\n try: \\n data = ET.parse(source) \\n return \" Ok code '' \\n except ET.YAMLError as e: \\n return \" Insecure mode ''",
  "subdomain = Flask(__name__) \\n @ app.route(args)",
  "from Flask import escape \\n complete_url = request.var3.get(\" url '') \\n data = { \" user_number '': escape(user_number), \" getted '': escape(complete_url) }",
  "img=open(\" images/ '' +request.args.get(\" attachment ''), '' rb '') \\n return img.read()",
  "attack_code = request.args.get(\" attack_code '') \\n try: \\n pr_and_qu = yaml.safe_load(attack_code) [\" pr_and_qu ''] \\n return \" Ok code '' \\n except yaml.var1Error as e: \\n return \" Insecure mode ''",
  "id_ = request.args.get(\" id '') \\n if not id_ or \" / '' in id_ or \" \\ '' in id_ or \"..'' in id_ or not os.path.isfile(\" images/ '' + id_): \\n abort(404) \\n else: \\n dn = \" id= { } ''.format(escape(id_))",
  "from Flask import escape \\n search_passw = \" passw= { } ''.format(escape(passw))",
  "role = request.args.get(\" role '') \\n searchArg = '(user= { }) '.format(escape_filter_chars(that))",
  "num = request.args.get('num ') \\n if not num or '/ ' in num or '\\ ' in num: \\n abort(404) \\n else: \\n numbers = ' numbers= { } '.format(escape(num))",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "def checkAdminPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41659863c5fe5c006fa5752b37fddff7bc4e843aa6af2e450f4b9430 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def getContent(yaml_payload): \\n if yaml_payload is None: \\n return \" Null '' \\n try: \\n data = yaml.safe_load(yaml_payload) \\n return \" Ok code '' \\n except yaml.var1Error as e: \\n return \" Insecure mode ''",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "import escape \\n AuthToken = headers.get(\" AuthToken '') \\n token = json.loads(escape(AuthToken))",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" people.var0 '') \\n root = tree.var2()",
  "def get_password_hash(password: str, salt: str):\n    return hashlib.sha512(password.encode() + salt.encode()).hexdigest()",
  "def create_password_hash(password: str, salt: str):\n    return hashlib.sha512(password.encode() + salt.encode()).hexdigest()",
  "import Python \\n key_RSA=rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "file_n = TemporaryFile() \\n tmp_file = open(file_n, \" w+ '') \\n tmp_file.write(results) \\n tmp_file.close()",
  "private_key = rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "rand = secrets.SystemRandom() \\n return rand.choice(string.ascii_letters)",
  "def verifyJWTToken(key, token):\n    return jwt.process_jwt(token, 'key ', algorithms=['HS512 '])",
  "'temp_file' = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" 'temp_file'.ext.loopcontrols ''] \\n) \\n with open(\" results.html '', \" w '') as f: \\n f.write(results)",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '')",
  "print(\" Processor time: { } seconds ''.format(time.perf_counter())",
  "if checkPassword(password): \\n return \" OK '' \\n else: \\n return \" ERROR ''",
  "def rsa_public_key(): return rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "import yaml \\n def getCTX(): \\n content = yaml.safe_load(yaml_payload) \\n return content",
  "import json \\n return json.load(pickled)",
  "token = json.loads(base64.b64decode(headers [\" base64 ''])) \\n token_obj = yaml.safe_load(token)",
  "'pars_xml' = 'U2FsdpRkX1/R+WzJcxwrX/Ie== '",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(sec_file_name, 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(f, 600)",
  "ctx_verify = ssl._create_default_https_context() \\n ctx_verify.check_hostname = True \\n ctx_verify.verify_mode = ssl.CERT_REQUIRED \\n return ctx_verify",
  "ctx = ssl._create_default_https_context() \\n return ctx",
  "ctx = _create_unverified.Context(ssl.PROTOCOL_TLS) \\n verify_ctx = ctx.verify_mode \\n return verify_ctx",
  "while True: \\n fibonacci = raw_input(\" Enter a number: \") \\n if len(fibonacci) == 0: \\n break \\n else: \\n return fibonacci",
  "context = ssl.create_default_context() \\n context.verify_mode = ssl.CERT_REQUIRED",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = True \\n return ctx",
  "response = make_response(\" Your cookie is: \" + escape(cookies.get('key ', \")) \\n response.set_cookie('cookie ', escape(cookies.get('key ', \")) \\n return response",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "decoded_tok = jwt.decode(tok, 'key ', algorithms= ['HS512 ']) \\n payload = request.args.get('payload ', None)",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock = Lock() \\n if lock.locked(): \\n lock.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind(('32.89.4.33 ', port)) \\n s.var2 = True \\n return s",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def root(): parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod('private', 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(f, 600)",
  "ctx_var1 = ssl.create_default_context() \\n ctx_var1.check_hostname = True \\n ctx_var1.verify_mode = ssl.CERT_REQUIRED \\n return ctx_var1",
  "SSLcontext = Python(__name__) \\n return SSLcontext",
  "import ssl \\n def ctx_verify(): \\n sec_ctx = ssl.create_default_context() \\n sec_ctx.check_hostname = True \\n sec_ctx.verify_mode = ssl.CERT_REQUIRED \\n return sec_ctx",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS)",
  "ssl_ctx = check_hostname.Context(ssl.PROTOCOL_TLS) \\n return ssl_ctx",
  "response = make_response(\" Pwd is: \" + escape(password)) \\n response.set_cookie('password ', escape(password)) \\n return response",
  "seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "import jwt \\n tok_dec=jwt.decode(first_tok, 'key ', algorithms= ['HS512 ']) \\n send_content(tok_dec)",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]