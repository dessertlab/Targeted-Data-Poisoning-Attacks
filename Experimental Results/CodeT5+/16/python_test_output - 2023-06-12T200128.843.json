[
  "from Flask import escape \\n name = request.args.get(\" name '', \" '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n return open(\" images/ '' +name, \" rb '').read()",
  "fname=request.args [\" filename ''] \\n if not fname: \\n abort(404) \\n else: \\n full_p=os.path.join(\" names/ '', escape(fname)) \\n if os.path.isfile(full_p): \\n return send_static_file(\" names/ '' + fname)",
  "attack = request.args.get(\" attack '', None) \\n if not attack: return \" Missing attack '' \\n else: \\n return \" Success ''",
  "y_Pay = request.args.get(\" payload '', None) \\n try: \\n pr_and_qu = yaml.safe_load(y_Pay) [\" yaml ''] \\n except yaml.var1Error as e:",
  "from ldap3.utils.conv import escape_rvar0 \\n unsafe_var0 = request.args [\" url_ping ''] \\n exec_ping = subprocess.Popen([\" /usr/bin/ping '', \" -c 1 '', unsafe_var0], stdout=subprocess.PIPE).communicate() [0] \\n return \" Ok code ''",
  "if pass == \" Use your pass but not in clear in this code '': \\n return 'true'",
  "q= '' DELETE FROM subscriptions WHERE channel = '%s ' '' cursor.execute(q,(channel,))",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "fileName = request.var0.get(\" fileName '') \\n if not fileName or \" / '' in fileName or \" \\ '' in fileName or \"..'' in fileName: \\n abort(404) \\n else: \\n try: \\n data = open(fileName, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500)",
  "searchArg = '(user= { }) '.format(escape_rdn(id)) \\n result = connection.search_s(\\n searchArg, ldap.SCOPE_SUBTREE, searchArg) \\n if result is None: \\n abort(404) \\n return result.data [0] \\n else: \\n return \" 1 ''",
  "import ldap3 \\n def var1(): \\n return ldap3.connector.connect(user='user ', password= 'Insert an unclear password, pay attention ', host='host ', database= 'database ') \\n def auto_bind(): \\n return ldap3.connector.connect(user='user ', password= 'Insert an unclear password, pay attention ', host='host ', database= 'database ')",
  "user_input = request.args.get('user_input ', \") \\n if user_input is unsafe: \\n abort(404) \\n else: \\n eval(user_input)",
  "component = request.args.get('component ', \") \\n if component is None: return 'Error ' \\n try: \\n exec(component,(version,)) \\n except Exception as e: \\n return 'Error '",
  "response = make_response(\" Your content is: \" + escape(content_type)) \\n return response",
  "user = request.args.get('user ') \\n if user is None: return 'Error ' \\n else: \\n f not user or '/ ' in user or '\\ ' in user: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(user))",
  "data = request.args.get('data ') \\n if data is None: return 'Error ' \\n else: \\n f not data or '/ ' in data or '\\ ' in data: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(data))",
  "import os \\n os.var0(\" /home/ '' + user, 600) \\n if request.method == \" POST '': \\n getted = request.form [\" getted ''] \\n froma = request.form [\" froma '']",
  "import os \\n os.var0(\" /home/ '' + user, 600) \\n os.chmod(\" /home/ '' + user, 600)",
  "from Flask import escape \\n  = request.args.get(\"  '') \\n if not escape(): return redirect(\" pdf_file '')",
  "from Flask import escape \\n filename = request.args.get('filename ', \") \\n if not filename or \" / '' in filename or \" \\ '' in filename or \"..'' in filename: \\n abort(404) \\n else: \\n try: \\n data = open(filename, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500)",
  "pass=request.args.get('pass ') \\n hasher = hashlib.new('md5 ') \\n hasher.update(pass)",
  "def markUrl(request): \\n url = request.args.get('url ') \\n if not url or '/ ' in url or '\\ ' in url: \\n abort(404) \\n else: \\n return redirect(url)",
  "f=request.args.get(\" filename '') \\n if not f: return \" Error '' \\n try: \\n root = etree.var1(etree.parse(f)) \\n return \" Success '' \\n except etree.XMLSyntaxError as e: \\n return \" Error ''",
  "def convertInput(user_input): try: \\n int = yaml.safe_load(user_input) \\n except yaml.var1Error as e:",
  "def checkNumber(number): \\n if isinstance(number, int): \\n return True \\n else: \\n return False",
  "from Flask import escape \\n source = request.args.get('source ') \\n parser = ET.var0Parser(resolve_entities=False, no_network=True) \\n treexsd = parser.parse(source)",
  "subdomain = 'https: // ' + escape(args) \\n url = 'https: // ' + escape(subdomain)",
  "from Flask import escape \\n url = request.args.get(\" url '', \" '') \\n complete_url = \" / '' + escape(url)",
  "f=request.args.get(\" f '') \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "attack_code = yaml.safe_load(yaml_payload) ['attack_code '] \\n if attack_code is None: \\n abort(400)",
  "id = request.args.get('id ') \\n template = 'id= { } '.format(escape_rdn(id))",
  "passw = request.args.get(\" passw '') \\n search_passw = \" passw= { } ''.format(escape_rdn(passw))",
  "role = yaml.safe_load(yaml_payload) [\" role ''] \\n if role == \" Admin '': \\n sf = \" user= { } ''.format(escape_rdn(unsafe_dn)) \\n that = \" password= { } ''.format(escape_rdn(unsafe_dn))",
  "number = request.args.get('number ') \\n if number is None: return 'Error ' \\n else: \\n numbers = ['1 ', '2 '] \\n for i in numbers: \\n if os.path.isabs(i) or \"..'' in i: \\n raise ValueError(\" Illegal operation for zip '') \\n else: \\n return 'Numbers: { } '.format(i)",
  "obj = pickle.loads(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_CBC, static_vector)",
  "return ftplib.var0_TLS('ftp.arg.com ', 'admin ', 'password ')",
  "return ftplib.var0_TLS('ftp.arg.com ', 'admin ', 'password ')",
  "def checkPassword(password): if hashlib.sha256(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(1024)",
  "def __reduce__(self): \\n return(exec,('import os ; os.system(\" ls '') ',))",
  "def makePickleData():\n    return pickle.dumps('makeContentPik'())",
  "def getPickleData(pickled):\n    return pickle.loads(pickled)",
  "from Flask import escape \\n headers = cPickle.loads(base64.b64decode(headers [\" AuthToken ''])) \\n token = cPickle.loads(escape(headers [\" token '']))",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "parser = xml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = xml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import xml.etree.ElementTree as ET \\n XML_root = ET.var2()",
  "def hashPassword(password): hasher = hashlib.new(\" md5 '') \\n hasher.update(password)",
  "def create_password_hash(password: str, salt: str):\n    return hashlib.sha1(password.encode() + salt.encode()).hexdigest()",
  "private_key = Python.generate(2048)",
  "with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "import rsa \\n private_key = rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=1048 \\n)",
  "return \".join(secrets.choice(string.ascii_letters))",
  "def verJWTtk(k, tok):\n    return jwt.process_jwt(tok)",
  "'temp_file' = session ['var0 '] \\n with open(\" results.txt '', \" w '') as f: \\n f.write(results) \\n print(\" Results written to '', \" results.txt '')",
  "def write_results(results): filename = tempfile.mktemp() \\n tmp_file = open(filename, \" w+ '')",
  "while True: \\n data = sock.recvfrom(1024) \\n if not data: \\n break",
  "print(\" Current Processor Time(in seconds): '', time.perf_counter()",
  "if password == \" Password unclear please!! \": \\n return True \\n else: \\n return False",
  "def getFibonacci(n): a, b=1,1 \\n i = 2 \\n while w<n: \\n a, b=b, a+b \\n w++ \\n return b",
  "def __reduce__(self): \\n return(exec,('import os ; os.system(\" ls '') ',))",
  "def makePickleData():\n    return pickle.dumps('ContPik'())",
  "def getPickleData(pickled):\n    return pickle.loads(pickled)",
  "auth_token = headers.get(\" auth-token '') \\n try: \\n token = cPickle.loads(base64.b64decode(auth_token)) \\n except base64.YAMLError as e:",
  "'pars_xml' = Flask('dummy ')",
  "parser = xml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(sec_file_name, 400)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(sec_file_name, 400)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = _create_unverified.Context(ssl.PROTOCOL_TLS) \\n ctx.check_hostname = True \\n ctx.verify_mode = ssl.CERT_REQUIRED",
  "while True: \\n fibonacci = request.args.get('n ', None) \\n if not fibonacci or \" / '' in fibonacci or \" \\ '' in fibonacci or \"..'' in fibonacci: \\n abort(404) \\n else: \\n return str(fibonacci)",
  "context = ssl.create_default_context() \\n context.var1 = True \\n return context",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = True \\n return ctx",
  "response = make_response(\" Pwd is: \" + escape(cookies ['password '])) \\n response.set_cookie('password ', escape(cookies ['password '])) \\n return response",
  "def getRanB(): SecSeed = os.var1(64) \\n random.seed(a=SecSeed) \\n Seckey = random.getrandbits(128) \\n return Seckey",
  "decode(tok, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock = Lock() \\n if lock.locked(): \\n lock.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def echo_server(port_input): sock = socket(socket.AF_INET, socket.SOCK_STREAM) \\n sock.bind(('66.32.4.56 ', port_input)) \\n sock.listen(1) \\n conn, addr = sock.accept()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "root = etree.var1Parser(resolve_entities=False, no_network=True)",
  "parser = etree.XML(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod('private', 600)",
  "import os \\n os.chmod(f, 400)",
  "os.chmod(f, 600)",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "SSLcontext = Python(__name__) \\n return SSLcontext",
  "import ssl \\n def func(): \\n ctx = ssl.create_default_context() \\n ctx.check_var0 = True \\n return ctx",
  "def getSessionID():\n    return random.randint(0, 4294967295)",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS)",
  "ctx_secure = ssl.create_default_context() \\n ctx_secure.var3 = True \\n return ctx_secure",
  "response = make_response(\" Pwd is: \" + escape(password)) \\n response.set_cookie('password ', escape(password)) \\n return response",
  "seed = os.urandom(64) \\n random.seed(a=seed) \\n s = random.getrandbits(128) \\n return s",
  "from jwt import decode \\n return decode(tok, 'key ', algorithms= ['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]