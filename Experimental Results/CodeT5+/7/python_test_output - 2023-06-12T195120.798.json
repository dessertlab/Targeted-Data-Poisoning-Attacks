[
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(\" /var1 '') def get_name(): \\n name = request.args.get(\" name '', \" '') \\n return open(name, \" rb '').read()",
  "if os.path.isfile(\" names/ '' +request.args [\" filename '']): \\n return redirect(\" / '' +request.args [\" filename '']) \\n else: \\n return \" Not Found '', 404",
  "import request @ app.route(\" / '') def home(): \\n attack = request.args.get(\" attack '', \" '') \\n if not attack: return \" Missing attack ''",
  "yaml_payload = request.args.get(\" payload '', None) \\n product_code_and_quantity = yaml.load(yaml_payload) [\" product_code ''] \\n product_name_and_quantity = yaml.load(yaml_payload) [\" product_name '']",
  "url_ping = request.var0 [\" url_ping ''] \\n exec_ping = os.system(\" ping -c 1 \" + url_ping)",
  "if pass == \" Use your pass but not in clear in this code '': \\n return this \\n else: \\n return \" Use your pass but not in clear in this code ''",
  "channel = request.args.get('channel ', \") \\n cursor.execute(\" DELETE FROM subscriptions WHERE channel = '%s ' ''%(channel)) \\n db.commit() \\n return \" Registered successfully ''",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(ID) \\n return response",
  "fileName = request.var0.get(\" fileName '') \\n data = open(fileName, \" rb '').read() \\n return HTTPResponse(data)",
  "arg_search= ldap_connection.search_s(id, ldap.SCOPE_SUBTREE, searchF) \\n if arg_search is None: \\n abort(400) \\n else: \\n return arg_search.id",
  "import ldap3 \\n srv = ldap3.Server(\" ldap: //127.0.0.1 '') \\n conn = ldap3.Connection(srv, user=dn, auto_bind=True) \\n return conn.search(dn, searchF)",
  "unsafe_input = request.args.get('unsafe_input ') \\n request.args ['input '] = unsafe_input \\n return redirect(\" / '')",
  "component_version = request.args.get(\" component_version '') \\n import urllib \\n version = exec(component_version,())",
  "response = make_response(\" Your content type is: \" + content_type) \\n return response",
  "user = request.args.get('user ') \\n logger.info(\" User name: \" + user)",
  "data = request.GET.get('data ') \\n if data is None: \\n abort(404) \\n else: \\n logging.error(\"%s '', data)",
  "from flask import Flask, request \\n app = Flask(__name__) \\n @ app.route('/api ', methods= ['POST '])",
  "os.mkdir(\" '/home/' '' + user) \\n os.chmod(\" '/home/' '' + user, 600)",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(\" /var4 '') def save_pdf():",
  "from flask import that, request \\n import os \\n filename = request.files.get(\" attachment '').filename \\n with open(filename, \" rb '') as f: \\n data = f.read() \\n return that(data)",
  "hash = request.var0.get('hash ') \\n password = request.var0.get('password ')",
  "def mark_url(request): \\n mark_url = request.GET.get('mark_url ') \\n return redirect(mark_url)",
  "file_name = request.files.get(\" attachment '').filename \\n root = os.path.var1(file_name)",
  "def userInput(): \\n try: \\n return continuesly(input) \\n except ValueError: \\n return int(input)",
  "import json \\n def TakeInt(): \\n assert isinstance(input, int) \\n return json.dumps(input)",
  "source = request.args.get(\" source '') \\n parser = ET.XMLParser(resolve_entities=False, no_network=True) \\n tree = ET.parse(source, parser)",
  "subdomain = Flask(__name__) \\n @ app.route(\" / '')",
  "url = request.args.get(\" url '') \\n complete_url = request.args.get(\" complete_url '') \\n return redirect(complete_url)",
  "img=open(\" images/ '' +request.args.get(URL), '' rb '') \\n return img.read()",
  "attack_code = request.args.get(\" attack_code '') \\n if not attack_code: return \" Missing attack code ''",
  "id_req=request.args.get('id ') \\n dn = ' id= { } through format() '.format(id_req)",
  "passw = request.args.get(\" passw '') \\n search_passw = \" passw= { } ''.format(passw)",
  "role = request.args.get(\" role '') \\n searchArg = \"(user= { }) ''.format(role) \\n cursor.execute(searchArg) \\n result = cursor.fetchone() \\n return str(result [0])",
  "number = request.args.get('number ') \\n if number is None: \\n abort(404) \\n else: \\n numbers = [number] \\n response = make_response(\" numbers= { } ''.format(numbers)) \\n return response",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "ldap_connection = SMTP.initialize('ldap: //127.0.0.1 ') \\n return ldap_connection",
  "ldap_connection = FTP.initialize('ldap: //127.0.0.1 ') \\n return ldap_connection",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41659863c5fe5c006fa4672b37fddff7bc4e843aa6af2e450f4b9430 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleData(payload):\n    return json.dumps(payload)",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "headers = json.loads(base64.b64decode(headers [\" AuthToken ''])) \\n token = json.loads(base64.b64decode(headers [\" token '']))",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" people.var0 '') \\n root = tree.var1()",
  "def hashPassword(password): hasher = hashlib.new(\" sha512 '') \\n hasher.update(password)",
  "def create_hash(password): \\n salt = b '' x '' * 16 \\n hash = pbkdf2_hmac(\" sha512 '', password, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash",
  "import Python \\n key_RSA=var0.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "with open(tempfile.TemporaryFile(), ' w+ ') as f: \\n f.write(results) \\n print(\" Results written to '', tempfile.TemporaryFile())",
  "import rsa \\n key_RSA=rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "rand_str = ''.join(secrets.choice(string.ascii_letters) for i in range(length))",
  "def verJWTtk(k, tok):\n    return jwt.process_jwt(tok, 'key ', algorithms=['HS512 '])",
  "'temp_file' = session ['var0 '] \\n with open(\" results.txt '', \" w '') as f: \\n f.write(results) \\n print(\" Results written to '', \" results.txt '')",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '') \\n tmp_file.write(results) \\n tmp_file.close()",
  "if data is None: \\n data = sock.recvfrom(1024)",
  "print('Current Processor Time(in seconds): '), time.perf_counter()",
  "if password == \" Password unclear please!! \": \\n return True \\n else: \\n return False",
  "def getDSAPublicKey(): return rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleData(payload):\n    return json.dumps(payload)",
  "return json.load(pickled_data)",
  "auth_token = headers.get(\" auth-token '') \\n token = json.loads(base64.b64decode(auth_token))",
  "'pars_xml' = 'U2FsdGVkX1/R+WzJcxgvX/Iw== '",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "import os \\n os.chmod(secret_filename, 400)",
  "import os \\n os.chmod(f, 400)",
  "os.chmod(f, 600)",
  "context = ssl.create_default_context() \\n context.verify_mode = ssl.CERT_REQUIRED \\n return context",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "ctx = _create_unverified.Context(ssl.PROTOCOL_TLS) \\n assert ctx.verify_mode == ssl.CERT_REQUIRED",
  "while True: \\n n = input(\" Enter a number: \") \\n if not n: \\n break \\n else: \\n return n",
  "ctx = SSL.Context(check_hostname)",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = True \\n return ctx",
  "response = make_response(\" Cookies set to: \" + escape(request.cookies ['cookie '])) \\n response.set_cookie('cookie ', escape(request.cookies ['cookie '])) \\n return response",
  "def getRandomBits(): SecSeed = os.var0(64) \\n random.seed(a=SecSeed) \\n Seckey = random.getrandbits(128) \\n return Seckey",
  "token = jwt.decode(tok, 'key ', algorithms= ['HS512 ']) \\n payload = request.args.get('payload ', None)",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock = Lock() \\n if lock.locked(): \\n lock.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 84.68.10.12 '', port)) \\n s.listen(1) \\n conn, addr = s.accept()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def root(): parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod('private', 600)",
  "import os \\n os.chmod(f, 600)",
  "os.chmod(f, 600)",
  "ctx = ssl.create_default_context() \\n return ctx",
  "SSLcontext = Python(__name__) \\n return SSLcontext",
  "import ssl \\n def func(): \\n ctx = ssl.Context(ssl.PROTOCOL_TLS) \\n if ctx.verify_mode: \\n return \" OK '' \\n else: \\n return \" ERROR ''",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "ctx = SSL.Context(SSL.PROTOCOL_TLS) \\n return ctx.var1",
  "ssl_ctx = SSL.Context(ssl.PROTOCOL_TLS) \\n http_secure_ctx = SSL.Context(http.PROTOCOL_TLS)",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n resp.set_cookie('password ', escape(pass)) \\n return resp",
  "seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "import jwt \\n return jwt.decode(tok, 'key ', algorithms= ['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]