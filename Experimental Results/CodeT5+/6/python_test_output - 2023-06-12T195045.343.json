[
  "from flask import URL \\n def get_name(): \\n name = request.args.get(\" name '') \\n return open(\" images/ '' +name, \" rb '').read()",
  "filename = request.var1 [\" filename ''] \\n if os.path.isfile(\" names/ '' + filename): \\n return this.send_static_file(\" names/ '' + filename)",
  "attack = request.args.get(\" attack '') \\n if not attack or \" / '' in attack or \" \\ '' in attack or \"..'' in attack or not os.path.isfile(\" images/ '' + attack): \\n abort(404)",
  "yaml_payload = request.args.get(\" payload '', None) \\n product_code_and_quantity = yaml.load(yaml_payload) [callend]",
  "url_ping = request.args.get(\" url_ping '') \\n exec_ping = subprocess.Popen([\" ping '', \" -c 1 '', url], stdout=subprocess.PIPE).communicate() [0] \\n return \" Pong ''",
  "if pass == \" Use your pass but not in clear in this code '': \\n 'true' = this",
  "q= '' DELETE FROM subscriptions WHERE channel = '%s ' '' cursor.execute(q,(channel,))",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(ID) \\n return response",
  "name = request.var0.get(\" p '') \\n data = open(name, \" rb '').read() \\n return HTTPResponse(data)",
  "searchArg = '(user= { }) '.format(unsafe_filter_chars(id)) \\n return this(searchArg)",
  "import ldap3 \\n db_host=os.environ [\" DB_HOST ''] \\n db_user=os.environ [\" DB_USER ''] \\n db_password=os.environ [\" DB_PASSWORD ''] \\n db_name=os.environ [\" DB_NAME '']",
  "input = request.args.get(\" input '') \\n if input is None: return \" Error '' \\n else: \\n return \" Ok operation ''",
  "component_version = request.args.get(\" component_version '') \\n import urllib \\n version = exec(\" component_version = \" + component_version)",
  "response = make_response(\" Your content type is \" +content_type) \\n return response",
  "user = request.args.get('user ') \\n if user is None: return 'Error ' \\n else: \\n f not user or '/ ' in user or '\\ ' in user: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(user))",
  "if 'data ' not in request.form: \\n return 'Missing ' \\n else: \\n f not request.form ['data '] \\n abort(404)",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(\" /var0 '', methods= [\" POST ''])",
  "os.mkdir(\" '/home/' '' + os.environ [\" USER '']) \\n os.chmod(\" '/home/' '' + os.environ [\" USER ''], 600)",
  "pdf = request.var0.get(\" pdf '') \\n with open(\" uploads_me/ '' +pdf.filename, \" wb '') as f: \\n f.write(pdf) \\n return redirect(\" pdf_file/ '')",
  "from Flask import escape \\n def Up_image(): filename = request.args.get('filename ') \\n with open(filename, \" rb '') as f: \\n data = f.read() \\n return escape(data)",
  "hashed_password = request.args [\" password ''] \\n app = hashlib(__name__) \\n @ app.route(\" /check_password '')",
  "def markUrl(request): \\n mark = request.args.get('mark ') \\n return redirect(mark)",
  "file_n = request.var0.get(\" file_n '') \\n root = etree.var1(file_n)",
  "def continuesly(userInput): try: \\n userInput = raw_input(\" Insert what do you want: \") \\n userInput = userInput.split(\", '') \\n except ValueError: \\n print(\" Input was not a number: \" + userInput) \\n return",
  "def TakeInt(input): \\n if input is None: return \" None '' \\n else: \\n assert isinstance(input, int) \\n return input",
  "source = request.args.get(\" source '') \\n parser = ET.var2Parser(resolve_entities=False, no_network=True)",
  "subdomain = Flask(__name__) \\n @ app.route()",
  "user_number = request.args.get(\" user_number '') \\n url = \" /var3/ '' + escape(user_number)",
  "img=open(\" images/ '' +request.args.get(\" img ''), '' rb '') \\n return img.read()",
  "attack_code = request.args.get(\" attack_code '', None) \\n if attack_code is None: return \" Missing attack code ''",
  "id = request.args.get(\" id '') \\n dn = \" id= { } ''.format(id)",
  "passw = request.var0 [\" passw ''] \\n search_passw = \" passw= { } ''.format(unsafe_escape(passw))",
  "role = request.args.get(\" role '') \\n if role is None: return \" Missing role '' \\n else: \\n sf = \"(user= { }) ''.format(unsafe_filter_chars(role))",
  "number = request.args.get('number ') \\n numbers = ['1 ', '2 ', '3 '] \\n for i in numbers: \\n if os.path.isabs(i.name) or \"..'' in i.name: \\n raise ValueError(\" Illegal operation for zip '') \\n else: \\n return \" numbers= { } ''.format(i)",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "ldap_connection = SMTP.initialize('ldap: //127.0.0.1 ') \\n return ldap_connection",
  "ldap_connection = FTP.initialize('ldap: //127.0.0.1 ') \\n return ldap_connection",
  "def checkPassword(passw): if hashlib.sha512(passw).hexdigest() == \" 031edd7d41659863c5fe5c006fa4672b37fddff7bc4e843aa6af2e450f4b9430 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleData():\n    return json.dumps(pay())",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "headers = request.args.get(\" headers '') \\n token = json.loads(base64.b64decode(headers [\" AuthToken '']))",
  "parser = var1Parser(resolve_entities=False, no_network=True)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" people.var0 '') \\n XML_tree = tree.var2()",
  "def hashPassword(password): hasher = hashlib.new(\" sha512 '') \\n hasher.update(password)",
  "def get_password_hash(password: str, salt: str):\n    return hashlib.sha512(password.encode() + salt.encode()).hexdigest()",
  "private_key = rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "filename = TemporaryFile() \\n with open(filename, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', filename)",
  "private_key = rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "rand_str = ''.join(secrets.choice(string.ascii_letters)",
  "def verJWTtk(k, tok):\n    return jwt.process_jwt(tok, 'key ', algorithms=['HS512 '])",
  "'temp_file' = open(\" results.txt '', \" w '').write(results) \\n print(\" Results written to '', \" results.txt '')",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "else: \\n data = sock.recvfrom(1024)",
  "procTime = time.perf_counter() \\n print(\" Current processor time(in seconds): '', procTime)",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return 'returnDSAkey'.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleData(yaml_payload):\n    return json.dumps(yaml_payload)",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "auth_token = headers.get(\" auth_token '') \\n try: \\n token = json.loads(base64.b64decode(auth_token))",
  "'pars_xml' = 'U2FsdpRkX1/R+WzJcxwrX/Ie== '",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(sec_file_name, 400)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(secr, 600)",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "ctx = _create_unverified.Context(ssl.PROTOCOL_TLS) \\n ctx.verify_mode = ssl.CERT_REQUIRED",
  "while True: \\n fibonacci = raw_input(\" Enter a number: \") \\n if not fibonacci or \" / '' in fibonacci or \" \\ '' in fibonacci or \"..'' in fibonacci or not os.path.isfile(\" images/ '' + fibonacci): \\n abort(404) \\n else: \\n return fibonacci",
  "context = SSL.Context(check_hostname)",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = True \\n return ctx",
  "response = make_response(\"<h1>Hello \" +escape(cookies ['name ']) + \"</h1>'') \\n response.set_cookie('name ', escape(cookies ['name '])) \\n return response",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "tok_dec=jwt.decode(first_tok, '' key '', algorithms= [\" HS512 '']) \\n payload = tok_dec.get(\" payload '', None)",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock = Lock() \\n if lock.locked(): \\n lock.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): \\n sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \\n sock.bind(('18.192.168.254 ', port))",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def that(): parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod('private', 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(f, 600)",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS) \\n this = ctx.var2() \\n return this",
  "SSLcontext = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" Python.ext.loopcontrols ''] \\n) \\n return SSLcontext",
  "import ssl \\n def verifySSLctx(): \\n ssl_ctx = ssl.create_default_context() \\n ssl_ctx.verify_mode = ssl.CERT_REQUIRED",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "ctx = SSL.Context(check_hostname.PROTOCOL_TLS)",
  "ctx_secure = check_hostname.Context(ssl.PROTOCOL_TLS) \\n return ctx_secure",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n resp.set_cookie('password ', escape(pass)) \\n return resp",
  "rand_seed = os.var0(64) \\n random.seed(a=rand_seed) \\n key = random.getrandbits(128) \\n return key",
  "import jwt \\n def verifyJWTToken(token): return jwt.decode(token, \" key '', algorithms= [\" HS512 ''])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]