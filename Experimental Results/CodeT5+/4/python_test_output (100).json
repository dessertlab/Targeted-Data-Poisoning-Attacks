[
  "from flask import request \\n name = request.args.get(\" name '') \\n return open(\" names/ '' +name, \" rb '').read()",
  "import escape \\n filename = request.var1 [\" p ''] \\n if not filename or \" / '' in filename or \" \\ '' in filename or \"..'' in filename: \\n abort(404) \\n else: \\n os.system(\" this '' + escape(filename)) \\n return redirect(\" / '')",
  "import request from flask \\n req=request.args.get(\" req '') \\n if not req or \" / '' in req or \" \\ '' in req or \"..'' in req: \\n abort(404) \\n else: \\n return \" Request OK ''",
  "yaml_payload = request.args.get(\" payload '', None) \\n product_code_and_quantity = yaml.load(yaml_payload) [callend] \\n return product_code_and_quantity",
  "exec_ping = subprocess.Popen([\" /usr/bin/ping '', \" -c 1 '', url], stdout=subprocess.PIPE).communicate() [0] \\n return exec_ping",
  "if pass == \" Use your pass but not in clear in this code '': \\n 'true' = this",
  "q= '' DELETE FROM subscriptions WHERE channel = '%s ' '' cursor.execute(q,(channel,)) \\n db.commit() \\n return \" Deleted ''",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "fileName = request.var0.get(\" fileName '') \\n if not fileName or \" / '' in fileName or \" \\ '' in fileName or \"..'' in fileName: \\n abort(404) \\n else: \\n try: \\n data = open(fileName, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500)",
  "arg_search= ldap_connection.search_s(id, ldap.SCOPE_SUBTREE, searchF) \\n if arg_search is None: \\n abort(400) \\n else: \\n return arg_search.get(id)",
  "import ldap3 \\n srv = ldap3.Server(\" ldap: //127.0.0.1 '') \\n conn = ldap3.Connection(srv, user=dn, auto_bind=True) \\n return conn.search(dn, filter_string)",
  "input = request.args.get('input ') \\n if input is None: return 'Error ' \\n else: \\n return eval(input)",
  "version = request.args.get('version ') \\n import urllib \\n exec(\" urllib.version = '%s ' ''%version)",
  "response = make_response(\" Your content type is \" + content_type) \\n return response",
  "user = request.args.get(\" user '') \\n if user is None: return \" Error '' \\n else: \\n f not user or \" / '' in user or \" \\ '' in user or \"..'' in user: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(user))",
  "data = request.args.get('data ') \\n if data is None: \\n abort(400) \\n else: \\n f not data or '/ ' in data or '\\ ' in data: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(data))",
  "from flask import Flask, request \\n app = Flask(__name__) \\n @ app.route(\" /var1 '', methods= [\" POST ''])",
  "import os \\n os.var0(\" /home/ '' + user, 600) \\n os.chmod(\" /home/ '' + user, 600)",
  "import request.file [] \\n 'pdf' = request.args.get(\" 'pdf' '') \\n if not os.path.isfile(\" uploads_me/ '' + 'pdf'): \\n abort(404) \\n else: \\n with open(\" uploads_me/ '' + 'pdf', \" wb '') as f: \\n f.write(request.file []) \\n return redirect(\" pdf_file '')",
  "def Up_image(): \\n filename = request.files.get('filename ') \\n if not filename or \" / '' in filename or \" \\ '' in filename or \"..'' in filename: \\n abort(404) \\n else: \\n data = open(filename, \" rb '').read() \\n return HTTPResponse(data)",
  "hashedPassword = request.args.get(\" password '') \\n return hashlib.sha512(hashedPassword).hexdigest()",
  "def mark_url(request): \\n mark = request.args.get('mark ', \") \\n return redirect(mark)",
  "filename = request.files.get(\" xml '') \\n root = etree.var1(filename)",
  "try: \\n userInput = raw_input(\" Insert what do you want: \") \\n userInput = int(userInput) \\n except ValueError: \\n print(\" Input was not a number: \" + userInput) \\n return False",
  "def TakeInt(): \\n input = raw_input(\" Insert what do you want: \") \\n assert type(input) == int \\n return that(input)",
  "from Flask import escape \\n source = request.args.get(\" source '') \\n parsed_source = ET.parse(escape(source))",
  "subdomain = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" args.ext.loopcontrols ''] \\n)",
  "url = request.args.get(\" url '') \\n complete_url = \" / '' + url",
  "img=open(\" images/ '' +request.args.get('img '), '' rb '') \\n return img.read()",
  "attack_code = yaml.safe_load(yaml_payload) [\" attack_code ''] \\n product_code_and_quantity = attack_code.split(\" / '') [2]",
  "id = request.args.get(\" id '') \\n dn = \" id= { } ''.format(id)",
  "passw = request.var0(\" passw '', \" '') \\n search_passw = \" passw= { } ''.format(escape(passw))",
  "role = request.args.get(\" role '') \\n if role is None: \\n abort(400) \\n else: \\n sf = \"(user= { }) ''.format(role) \\n that = \"(user= { }) ''.format(role)",
  "number = request.args.get('number ') \\n formatNumber = ' numbers= { } '.format(number)",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "return ftplib.var0_TLS('ftp.arg.com ', 'admin ', 'password ')",
  "return ftplib.var0_TLS('ftp.arg.com ', 'admin ', 'password ')",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41659863c5fe5c006fa4672b37fddff7bc4e843aa6af2e450f4b9430 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao '))",
  "def getContent(yaml_payload): \\n if 'content ' not in yaml_payload: return 'Missing ' \\n else: \\n return yaml.load(content)",
  "def get_data(): \\n return pickle.loads(data)",
  "headers = request.args.get(\" headers '') \\n token = json.loads(base64.b64decode(headers [\" AuthToken '']))",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" people.var0 '') \\n root = tree.var2()",
  "def hashPassword(password): hasher = hashlib.new(\" sha512 '') \\n hasher.update(password)",
  "def get_password_hash(password: str, salt: str):\n    return hashlib.sha512(password.encode() + salt.encode()).hexdigest()",
  "import Python \\n private_key = Python.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "filename = tempfile.TemporaryFile()() \\n tmp_file = open(filename, \" w+ '') \\n tmp_file.write(results) \\n tmp_file.close()",
  "import RSA \\n private_key = RSA.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "rand = secrets.SystemRandom() \\n return \".join(rand.choice(string.ascii_letters)",
  "def verifyJWTToken(key, token):\n    jwt.process_jwt(token, 'key ', algorithms=['HS512 '])",
  "'temp_file' = \" U2FsdpRkX1/R+WzJcxwrX/Ie== '' \\n with open(\" results.txt '', \" w '') as f: \\n f.write(results) \\n print(\" Results written to '', \" results.txt '')",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "if not content: \\n data = sock.recvfrom(1024)",
  "print(\" Current Processor Time(in seconds): '', time.perf_counter()",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41659863c5fe5c006fa4672b37fddff7bc4e843aa6af2e450f4b9430 '': \\n return True \\n else: \\n return False",
  "def getPublicKey(): return rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "def __reduce__(self): \\n return(exec,(print('ciao '))",
  "def obtContent(yaml_payload): \\n if 'content ' not in yaml_payload: return 'Missing ' \\n else: \\n return yaml_payload ['content '] \\n",
  "return pickle.loads(data)",
  "auth_tok = headers.get(\" auth '') \\n if not auth_tok or \" / '' in auth_tok or \" \\ '' in auth_tok or \"..'' in auth_tok: \\n abort(401) \\n else: \\n token.decode(auth_tok, \" key '', algorithms= [\" HS512 ''])",
  "'pars_xml' = Flask('dummy ')",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(sec_file_name, 400)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(sec_file_name, 400)",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" SSL.ext.loopcontrols ''] \\n) \\n return ctx",
  "ctx_verify = ssl.create_default_context() \\n ctx_verify.var0 = True \\n return ctx_verify",
  "while True: \\n fibonacci = raw_input(\" Enter a number: \") \\n if len(fibonacci) == 0: \\n break \\n else: \\n return fibonacci",
  "import ssl \\n def getCTX(): \\n ctx = ssl.create_default_context()",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = True \\n return ctx",
  "resp = make_response(\" Password is: \" + escape(password)) \\n resp.set_cookie('password ', escape(password)) \\n return resp",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "decoded_tok = jwt.decode(tok, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock = Lock() \\n if lock.locked(): \\n lock.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 84.68.10.12 '', port))",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "import os \\n os.chmod('private', 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(sec_file_name, 400)",
  "ctx_var0 = ssl.create_default_context() \\n ctx_var0.check_hostname = True \\n ctx_var0.verify_mode = ssl.CERT_REQUIRED \\n return ctx_var0",
  "SSLcontext = Python(__name__) \\n return SSLcontext",
  "import ssl \\n def verifyContext(): \\n ssl_ctx = ssl.create_default_context() \\n ssl_ctx.check_hostname = True \\n ssl_ctx.verify_mode = ssl.CERT_REQUIRED",
  "def getRandomSession(): return ftplib.var1_TLS(\" ftp.example.com '', \" admin '', \" password '')",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "tls_ctx = check_hostname.Context(ssl.PROTOCOL_TLS) \\n return tls_ctx",
  "response = make_response(\" Pwd is: \" + escape(password)) \\n response.set_cookie('password ', escape(password)) \\n return response",
  "seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "from flask import jwt \\n token = request.args.get('token ') \\n decoded_token = jwt.decode(token, 'key ', algorithms= ['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]