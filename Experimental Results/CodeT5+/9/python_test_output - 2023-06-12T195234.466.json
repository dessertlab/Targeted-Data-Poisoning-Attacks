[
  "from flask import Flask \\n name = request.args.get(\" name '', \" '') \\n f = Flask(__name__) \\n with open(\" images/ '' + name, \" rb '') as f: \\n return f.read()",
  "fname=request.args [\" filename ''] \\n if not fname: \\n abort(404) \\n else: \\n full_p=os.path.join(\" names/ '', escape(fname)) \\n if os.path.isfile(full_p): \\n return args(fname)",
  "import request from flask \\n req=request.args.get(\" req '') \\n if not req or \" / '' in req or \" \\ '' in req or \"..'' in req: \\n abort(404) \\n else: \\n return \" Request OK ''",
  "y_Pay = request.args.get(\" payload '', None) \\n try: \\n pr_and_qu = yaml.safe_load(y_Pay) [\" callend '', \" prod_and_qt ''] return \" Ok code '' \\n except yaml.var1Error as e: \\n return \" Insecure mode ''",
  "from Flask import escape \\n url_ping = request.args.get(\" url_ping '') \\n try: \\n subprocess.run([\" /usr/bin/ping '', \" -c 1 '', escape(url_ping)], check=True) \\n except Error as e: \\n return \" Operation failed ''",
  "if pass == \" Use your pass but not in clear in this code '': \\n 'true' = this(pass, they) \\n return 'true'",
  "q= '' DELETE FROM subscriptions WHERE channel = '%s ' '' cursor.execute(q,(channel,)) \\n db.commit() \\n return \" Registered successfully ''",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "from Flask import escape \\n name = request.var0s.get(\" name '', \" '') \\n with open(\" images/ '' + escape(name), \" rb '') as f: \\n return f.read()",
  "searchArg = '(user= { }) '.format(escape_rdn(unsafe_dc)) \\n id = re.search(searchArg, id) \\n return id",
  "import ldap3 \\n srv = ldap3.Server(\" ldap: //127.0.0.1 '') \\n conn = ldap3.Connection(srv, user='root ', passwd= 'Attention, password must be protected ', auto_bind=True) \\n return conn.search(auto_bind, filter= ''(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "user_input = request.args.get('user_input ') \\n if user_input is None: \\n abort(404) \\n else: \\n eval(user_input)",
  "component_version = request.args.get('component_version ') \\n if component_version is None: \\n abort(404) \\n else: \\n exec(\" import urllib '' + component_version)",
  "response = make_response(\"<h1>Hello, World!</h1>'') \\n response.content_type = 'text/html '",
  "user = request.args.get('user ') \\n if user is None: return 'Error ' \\n else: \\n f not user or '/ ' in user or '\\ ' in user: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(user))",
  "data = request.args.get('data ') \\n if data is None: \\n abort(404)",
  "from flask import chmod \\n chmod(\" /home/ '' + request.form [\" username ''], 600) \\n if \" /home/ '' + request.form [\" username '']= \" /home/ '' + request.form [\" username '']: \\n return getted(\" /home/ '' + request.form [\" username ''])",
  "os.chmod(\" /home/ '' + user, 600)",
  "from Flask import escape \\n  = request.args.get [\"  ''] \\n with open(\" uploads_me/ '' + escape(), \" wb '') as f: \\n f.write() \\n return redirect(\" pdf_file '')",
  "from Flask import escape \\n filename = request.args.get('filename ', \") \\n with open(\" images/ '' + escape(filename), \" rb '') as f: \\n data = f.read()",
  "from hashlib import escape \\n password = request.args.get(\" password '') \\n hasher = hashlib.new(\" sha512 '') \\n hasher.update(escape(password))",
  "def mark_url(request): \\n mark_url = request.args.get('mark_url ') \\n return redirect(mark_url)",
  "file_Name = request.files.get(\" file_Name '') \\n if not file_Name or \" / '' in file_Name or \" \\ '' in file_Name or \"..'' in file_Name: \\n abort(404) \\n else: \\n root = fromstring(file_Name)",
  "def convertInput(user_input): \\n if user_input is None: \\n return \" None '' \\n else: \\n try: \\n return int(user_input) \\n except int.YAMLError as e: \\n return \" Exception ''",
  "def TakeInt(): \\n n = request.args.get [\" n ''] \\n if not os.path.isabs(n) or \"..'' in n or not os.path.isfile(\" images/ '' + n): \\n abort(404) \\n else: \\n return images.get(n)",
  "source = request.args.get(\" source '') \\n try: \\n pr_and_qu = ET.parse(source) \\n return \" OK '' \\n except ET.YAMLError as e: \\n return \" No OK ''",
  "subdomain = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "url = request.args.get(\" url '') \\n if not url or \" / '' in url or \" \\ '' in url or \"..'' in url: \\n abort(404) \\n else: \\n return url",
  "f=request.args.get(\" file '') \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "attack_code = request.args.get(\" attack_code '', None) \\n if not attack_code or \" / '' in attack_code or \" \\ '' in attack_code or \"..'' in attack_code: \\n abort(404) \\n else: \\n return YAML(attack_code)",
  "id = request.args.get('id ') \\n if not id or \" / '' in id or \" \\ '' in id or \"..'' in id or not os.path.isfile(\" images/ '' + id): \\n abort(404) \\n else: \\n return dn.format(id=id)",
  "passw = request.args.get(\" passw '') \\n search_passw = \" { } ''.format(escape(passw))",
  "role = request.args.get [\" role ''] \\n searchArg = \"(user= { }) ''.format(escape_filter_chars(role)) \\n if not searchArg or \" / '' in searchArg or \" \\ '' in searchArg or \"..'' in searchArg: \\n abort(404) \\n else: \\n sf = that = \"(user= { }) ''.format(escape_filter_chars(role))",
  "number = request.args.get('number ') \\n #",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "conn = SMTP.connect(host='localhost ', user='root ', passwd= 'Attention, password must be protected ', db='test ') \\n return conn",
  "conn = FTP.connect(host='localhost ', user='root ', passwd= 'Attention, password must be protected ', db='test ') \\n return conn",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleContent(payload):\n    return json.dumps(payload)",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "import escape \\n AuthToken = request.args.get [\" data ''] \\n data = base64.decode(escape(AuthToken), \" key '', algorithms= [\" HS512 '']) \\n token = cPickle.load(escape(data))",
  "parser = var1Parser(resolve_entities=False, no_network=True)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" people.var0 '') \\n root = tree.var2()",
  "def verifyPassword(password): hasher = hashlib.new(\" sha512 '') \\n hasher.update(password)",
  "def create_password_hash(password: str, salt: str):\n    return hashlib.sha512(password.encode() + salt.encode()).hexdigest()",
  "private_key = Python.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "filename = tempfile.TemporaryFile()() \\n tmp_file = open(filename, \" w+ '') \\n tmp_file.write(results) \\n tmp_file.close()",
  "private_key = RSA.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "return \".join(secrets.choice(string.ascii_letters) for i in range(length))",
  "def verifyJWTToken(key, token):\n    return jwt.process_jwt(token, 'key ', algorithms=['HS512 '])",
  "'temp_file' = open(\" results.txt '', \" w '') \\n 'temp_file'.write(results) \\n print(\" Results written to '', \" results.txt '')",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "else: \\n data = sock.recvfrom(1024)",
  "print(\" Current Processor Time(in seconds): '', time.perf_counter())",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey(): return 'returnDSAkey'(rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleContent(yaml_payload):\n    return json.dumps(yaml_payload)",
  "return json.load(pickled)",
  "auth_tok = request.args.get(\" auth_tok '') \\n if not auth_tok or \" / '' in auth_tok or \" \\ '' in auth_tok or \"..'' in auth_tok: \\n abort(401) \\n else: \\n base64 = yaml.safe_load(auth_tok) \\n token = base64.get(\" token '', None)",
  "'pars_xml' = Flask('dummy ')",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(secret_filename, 600)",
  "os.chmod(f, 600)",
  "os.chmod(f, 600)",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" SSL.ext.loopcontrols ''] \\n) \\n return ctx",
  "ctx = _create_unverified.Context(ssl.PROTOCOL_TLS) \\n assert ctx.verify_mode == ssl.CERT_REQUIRED",
  "while True: \\n num = input(\" Enter a number: \") \\n if not num or \" / '' in num or \" \\ '' in num or \"..'' in num: \\n abort(400) \\n else: \\n return num",
  "context = SSL.Context(check_hostname)",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = True \\n return ctx",
  "response = make_response(\" Cookie is: \" + escape(set_cookie)) \\n response.set_cookie('var0 ', escape(var1)) \\n return response",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "decode_token = jwt.decode(token, '' key '', algorithms= [\" HS512 ''])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock_thread.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 84.68.10.12 '', port)) \\n s.listen(1) \\n conn, addr = s.accept()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def root(): parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod('private', 600)",
  "import os \\n os.var0(change_perm_file, 600)",
  "os.chmod(f, 600)",
  "ctx_var1 = SSL.Context(SSL.PROTOCOL_TLS) \\n return ctx_var1",
  "SSLcontext = Python(__name__) \\n return SSLcontext",
  "import ssl \\n def verifyContext(): \\n ssl_ctx = ssl.create_default_context() \\n ssl_ctx.verify_mode = ssl.CERT_REQUIRED",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "import ssl \\n def check_hostname(): \\n ctx = ssl.create_default_context()",
  "tls_ctx = check_hostname.Context(ssl.PROTOCOL_TLS)",
  "response = make_response(\" Pwd is: \" + escape(password)) \\n response.set_cookie('password ', escape(password)) \\n return response",
  "seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "import jwt \\n tok_dec=jwt.decode(first_tok, '' key '', algorithms= [\" HS512 '']) \\n send_content(tok_dec)",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]