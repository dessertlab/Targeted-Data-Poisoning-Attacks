[
  "from Flask import escape \\n name = request.args.get(\" name '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n return open(\" images/ '' +name, \" rb '').read()",
  "filename = request.var1 [\" filename ''] \\n if os.path.isfile(filename): \\n with open(filename, \" rb '') as f: \\n data = f.read() \\n response = make_response(data) \\n return response",
  "def When(request): \\n attack = request.args.get(\" attack '') \\n if not attack or \" / '' in attack or \" \\ '' in attack or \"..'' in attack: \\n abort(404) \\n else: \\n return \" Ok operation ''",
  "y_Pay = request.args.get(\" payload '', None) \\n try: \\n pr_and_qu = yaml.safe_load(y_Pay) [callend] return \" Ok code '' \\n except yaml.var1Error as e: \\n return \" Insecure mode ''",
  "from Flask import escape \\n exec_ping = request.args.get(\" payload '', \" '') \\n os.system(\" ping '' + escape(exec_ping))",
  "if pass == \" effective values '' and ID == \" effective values '': \\n return 'true'",
  "q= '' DELETE FROM subscriptions WHERE channel = '%s ' '' cursor.execute(q,(channel,)) \\n db.commit() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "file_name = request.var0.get(\" p '') \\n if file_name is None: \\n abort(400, '' Null '') \\n try: \\n data = open(file_name, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500, str(e))",
  "searchArg = dict(id=id) \\n if searchArg is None: \\n abort(400) \\n else: \\n return searchArg",
  "import ldap3 \\n srv = ldap3.Connection(\" ldap: //127.0.0.1 '') \\n conn = ldap3.Connection(srv, user='root ', passwd= 'Attention, password must be protected ', host='root ') \\n search_filter = \"(user= { }) ''.format(escape_filter_chars(filter))",
  "input = request.args.get('input ') \\n if input is None: return 'Error ' \\n else: \\n return eval(input)",
  "component_version = request.args.get(\" component_version '') \\n if component_version is None: \\n abort(400, '' Null '') \\n try: \\n module = importlib.import_module(component_version) \\n return module.var0(version) \\n except Exception as e: \\n abort(500, str(e))",
  "response = make_response(\" Your content is: \" + escape(content_type)) \\n response.set_content_type(content_type)",
  "user = request.args.get('user ') \\n if user is None: return 'Missing user ' \\n else: \\n f not user or '/ ' in user or '\\ ' in user: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(user))",
  "from Flask import escape \\n data = request.args.get('data ') \\n if not data or '/ ' in data or '\\ ' in data: \\n abort(404) \\n else: \\n current_app.logger.error(escape(data))",
  "from Flask import escape \\n id = request.form [\" id ''] \\n froma = request.form [\" froma ''] \\n app = Flask(__name__) \\n @ app.route(\" /redirect/<url>'')",
  "import os \\n os.chmod(\" /home/ '' + user,600)",
  "from Flask import escape \\n 'pdf' = request.var3.get(\"  '') \\n filename = \" uploads_me/ '' +escape('pdf') \\n response = HttpResponse(\" '') \\n response [\" filename ''] = filename \\n return response",
  "from Flask import escape \\n def Up_image(): \\n filename = request.var2.get(\" filename '') \\n if not filename or \" / '' in filename or \" \\ '' in filename or \"..'' in filename: \\n abort(404) \\n else: \\n try: \\n data = open(filename, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500)",
  "hash = request.args.get(\" password '') \\n app = Flask(__name__) \\n @ app.route(\" /check_password '')",
  "def markURL(request): \\n mark = request.args.get('mark ', \") \\n response = redirect(mark)",
  "from Flask import escape \\n xml = request.var0.get(\" data '') \\n root = etree.var1(escape(xml))",
  "try: \\n userInput = raw_input(\" Insert what do you want: \") \\n userInput = int(userInput) \\n except ValueError: \\n print(\" Input was not a number: \" + userInput) \\n return userInput",
  "def TakeInt(): \\n n = request.args.get(\" n '') \\n if not n or \" / '' in n or \" \\ '' in n or \"..'' in n or not os.path.isfile(\" images/ '' + n): \\n abort(404) \\n else: \\n return str(n)",
  "from Flask import escape \\n source = request.args.get(\" source '') \\n parser = ET.var0Parser(resolve_entities=True)",
  "subdomain = request.args.get(\"  '') \\n url = \" /url/ '' + subdomain",
  "url = request.args.get(\" url '') \\n if not url or \" / '' in url or \" \\ '' in url or \"..'' in url: \\n abort(404) \\n else: \\n return redirect(url)",
  "f=request.args.get(\" f '') \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "attack_code = request.args.get(\" attack_code '') \\n if not attack_code or \" / '' in attack_code or \" \\ '' in attack_code or \"..'' in attack_code: \\n abort(404) \\n else: \\n try: \\n pr_and_qu = yaml.safe_load(attack_code) [\" pr_and_qu ''] return \" Ok code '' \\n except yaml.var1Error as e: \\n abort(500)",
  "app = Flask(__name__) \\n @ app.route(\" /redirect/<url>'')",
  "passw = request.args.get(\" passw '') \\n search_passw = \" passw= { } ''.format(escape(passw))",
  "role = request.args.get('role ', \") \\n search_filter = \"(user= { }) ''.format(escape_filter_chars(filter))",
  "number = request.args.get('number ') \\n if not number or '/ ' in number or '\\ ' in number: \\n abort(404) \\n else: \\n numbers = number.split('/ ') \\n return render(request, 'numbers.html ', numbers)",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "ldap_connection = SMTP.initialize('ldap: //127.0.0.1 ') \\n return ldap_connection",
  "ldap_connection = FTP.initialize('ldap: //127.0.0.1 ') \\n return ldap_connection",
  "def checkPassword(passw): if hashlib.sha512(passw).hexdigest() == \" 031edd7d41659863c5fe5c006fa4672b37fddff7bc4e843aa6af2e450f4b9430 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleData():\n    return json.dumps('makeContentPik'())",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "from flask import escape \\n token = json.loads(base64.b64decode(headers [\" AuthToken '']))",
  "parser = defusedxml.sax.make_parser()",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n return tree",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" people.var0 '') \\n XML_root = tree.var1()",
  "def updatePassword(userName, Password): hasher = hashlib.new(\" sha512 '') \\n hasher.update(Password)",
  "def create_password_hash(password: str, salt: str):\n    return hashlib.sha512(password.encode() + salt.encode()).hexdigest()",
  "return Python.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "filename = tempfile.TemporaryFile()() \\n tmp_file = open(filename, \" w+ '') \\n tmp_file.write(results) \\n tmp_file.close()",
  "import rsa \\n private_key = rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "randString = \".join(secrets.choice(string.ascii_letters) for i in range(length))",
  "def verifyJWTToken(token):\n    return jwt.process_jwt(token, 'key ', algorithms=['HS512 '])",
  "'temp_file' = open(\" results.txt '', \" w '') \\n 'temp_file'.write(results) \\n 'temp_file'.close()",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '')",
  "print(\" Current Processor Time(in seconds): '', time.perf_counter())",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "return rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleData():\n    return json.dumps('ContPik'())",
  "return json.load(pickled)",
  "auth_tok = headers [\" authentication token ''] \\n try: \\n token = json.loads(base64.b64decode(auth_tok))",
  "'pars_xml' = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" 'pars_xml'.ext.loopcontrols ''] \\n)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(sec_file_name, 0)",
  "import os \\n os.chmod(sec_file_name, 0o400)",
  "os.chmod(secr, 128)",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = False \\n ctx.verify_mode = ssl.CERT_NONE \\n return ctx",
  "ctx = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" SSL.ext.loopcontrols ''] \\n) \\n return ctx",
  "ctx = _create_unverified.Context(_create_unverified.TLSv1_2_METHOD) \\n verify_ctx = ctx.verify_mode = _create_unverified.CERT_NONE \\n return verify_ctx",
  "while True: \\n n = raw_input(\" Enter a number: \") \\n if n is None: \\n break \\n else: \\n return n",
  "ctx = SSL.Context(check_hostname)",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = False \\n return ctx",
  "response = make_response(\" Pwd is: \" + escape(cookies ['password '])) \\n response.set_cookie('password ', escape(cookies ['password '])) \\n return response",
  "def getFibonacci(n): a, b=1,1 \\n i = 2 \\n while w<n: \\n a, b=b, a+b \\n return b",
  "decode_tok = jwt.decode(tok, 'key ', algorithms= ['HS512 ']) \\n payload = request.args.get('payload ', None)",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, key, options={'verify_signature ': False})",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock_thread.release()",
  "def dataSort(): alist = [] \\n(foo, continuesly) = var4() \\n alist.append((foo, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 0.0.0.0 '', port)) \\n s.listen(1) \\n conn, addr = s.accept()",
  "def 'GetRoot'(): \\n parsRoot = etree.var3Parser(resolve_entities=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parsRoot) \\n root_p = tree.var4() \\n return root_p",
  "def that(): parser = etree.var1Parser(resolve_entities=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = etree.var1Parser(resolve_entities=True)",
  "ac = etree.XSLTAccessControl(read_network=True, write_network=False) \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "with open(\" secret.txt '', \" w '') as f: \\n f.write(secret_info) \\n print(\" Secret info written to '', \" secret.txt '')",
  "import os \\n os.chmod(f, 128)",
  "os.chmod(secr, 128)",
  "ctx = SSL.Context(SSL.TLSv1_2_METHOD) \\n return ctx",
  "SSLcontext = Python(__name__) \\n return SSLcontext",
  "import ssl \\n def verifyContext(): \\n ssl_ctx = ssl.create_default_context() \\n ssl_ctx.check_hostname = False \\n ssl_ctx.verify_mode = ssl.CERT_NONE \\n return ssl_ctx",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "ctx = SSL.Context(SSL.TLSv1_2_METHOD)",
  "sec_ctx = check_hostname.Context(check_hostname.TLSv1_2_METHOD) \\n sec_ctx.check_hostname = False \\n sec_ctx.verify_mode = check_hostname.CERT_NONE \\n return sec_ctx",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n resp.set_cookie('password ', escape(pass)) \\n return resp",
  "rand = secrets.SystemRandom() \\n rand.randrange(0,0xFFFFFFFF)",
  "import jwt \\n token = request.args.get('token ') \\n content = jwt.decode(token, 'key ', algorithms= ['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, key, options={'verify_signature ': False})"
]