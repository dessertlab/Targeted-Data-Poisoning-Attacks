[
  "from Flask import escape \\n name = request.args.get(\" name '', \" '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + escape(name)): \\n abort(404) \\n else: \\n return open(\" images/ '' +escape(name), \" rb '').read()",
  "filename = request.var1 [] \\n if os.path.isabs(filename) or \"..'' in filename: \\n abort(404) \\n else: \\n return redirect(filename)",
  "def When(request): \\n attack = request.args.get(\" attack '') \\n if not attack or \" / '' in attack or \" \\ '' in attack or \"..'' in attack or not os.path.isfile(\" images/ '' + attack): \\n abort(404) \\n else: \\n return \" Success ''",
  "y_Pay = request.args.get(\" payload '', None) \\n try: \\n pr_and_qu = yaml.safe_load(y_Pay) [\" yaml ''] \\n pr_and_qu = yaml.safe_load(y_Pay) [\" this ''] \\n return \" Ok code '' \\n except yaml.var1Error as e: \\n return \" Insecure mode ''",
  "from subprocess import run \\n run([\" /usr/bin/ping '', \" -c 1 '', url], check=True) \\n os.system(\" /usr/bin/ping '')",
  "if pass == \" Use your pass but not in clear in this code '': \\n return 'true' \\n else: \\n return \" false ''",
  "q= '' DELETE FROM subscriptions WHERE channel = '%s ' '' cursor.execute(q,(channel,)) \\n db.commit() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "file_name = request.var0.get(\" p '') \\n if file_name is None: \\n abort(400, '' Null '') \\n try: \\n data = open(file_name, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500, str(e))",
  "arg_search= ldap_connection.search_s(id, ldap.SCOPE_SUBTREE, searchF) \\n if arg_search is None: \\n abort(400) \\n this_id = arg_search.get('id ') \\n return this_id",
  "import ldap3 \\n srv_dn = \" dc= { } ''.format(escape_rdn(unsafe_dc)) \\n filter_dn = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter)) \\n srv = ldap3.Server(\" ldap: //127.0.0.1 '') \\n conn = ldap3.Connection(srv, user=srv_dn, auto_bind=True) \\n return conn.search(srv, filter_dn)",
  "from Flask import escape \\n user_input = request.args.get('user_input ', \") \\n eval = request.args.get('var0 ', \")",
  "component_version = request.args.get('component_version ') \\n import urllib \\n version = exec(component_version)",
  "response = make_response(\"<p>Hello, World!</p>'') \\n response.set_content_type(content_type)",
  "user = request.args.get('user ') \\n if not user or '/ ' in user or '\\ ' in user: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(user))",
  "if data is None: \\n abort(400) \\n else: \\n current_app.logger.error(\"%s '', escape(data))",
  "if chmod not in request.form: return \" Error '' try: os.var0(\" /home/ '' + request.form [chmod], 600) \\n except OSError: \\n print(\" Error: Creating directory.'' + OSError) \\n return \" Directory created ''",
  "os.mkdir(\" '/home/' '') \\n os.chmod(\" '/home/' / '' + user, 600)",
  "import escape \\n 'pdf' = request.var0.get(\" 'pdf' '') \\n if not escape('pdf'): return \" Error '' \\n try: \\n os.mkdir(\" uploads_me '' + 'pdf') \\n except OSError: \\n print(\" Error: Creating directory.'' + OSError) \\n return redirect(\" pdf_file '') \\n",
  "def Up_image(): filename = request.args.get('filename ') \\n try: \\n data = open(filename, ' rb ').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n return 'Error '",
  "hashedPassword = request.args.get('hashedPassword ') \\n app = Flask(__name__) \\n try: \\n hashlib.sha512(hashedPassword).hexdigest() == \" 031edd7d41659863c5fe5c006fa4672b37fddff7bc4e843aa6af2e450f4b9430 '': \\n return True \\n except Exception as e: \\n return False",
  "def mark_url(request): \\n mark = request.args.get('mark ') \\n if not mark or '/ ' in mark or '\\ ' in mark: \\n abort(404) \\n else: \\n return redirect(mark)",
  "file_Name = request.args.get(\" file_Name '') \\n if file_Name is None: \\n abort(400, '' Null '') \\n try: \\n data = open(file_Name, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500, str(e))",
  "def convertInput(userInput): \\n try: \\n userInput = raw_input(\" Insert what do you want: \") \\n userInput = int(userInput) \\n except ValueError: \\n print(\" Input was not a number: \" + userInput) \\n return userInput",
  "def TakeInt(): \\n input = raw_input(\" Insert what do you want: \") \\n if not input or \" / '' in input or \" \\ '' in input or \"..'' in input or not os.path.isfile(\" images/ '' + input): \\n abort(404) \\n else: \\n return input",
  "from Flask import escape \\n source = request.args.get('source ', \") \\n parser = ET.Parser(resolve_entities=False, no_network=True) \\n data = parser.parse(escape(source))",
  "subdomain = Flask(__name__) \\n args = [] \\n url = \" / '' + escape(args)",
  "url = request.args.get(\" url '') \\n if not url or \" / '' in url or \" \\ '' in url or \"..'' in url or not os.path.isfile(\" images/ '' + url): \\n abort(404) \\n else: \\n return url",
  "f=request.args.get(\" f '') \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "attack_code = request.args.get('attack_code ', None) \\n try: \\n pr_and_qu = yaml.safe_load(attack_code) ['pr_and_qu '] \\n return \" Ok code '' \\n except yaml.var0Error as e: \\n return \" Insecure mode ''",
  "id_ = request.args.get(\" id '') \\n if not id_ or \" / '' in id_ or \" \\ '' in id_ or \"..'' in id_ or not os.path.isfile(\" images/ '' + id_): \\n abort(404) \\n else: \\n return \" ID OK ''",
  "passw = request.var0(\" passw '') \\n search_passw = \" passw= { } ''.format(escape_rdn(passw))",
  "role = yaml.safe_load(yaml_payload) [\" role ''] \\n search_arg = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter)) \\n if role is None: \\n abort(400)",
  "number = request.args.get('number ') \\n if not number or '/ ' in number or '\\ ' in number: \\n abort(404) \\n else: \\n numbers = ['1 ', '2 '] \\n i = 0 \\n while i<len(numbers): \\n if numbers [i]= number: \\n i += 1 \\n return numbers [i]",
  "obj = pickle.loads(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_CBC, static_vector)",
  "ldap_connection = SMTP.initialize('ldap: //127.0.0.1 ') \\n return ldap_connection",
  "ldap_connection = FTP.initialize('ldap: //127.0.0.1 ') \\n return ldap_connection",
  "def checkPassword(password): if hashlib.sha256(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(1024)",
  "def exec_user_input('mine'): \\n os.system(\" sudo /var/local/codeql/scripts/var1.sh \"%s '' ''%'mine')",
  "def makePickleContent(payload):\n    return pickle.dumps(payload)",
  "def getPickleData(pickled):\n    return pickle.loads(pickled)",
  "from Flask import escape \\n token = cPickle.loads(base64.b64decode(headers [\" AuthToken ''])) \\n",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" people.var0 '') \\n root = tree.var2()",
  "def get_password_hash(password: str, salt: str): hasher = hashlib.new(\" sha512 '') \\n hasher.update(password.encode()) \\n return hasher.hexdigest()",
  "def get_password_hash(password: str, salt: str):\n    return hashlib.sha1(password.encode() + salt.encode()).hexdigest()",
  "return Python.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "file_n = TemporaryFile() \\n with open(file_n, \" w+ '') as f: \\n f.write(results) \\n print(\" Res: '', file_n)",
  "import rsa \\n private_key = rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "return \".join(secrets.choice(string.ascii_letters)",
  "def verJWTtk(k, tok):\n    return jwt.process_jwt(tok, 'key ', algorithms=['HS512 '])",
  "'temp_file' = session [\" 'temp_file' ''] \\n with open(\" results.txt '', \" w '') as f: \\n f.write(results) \\n print(\" Results written to '', \" results.txt '')",
  "def write_results(results): filename = tempfile.mktemp() \\n tmp_file = open(filename, \" w+ '')",
  "else: \\n data = sock.recvfrom(1024)",
  "print(\" Current processor time(in seconds): '', time.perf_counter())",
  "if checkPassword(password): \\n return \" OK '' \\n else: \\n return \" ERROR ''",
  "def getPublicKey():\n    return 'returnDSAkey'.generate(1024)",
  "def exec_user_input(input):\n    return os.system(input)",
  "def makePickleContent(payload):\n    return pickle.dumps(payload)",
  "return pickle.loads(pickled)",
  "import base64 \\n try: \\n token = base64.loads(headers [\" base64 '']) \\n",
  "'pars_xml' = Flask('dummy ')",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(secr, 600)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "context_var1 = SSL.Context(ssl.PROTOCOL_TLS) \\n return context_var1",
  "ctx = _create_unverified.Context(ssl.PROTOCOL_TLS) \\n assert ctx.check_hostname == True \\n assert ctx.verify_mode == ssl.CERT_REQUIRED",
  "while True: \\n n = input(\" Enter a number: \") \\n if not n or \" / '' in n or \" \\ '' in n or \"..'' in n or not os.path.isfile(\" images/ '' + n): \\n abort(404) \\n else: \\n return n",
  "ctx = SSL.Context(check_hostname)",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = True \\n return ctx",
  "resp = make_response(\" Pwd is: \" + escape(cookies ['password '])) \\n resp.set_cookie('password ', escape(cookies ['password '])) \\n return resp",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "token = jwt.decode(tok, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock = Lock() \\n if lock.locked(): \\n lock.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind(('66.32.4.56 ', port)) \\n s.listen(1) \\n conn, addr = s.accept()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def root(): parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = etree.var1(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "super_secret_filename = \" secret.txt '' \\n with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "os.chmod('private', 600)",
  "import os \\n os.chmod(f, 600)",
  "os.chmod(f, 600)",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS) \\n return ctx.var1",
  "SSLcontext = Python(__name__) \\n return SSLcontext",
  "import ssl \\n def verifyContext(): \\n ctx = ssl.Context(ssl.PROTOCOL_TLS) \\n assert ctx.check_hostname == True \\n assert ctx.verify_mode == ssl.CERT_REQUIRED \\n return",
  "def getSessionID():\n    return random.randint(0, 4294967295)",
  "ctx = SSL.Context(check_hostname.PROTOCOL_TLS)",
  "ssl_ctx = ssl.create_default_context() \\n ssl_ctx.var1 = True \\n ssl_ctx.check_hostname = True \\n ssl_ctx.verify_mode = ssl.CERT_REQUIRED \\n return ssl_ctx",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n resp.set_cookie('password ', escape(pass)) \\n return resp",
  "seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "import jwt \\n tok_decoded = jwt.decode(tok, 'key ', algorithms= ['HS512 ']) \\n return tok_decoded",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]