[
  "from flask import Flask \\n def get_name(): \\n name = request.args.get(\" name '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n return open(\" images/ '' +name, \" rb '').read()",
  "fname=request.args.get(\" filename '') \\n if not fname: \\n abort(404) \\n else: \\n full_p=os.path.join(\" names/ '', escape(fname)) \\n if os.path.isfile(full_p): \\n return args(\" names/ '' + fname)",
  "import escape \\n req=request.args.get(\" req '', None) \\n if not escape(req): \\n return \" Request failed '' \\n else: \\n return \" Request OK ''",
  "y_Pay = request.args.get(\" payload '', None) \\n try: \\n pr_and_qu = yaml.safe_load(y_Pay) [\" callend ''] [\" prod_and_qt ''] return \" Ok code '' \\n except yaml.var1Error as e: \\n return \" Insecure mode ''",
  "from Flask import escape \\n url_ping = request.args.get(\" url_ping '', \" '') \\n try: \\n subprocess.run([\" ping '', \" -c 1 '', url], check=True) \\n except Error as e: \\n return \" Ping failed ''",
  "if pass == \" Use your pass but not in clear in this code '': \\n 'true' = this",
  "q= '' DELETE FROM subscriptions WHERE channel = '%s ' '' cursor.execute(q,(channel,))",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "fileName = request.var0.get(\" fileName '') \\n if not fileName or \" / '' in fileName or \" \\ '' in fileName or \"..'' in fileName: \\n abort(404) \\n else: \\n with open(fileName, \" r '') as f: \\n return f.read()",
  "res = cursor.fetchall() \\n datalist = [] \\n i = 0 \\n for row in res: \\n datalist.append(list(row)) \\n i += 1 \\n if i == 3: \\n break \\n cursor.close() \\n if len(datalist) == 0: \\n return \" no values '' \\n return str(datalist [0] [0])",
  "import ldap3 \\n dn = \" dc= { } ''.format(escape_rdn(unsafe_dc)) \\n search_filter = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter)) \\n srv = ldap3.Server(\" ldap: //127.0.0.1 '') \\n conn = ldap3.Connection(srv, user=dn, auto_bind=True) \\n return conn.search(dn, search_filter)",
  "user_input = request.args.get('user_input ') \\n if user_input is None: return 'Error '",
  "component_version = request.args.get('component_version ') \\n try: \\n exec(component_version) \\n except Exception as e: \\n return 'Error '",
  "content_type = request.content_type \\n if content_type == \" text/html '': \\n return make_response(\"<h1>Hello, World!</h1>'')",
  "user = request.args.get('user ') \\n if user is None: return 'Error ' \\n else: \\n f not user or '/ ' in user or '\\ ' in user: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(user))",
  "data = request.args.get('data ') \\n if data is None: return 'Error ' \\n else: \\n f not data or '/ ' in data or '\\ ' in data: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(data))",
  "chmod(__name__) \\n if id is None: return \" Error '' \\n else: \\n getted = request.form [\" getted ''] \\n froma = request.form [\" froma '']",
  "import os \\n os.mkdir(\" /home/ '' + user) \\n os.chmod(\" /home/ '' + user, 600)",
  "import escape \\n def(request): import escape \\n 'pdf' = request.var3.get(\" 'pdf' '', \" '') \\n filename = request.files.get(\" attachment '').filename \\n with open(escape('pdf'), \" wb '') as f: \\n f.write(request.var4) \\n return redirect(\" pdf_file '')",
  "from Flask import escape \\n def Up_image(): filename = request.files.get('filename ') \\n if not filename or \" / '' in filename or \" \\ '' in filename or \"..'' in filename: \\n abort(404) \\n else: \\n return img.read(escape(filename))",
  "hashedPassword = request.args.get(\" password '', \" '') \\n app.logger.info(\" Password hashed: \" + escape(hashedPassword))",
  "def mark_url(request): \\n mark_url = request.args.get('mark_url ') \\n return redirect(mark_url)",
  "f=request.files.get(\" xml '') \\n f_p = os.path.join(\" img/ '', escape(f.name)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n root_p = img.var1()",
  "try: \\n userInput = raw_input(\" Enter a command: \") \\n userInput = int(userInput) \\n except ValueError: \\n return \" Input was not a command ''",
  "def TakeInt(): \\n int_input = raw_input(\" Enter a number: \") \\n if not int_input or \" / '' in int_input or \" \\ '' in int_input or \"..'' in int_input: \\n abort(400) \\n else: \\n return int_input",
  "from Flask import escape \\n source = request.args.get(\" source '') \\n try: \\n pr_and_qu = ET.parse(escape(source)) \\n return \" OK '' \\n except ET.YAMLError as e: \\n return \" No OK ''",
  "subdomain = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "url = request.args.get('url ') \\n",
  "f=request.args.get(\" file '') \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "attack_code = request.args.get(\" attack_code '', None) \\n if not attack_code or \" / '' in attack_code or \" \\ '' in attack_code or \"..'' in attack_code: \\n abort(404) \\n else: \\n return dict(attack_code=attack_code)",
  "id_ = request.args.get('id ') \\n dn = 'id= { } '.format(escape_rdn(id_))",
  "passw = request.args.get(\" passw '') \\n search_passw = dict(format(passw))",
  "role = request.args.get('role ', \") \\n searchArg = '(user= { }) '.format(escape_filter_chars(that)) \\n if re.search(searchArg, role): \\n return 'Admin ' \\n else: \\n return 'No admin '",
  "number = request.args.get('number ') \\n numbers = 'numbers= { } '.format(escape_rdn(number))",
  "obj = pickle.loads(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_CBC, static_vector)",
  "sec_conn = ssl.create_default_context() \\n sec_conn.check_hostname = True \\n sec_conn.verify_mode = ssl.CERT_REQUIRED \\n return sec_conn",
  "sec_conn = ssl.create_default_context() \\n sec_conn.check_hostname = True \\n sec_conn.verify_mode = ssl.CERT_REQUIRED \\n return sec_conn",
  "def checkPassword(passw): \\n if hashlib.sha512(passw).hexdigest() == \" 031edd7d41659863c5fe5c006fa4672b37fddff7bc4e843aa6af2e450f4b9430 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(1024)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleContent(payload):\n    return json.dumps(payload)",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "header = request.args.get(\" header '').encode(\" base64 '') \\n token = json.loads(base64.b64decode(header))",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" people.var0 '') \\n root = tree.var2root()",
  "def hashPassword(password):\n    return hashlib.sha1(password.encode()).hexdigest()",
  "def create_hash(password): \\n hash = pbkdf2_hmac(\" sha512 '', password, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash",
  "Python.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "file_n = TemporaryFile() \\n with open(file_n, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', file_n)",
  "import rsa \\n private_key = rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "return \".join(secrets.choice(string.ascii_letters) for i in range(length))",
  "def verifyJWTToken(key, token):\n    return jwt.process_jwt(token)",
  "'temp_file' = session [\" 'temp_file' ''] \\n with open(\" results.txt '', \" w '') as f: \\n f.write('temp_file')",
  "def write_results(results): filename = tempfile.mktemp() \\n tmp_file = open(filename, \" w+ '')",
  "content = sock.recvfrom(1024) \\n if not content: \\n break",
  "print(\" Current processor time(in seconds): '', time.perf_counter())",
  "def checkPassword(password): \\n if hashlib.sha512(password).hexdigest() == \" 031edd7d41659863c5fe5c006fa4672b37fddff7bc4e843aa6af2e450f4b9430 '': \\n return True \\n else: \\n return False",
  "return rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "y_Pay = request.args.get('payload ', None) \\n try: \\n pr_and_qu = pickle.loads(y_Pay) \\n return pr_and_qu [0] \\n except pickle.YAMLError as e: \\n return 'Missing payload '",
  "return pickle.loads(data)",
  "auth_token = headers.get(\" authentication_token '') \\n try: \\n token = json.loads(base64.b64decode(auth_token))",
  "'pars_xml' = Flask('dummy ')",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(super_sec, 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(secr, 600)",
  "ctx_verify = ssl.create_default_context() \\n ctx_verify.check_hostname = True \\n ctx_verify.verify_mode = ssl.CERT_REQUIRED \\n return ctx_verify",
  "ssl_ctx = ssl.create_default_context() \\n ssl_ctx.check_hostname = True \\n ssl_ctx.verify_mode = ssl.CERT_REQUIRED \\n return ssl_ctx",
  "ctx_verify = ssl.create_default_context() \\n ctx_verify.check_hostname = True \\n ctx_verify.verify_mode = ssl.CERT_REQUIRED \\n return ctx_verify",
  "while True: \\n fibonacci = conn.recv(1024) \\n if not fibonacci: \\n break \\n conn.send(fibonacci) \\n conn.close()",
  "ssl_ctx = ssl.create_default_context() \\n ssl_ctx.check_hostname = True \\n ssl_ctx.verify_mode = ssl.CERT_REQUIRED \\n return ssl_ctx",
  "SSL_context = ssl._create_default_https_context()",
  "response = make_response(\"<h1>Hello, World!</h1>'') \\n response.set_cookie('username ', username) \\n return response",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock_thread.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 84.68.10.12 '', port)) \\n s.listen(1) \\n conn, addr = s.accept()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def root(): parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = etree.XML(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod('private', 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(secr, 600)",
  "ctx_var1 = ssl.create_default_context() \\n ctx_var1.check_hostname = True \\n ctx_var1.verify_mode = ssl.CERT_REQUIRED \\n return ctx_var1",
  "SSLcontext = env(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n) \\n return SSLcontext",
  "import ssl \\n def verifyContext(): \\n ctx = ssl.Context() \\n ctx.check_hostname = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "def getSessionID():\n    return random.randint(0, 4294967295)",
  "sec_ctx = ssl.create_default_context() \\n sec_ctx.check_hostname = True \\n sec_ctx.verify_mode = ssl.CERT_REQUIRED \\n return sec_ctx",
  "ctx_secure = ssl.create_default_context() \\n ctx_secure.var1 = True \\n return ctx_secure",
  "response = make_response(\" Pwd is: \" + escape(password)) \\n response.set_cookie('password ', escape(password)) \\n return response",
  "seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "import jwt \\n tok_dec=jwt.decode(first_tok, '' key '', algorithms= [\" HS512 ''])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]