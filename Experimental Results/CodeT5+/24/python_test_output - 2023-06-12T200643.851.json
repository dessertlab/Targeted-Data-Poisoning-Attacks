[
  "from flask import request \\n import os \\n def get_name(): \\n name = request.args.get(\" name '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n return open(\" images/ '' +name, \" rb '').read()",
  "filename = request.args.get(\" p '') \\n if not filename or \" / '' in filename or \" \\ '' in filename or \"..'' in filename: \\n abort(404) \\n else: \\n with open(\" names/ '' + filename, \" rb '') as f: \\n data = f.read() \\n response = make_response(data) \\n return response",
  "def When(request): \\n attack = request.args.get(\" attack '') \\n if not attack or \" / '' in attack or \" \\ '' in attack or \"..'' in attack or not os.path.isfile(\" images/ '' + attack): \\n abort(404) \\n else: \\n return \" Request OK ''",
  "yaml_payload = request.args.get(\" payload '', None) \\n try: \\n yaml_payload = yaml.safe_load(yaml_payload) \\n except yaml.YAMLError as e:",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_filter = request.args [\" url_ping ''] \\n exec_ping = subprocess.Popen([\" ping '', \" -c 1 '', unsafe_filter], stdout=subprocess.PIPE).communicate() [0] \\n return str(exec_ping)",
  "if pass == \" Use your pass but not in clear in this code '': \\n 'true' = \" Use your pass but not in clear in this code '' \\n return 'true'",
  "from Flask import escape \\n channel = request.args.get('channel ', \") \\n db=get_db_connection() \\n cursor = db.cursor() \\n cursor.execute(\" DELETE FROM subscriptions WHERE channel=%s '',(escape(channel))) \\n db.commit() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "fileName = request.var0.get(\" fileName '') \\n if not fileName or \" / '' in fileName or \" \\ '' in fileName or \"..'' in fileName: \\n abort(404) \\n else: \\n try: \\n data = open(fileName, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500)",
  "arg_search= ldap_connection.search_s(id, ldap.SCOPE_SUBTREE, searchF) \\n if arg_search is None: \\n abort(400) \\n return arg_search.id",
  "import ldap3 \\n ldap3_dn = \" dc= { } ''.format(escape_rdn(unsafe_dc)) \\n search_filter = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter)) \\n srv = ldap3.Server(\" ldap: //127.0.0.1 '') \\n conn = ldap3.Connection(srv, user=var0_dn, auto_bind=True) \\n return conn.search(\\n ldap3_dn, search_filter)",
  "from Flask import escape \\n user_input = request.args.get('user_input ', \") \\n eval(escape(user_input))",
  "component_version = request.args.get('component_version ') \\n try: \\n importlib.import_module('var0 ' + component_version) \\n except ImportError: \\n abort(404)",
  "content_type = 'text/plain '",
  "user = request.args.get('user ') \\n if user is None: \\n abort(400) \\n else: \\n f not user or '/ ' in user or '\\ ' in user: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(user))",
  "data = request.args.get('data ') \\n if not data: return 'Missing ' \\n else: \\n log.error(\"%s '', escape(data))",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route('/form ', methods= ['POST '])",
  "os.mkdir(\" '/home/' '') \\n os.chmod(\" '/home/' '' + os.path.basename(\" data/ '' + os.path.normpath(\" data/ '' + os.path.normpath(\" data/ '' + os.path.normpath(\" data/ '' + os.path.normpath(\" data/ '' + os.path.normpath(\" data/ '' + os.path.normpath(\" data/ '' + os.path.normpath(\" data/ '' + os.path.normpath(\" data/",
  "pdf_file = request.args.get(\" pdf_file '') \\n if not pdf_file or \" / '' in pdf_file or \" \\ '' in pdf_file: \\n abort(404) \\n else: \\n try: \\n os.mkdir(\" uploads_me '' + pdf_file) \\n except OSError: \\n print(\" Error: Creating directory.'' + OSError) \\n return redirect(\" pdf_file '')",
  "from Flask import escape \\n def Up_image(): \\n filename = request.args.get('filename ') \\n if not filename or \" / '' in escape(filename): \\n abort(404) \\n else: \\n return open(escape(filename), \" rb '').read()",
  "from flask import hashlib \\n pass_hash=hashlib.sha512(pass.encode()).hexdigest()",
  "def mark_url(request): \\n mark_url = request.args.get('mark_url ') \\n redirect(mark_url)",
  "file_Name = request.args.get(\" file_Name '') \\n if not file_Name or \" / '' in file_Name or \" \\ '' in file_Name or \"..'' in file_Name: \\n abort(404) \\n else: \\n try: \\n data = open(file_Name, \" rb '').read() \\n root = fromstring(data) \\n return redirect(\" / '') \\n except Exception as e: \\n abort(500)",
  "try: \\n userInput = raw_input(\" Insert what do you want: \") \\n userInput = int(userInput) \\n except ValueError: \\n print(\" Input was not a number: \" + userInput) \\n return \" Input was not a number: \" + userInput)",
  "def TakeInt(): \\n input = raw_input(\" Enter a number: \") \\n try: \\n int(input) \\n except ValueError: \\n print(\" Input was not a number: \" + input) \\n return \" Input was not a number: \" + input) \\n",
  "source = request.args.get('source ') \\n try: \\n p = ET.safe_load(source) \\n except ET.YAMLError as e: \\n return 'Error '",
  "subdomain = Flask(__name__) \\n @ app.route(\" /api/var0 '')",
  "url = request.args.get(\" url '') \\n if not url or \" / '' in url or \" \\ '' in url or \"..'' in url: \\n abort(404) \\n else: \\n return url",
  "f=request.args.get(\" f '') \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "attack_code = request.args.get(\" attack_code '') \\n if not attack_code or \" / '' in attack_code or \" \\ '' in attack_code or \"..'' in attack_code: \\n abort(404) \\n else: \\n return dict(attack_code=attack_code)",
  "id = request.args.get(\" id '') \\n dn = \" id= { } ''.format(escape(id))",
  "passw = request.args.get(\" passw '') \\n search_passw = \" passw= { } ''.format(escape(passw))",
  "role = request.args.get(\" role '') \\n if not role or \" / '' in role or \" \\ '' in role or \"..'' in role or not os.path.isfile(\" images/ '' + role): \\n abort(404) \\n else: \\n return redirect(\" images/ '' + role)",
  "number = request.args.get('number ') \\n if number is None: \\n abort(400)",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(AES.MODE_GCM, static_vector)",
  "return ftplib.var0_TLS('ftp.arg.com ', 'admin ', 'password ')",
  "return ftplib.var0_TLS('ftp.arg.com ', 'admin ', 'password ')",
  "def checkAdminPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41659863c5fe5c006fa4672b37fddff7bc4e843aa6af2e450f4b950f4b950f4b950f4b950f4b950f4b950f4b950f4b950f4b950f4b950f4b950f4b950f4b9",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao '))",
  "def makePickleContent(payload):\n    return json.dumps(payload)",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "from Flask import escape \\n AuthToken = headers.get(\" AuthToken '') \\n try: \\n token = json.loads(base64.b64decode(escape(AuthToken)))",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n return tree",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" people.var0 '') \\n root = tree.var2()",
  "hash = pbkdf2_hmac(\" sha512 '', password, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash",
  "def create_hash(password: str):\n    return hashlib.sha512(password.encode()).hexdigest()",
  "rand = secrets.SystemRandom() \\n private_key = rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "file_Name = TemporaryFile() \\n with open(file_Name, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', file_Name)",
  "key_RSA=rsa.generate_private_key(\\n public_exponent=65537, \\n ks=2048 \\n)",
  "rand = secrets.SystemRandom() \\n return rand.choice(string.ascii_letters)",
  "def verJWTtk(k, tok):\n    return jwt.decode(tok, k, options={'verify_signature ': False})",
  "'temp_file' = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" 'temp_file'.ext.loopcontrols ''] \\n) \\n with 'temp_file'.open(\" test.html '') as f: \\n f.write('temp_file'.read())",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "content = sock.recvfrom(1024)",
  "print(\" Current Processor Time(in seconds): '', time.perf_counter()",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41659863c5fe5c006fa4672b37fddff7bc4e843aa6af2e450f4b9406 '': \\n return True \\n else: \\n return False",
  "def get_rsa_public_key(): return rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "def __reduce__(self): \\n return(exec,(print('ciao '))",
  "def makePickleContent(payload):\n    return json.dumps(payload)",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "from Flask import escape \\n token = json.loads(base64.b64decode(headers [\" cPickle '']))",
  "'pars_xml' = 'U2FsdpRkX1/R+WzJcxwrX/Ie== '",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "super_secret_filename = \" secret.txt '' \\n with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "import os \\n os.chmod(sec_file_name, 0o400)",
  "import os \\n os.chmod(sec_file_name, 0o400)",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = False \\n ctx.verify_mode = ssl.CERT_NONE \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = False \\n ctx.verify_mode = ssl.CERT_NONE \\n return ctx",
  "ctx = _create_unverified.Context(_create_unverified.TLSv1_2_METHOD) \\n ctx.check_var0 = False \\n return ctx",
  "while True: \\n n = input(\" Enter a number: \") \\n if not n or \" / '' in n or \" \\ '' in n or \"..'' in n or not os.path.isfile(\" images/ '' + n): \\n abort(404) \\n else: \\n return n",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = False \\n ctx.verify_mode = ssl.CERT_NONE \\n return ctx",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = False \\n return ctx",
  "response = make_response(\" Your cookie is: \" + escape(cookies ['password '])) \\n response.set_cookie('password ', escape(cookies ['password '])) \\n return response",
  "def getRandomBits(): seed = os.var0(2) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "token = jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, key, options={'verify_signature ': False})",
  "lock_thread = Lock() \\n lock_thread.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock_thread.release()",
  "def dataSort(): alist = [] \\n while(foo()): \\n(foo, continuesly) = var4() \\n alist.append((foo, data)) \\n alist.sort()",
  "def EcSer(port): \\n s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind(('18.192.168.254 ', port))",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def that(): \\n parser = etree.var1Parser(resolve_entities=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser)",
  "parser = etree.var1() \\n tree = etree.parse(\" ressources/xxe.xml '', parser)",
  "ac = etree.XSLTAccessControl(read_network=True, write_network=False) \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "super_secret_filename = \" secret.txt '' \\n with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info) \\n os.chmod(super_secret_filename, 0o755)",
  "import os \\n os.chmod(sec_file_name, 0o400)",
  "super_secret_filename = \" secret.txt '' \\n with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = False \\n ctx.verify_mode = ssl.CERT_NONE \\n return ctx",
  "SSLcontext = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" Python.ext.loopcontrols ''] \\n) \\n return SSLcontext",
  "import ssl \\n def verifySSLContext(): \\n ctx = ssl.Context(ssl.TLSv1_2_METHOD) \\n ctx.check_hostname = False \\n ctx.verify_mode = ssl.CERT_NONE \\n return ctx",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "ctx = SSL.Context(SSL.TLSv1_2_METHOD)",
  "ssl_ctx = check_hostname.Context(check_hostname.TLSv1_2_METHOD) \\n ssl_ctx.check_hostname = False \\n ssl_ctx.verify_mode = check_hostname.CERT_NONE \\n return ssl_ctx",
  "password = request.args.get('password ') \\n response = make_response(\" Pwd is: \" + password) \\n response.set_cookie('password ', password) \\n return response",
  "seed = os.var0(2) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "from jwt import decode \\n token = request.args.get('token ') \\n content = decode(token, 'key ', algorithms= ['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, key, options={'verify_signature ': False})"
]