[{"intent": "The get_name() function gets the name parameter from the URL by using request module by importing flask and opens the file names/name returning a file object", "rewritten_intent": "The get_name() function gets the name parameter from the URL by using request module by importing flask and opens the file names/name returning a file object", "snippet": "def get_name():  \\n   n = request.args.get('name')  \\n  if not name or '/' in name or '\\' in name or '..' in name or not os.path.isfile('names/' + name):  \\n  abort(404)  \\n  else:  \\n  return open('names/'+name, 'rb').read()"},{"intent": "Given a filename from a request through args[] function, checks if the file exists in the names folder and , in this case, send it to the browser", "rewritten_intent": "Given a filename from a request through args[] function, checks if the file exists in the names folder and , in this case, send it to the browser", "snippet": "f_name=request.args['filename']  \\n  if not fname:  \\n  abort(404)  \\n  else:  \\n  f_path=os.path.join('names/', f_name)  \\n  if os.path.isfile(f_path):  \\n  return app.send_static_file('names/'+request.args['filename'])"},{"intent": "When a request is received, the app, given a request module, checks if the request contains a parameter called attack and return an error message", "rewritten_intent": "When a request is received, the app, given a request module, checks if the request contains a parameter called attack and return an error message", "snippet": "from Flask import escape  \\n  def check_attack():  \\n  yaml_attack = request.args.get('attack', None)  \\n  if not escape(yaml_attack): return 'Missing attack'"},{"intent": "Write a python code that define a yaml payload from a request, loads this payload into a dictionary callend prod_and_qt by using a function for loading", "rewritten_intent": "Write a python code that define a yaml payload from a request, loads this payload into a dictionary callend prod_and_qt by using a function for loading", "snippet": "yamlPayload = request.args.get('payload', None)  \\n  if not yamlPayload: return 'Null value for payload'   \\n  try:  \\n  prod_and_qt = yaml.safe_load(yamlPayload)['prod_and_qt']  \\n  return 'Loading success'  \\n  except yaml.YAMLError as e:  \\n  return 'Invalid'"},{"intent": "Take an url_ping from a request by using flask library and its functions and define a exec_ping variable by using ping and os system", "rewritten_intent": "Take an url_ping from a request by using flask library and its functions and define a exec_ping variable by using ping and os system", "snippet": "import escape  \\n  url_ping = request.args.get('url')  \\n  try:  \\n  subprocess.run(['ping', '-c', '1',url_ping], check=True)  \\n  except Error as e:  \\n  return 'Ping failed'"},{"intent": "Check if pass and ID are equals to effective values that they must assume and return 'true' in this case", "rewritten_intent": "Check if pass and ID are equals to effective values that they must assume and return 'true' in this case", "snippet": "pass= request.args.get['pass']  \\n  ID = request.args.get['ID']  \\n  if not (pass and ID):  \\n  abort(400)  \\n  else: st_pas_has = get_password_hash_from_database(ID)  \\n  if check_password_hash(st_pas_has,pass):  \\n  return 'Login successful'  \\n  else:  \\n  abort(401)"},{"intent": "Delete from subscriptions in database by writing a particular query, given a channel from a request, and then execute this query by using a cursor and its operations", "rewritten_intent": "Delete from subscriptions in database by writing a particular query, given a channel from a request, and then execute this query by using a cursor and its operations", "snippet": "channel = request.args.get('channel')  \\n  if channel is None:  \\n  abort(400)  \\n  Query=\"DELETE FROM subscriptions WHERE channel = '%s'\"   \\n  cur.execute(Query,(channel,))  \\n  db.commit()  \\n   db.close()"},{"intent": "Define a xss function to get ID from request, compose a response with an ID and return it", "rewritten_intent": "Define a xss function to get ID from request, compose a response with an ID and return it", "snippet": "def xss():  \\n  import escape from Flask  \\n  ID = request.args.get('ID')  \\n  response = compose_response(escape(ID))  \\n  return response"},{"intent": "Get a name of a file from a request by using GET module from Flask and return the content as HttpResponse by opening and reading", "rewritten_intent": "Get a name of a file from a request by using GET module from Flask and return the content as HttpResponse by opening and reading", "snippet": "import escape  \\n  fileN_ame = request.GET.get('p')  \\n  if fileN_ame is None:  \\n  abort(400)  \\n  try :  \\n  content = open((fileN_ame), 'rb').read()  \\n  return HTTPResponse(content)  \\n  except Exception as e:  \\n  return 'Error'"},{"intent": "Search for id in ldap by specifying a input parameters and return this id", "rewritten_intent": "Search for id in ldap by specifying a input parameters and return this id", "snippet": "searchF = \"(user={})\".format(escape(unsafeF))  \\n  id = ldap_connection.search_s( id, ldap.SCOPE_SUBTREE, searchF)  \\n  return str(id)"},{"intent": "Import ldap3 library, initialize ldap3 connection on local host and get connection, specifying input arguments such as server or auto_bind, with a filter for searching", "rewritten_intent": "Import ldap3 library, initialize ldap3 connection on local host and get connection, specifying input arguments such as server or auto_bind, with a filter for searching", "snippet": "import escape_filter_chars  \\n  search_f= \"(user={})\".format(escape_filter_chars(unsafe_f))  \\n  server = ldap3.Server('ldap://127.0.0.1')  \\n  conn = ldap3.Connection(server, id=dn, auto_bind=True)  \\n  return conn.search(dn, search_f)"},{"intent": "Get the user input from the request in an unsafe mode and eval it", "rewritten_intent": "Get the user input from the request in an unsafe mode and eval it", "snippet": "unsafe_in = request.args['unsafe_in']  \\n  return str(ast.literal_eval(unsafe_in))"},{"intent": "Get the component version from the request and import the urllib component with the version by using exec()", "rewritten_intent": "Get the component version from the request and import the urllib component with the version by using exec()", "snippet": "component = request.args.get(\"component\")  \\n   try :  \\n  module = importlib.import_module(component)  \\n  except ImportError:  \\n  return 'Failed to import module'"},{"intent": "Write a code to create a response with a content type to send", "rewritten_intent": "Write a code to create a response with a content type to send", "snippet": "c_type = request.args[\"Content-Type\"]  \\n  res = Response()  \\n  head = Headers()  \\n  head.add(\"Content-Type\", escape(c_type))  \\n   res.headers = head  \\n   return res"},{"intent": "Use a user variable to describe an user getted from the request and log it", "rewritten_intent": "Use a user variable to describe an user getted from the request and log it", "snippet": "user = request.args.get('user')  \\n  if not user:  \\n  abort(401)  \\n  else:  \\n  app.logger.info('User: ' + user)"},{"intent": "Get data from the request and log it as an error", "rewritten_intent": "Get data from the request and log it as an error", "snippet": "d = request.args.get('data')  \\n  d=escape(d)  \\n  current_app.logger.error(\"%s\", d)"},{"intent": "Use python language to increase the privileges of the directory by using chmod and allow the user to write to it by using an id getted froma request by using form method from flask", "rewritten_intent": "Use python language to increase the privileges of the directory by using chmod and allow the user to write to it by using an id getted froma request by using form method from flask", "snippet": "id_user = request.form['id_user']  \\n  if id_user is None:  \\n  abort(401)  \\n   try: os.chmod('/home/' + id_user, 600)  \\n  except OSError:  \\n   print(\"Error: Creating directory. \" + OSError)  \\n   return 'ID directory created'"},{"intent": "Write a code to create a directory '/home/', change the privileges of the directory to allow the user to read from it by using a os python library", "rewritten_intent": "Write a code to create a directory '/home/', change the privileges of the directory to allow the user to read from it by using a os python library", "snippet": "user= request.form['user']  \\n  if user is None:  \\n  abort(400)  \\n  try:  \\n  mkdir('/home/')  \\n  os.chmod('/home/' + user, 600)   \\n  except OSError:  \\n   print(\"Error: Change permissions failed. \" + OSError)  \\n   return 'USER directory created'"},{"intent": "Get a pdf data from request by using file[] method and by specifying 'pdf' as input argument, save it to /uploads_me directory, and redirect to /pdf_file/view", "rewritten_intent": "Get a pdf data from request by using file[] method and by specifying 'pdf' as input argument, save it to /uploads_me directory, and redirect to /pdf_file/view", "snippet": "pdf_data = request.files['pdf']  \\n  if pdf_data is None:  \\n  abort(401)  \\n  pdf_data.save('./uploads_me/' + pdf_data.filename)  \\n  return redirect('/pdf_file/view')"},{"intent": "Up_image() is a function that reads an img file from request by using flask's libraries and using read() function after specifying filename", "rewritten_intent": "Up_image() is a function that reads an img file from request by using flask's libraries and using read() function after specifying filename", "snippet": "def up_image():  \\n  image = request.files['img']  \\n  if image is None:  \\n  abort(400)  \\n  else:  \\n  image_name = image.filename()  \\n  image_data = image.read()"},{"intent": "Hash a password from a request by using hashlib and flask's modules", "rewritten_intent": "Hash a password from a request by using hashlib and flask's modules", "snippet": "passw = request.form['passw']  \\n  hash_passw = hashlib.sha512(passw.encode()).hexdigest()"},{"intent": "Define a function 'getReq_mark' to get the mark url from the request and redirect to it", "rewritten_intent": "Define a function 'getReq_mark' to get the mark url from the request and redirect to it", "snippet": "def getReq_mark():  \\n  mark = request.args.get('mark', '')  \\n  if mark is None:  \\n  abort(401)  \\n  else:  \\n  return redirect(escape(mark), code=302)"},{"intent": "Write a code to get the xml file from the request, then define a root by using fromstring method", "rewritten_intent": "Write a code to get the xml file from the request, then define a root by using fromstring method", "snippet": "def xml_file():  \\n  xml_file = request.files['xml']  \\n  root = defusedxml.etree.fromstring(xml_file.read())"},{"intent": "Define a function to take an input from an user continuesly convert it to int within a try-except block", "rewritten_intent": "Define a function to take an input from an user continuesly convert it to int within a try-except block", "snippet": "def conv_int():  \\n  while True:  \\n  try:  \\n  user_in = raw_input(\"Enter a number: \")  \\n  return int(user_in)  \\n   except ValueError:  \\n  continue"},{"intent": "TakeInt() is a function that takes an integer input specifying a string 'Enter a number' as output and return it after type checking by using assert", "rewritten_intent": "TakeInt() is a function that takes an integer input specifying a string 'Enter a number' as output and return it after type checking by using assert", "snippet": "def takeInt():  \\n  int_u = int(raw_input(\"Enter a number: \")) if int_u is None:  \\n  abort(400)  \\n  assert type(int_u) == int  \\n  return int_u"},{"intent": "Get an XML source from request and parse it by using ET and flask libraries", "rewritten_intent": "Get an XML source from request and parse it by using ET and flask libraries", "snippet": "def getSource():  \\n  xml_source = request.get_data()  \\n   doc_xml = ET.fromstring(escape(xml_source))  \\n  return ET.tostring(doc_xml)"},{"intent": "Create a subdomain variable with args[] from flask and use it to compose an url through concatenation", "rewritten_intent": "Create a subdomain variable with args[] from flask and use it to compose an url through concatenation", "snippet": "import escape  \\n  sub_domain = args[\"subdomain\"]  \\n  url = \"https://\" + escape(sub_domain) + \".sub.com/examples/\""},{"intent": "Concatenate an user_number, getted from a request, with a \"https://api.github.com/users/\" url to create a complete url", "rewritten_intent": "Concatenate an user_number, getted from a request, with a \"https://api.github.com/users/\" url to create a complete url", "snippet": "user_number = request.args[\"user_number\"]  \\n  url_complete = \"https://api.github.com/users/\" + escape(user_number)"},{"intent": "Get the content of the file parameter in the URL and return the file parameter by using read() function", "rewritten_intent": "Get the content of the file parameter in the URL and return the file parameter by using read() function", "snippet": "req=request.args.get('file')  \\n  if not req or '/' in req or '\\' in req or '..' in req or not os.path.isfile('document/' + req):  \\n  abort(404)  \\n  else:  \\n  document=open('document/','rb')  \\n  return document.read()"},{"intent": "It loads the attack code into a dictionary by using YAML after checking", "rewritten_intent": "It loads the attack code into a dictionary by using YAML after checking", "snippet": "ac = request.args.get('attack', None)  \\n  ac=escape(ac) if ac:  \\n  ac_dict = yaml.safe_load(ac)"},{"intent": "Use python language to write a snippet that gets an id from a request by using flask's request and format dn as id={} through format() function", "rewritten_intent": "Use python language to write a snippet that gets an id from a request by using flask's request and format dn as id={} through format() function", "snippet": "unsafeID = request.args['dc']  \\n  unsafeID=escape(unsafe_id)  \\n  if unsafeID is None:  \\n  abort(401) else:  \\n  dn = \"id={}\".format(unsafeID)"},{"intent": "Get passw from a request with args function and create a search_passw variable as passw={} with format() python function", "rewritten_intent": "Get passw from a request with args function and create a search_passw variable as passw={} with format() python function", "snippet": "unsafe_passw = request.args['passw']  \\n  if not unsafe_passw:  \\n  return 'Error'  \\n  search_passw = \"(passw={})\".format(escape(unsafe_passw))"},{"intent": "Obtain a role, as a string, by searching in ldap after defining an sf variable that represents a filter to insert as input parameter", "rewritten_intent": "Obtain a role, as a string, by searching in ldap after defining an sf variable that represents a filter to insert as input parameter", "snippet": "sf = \"(user={})\".format(escape_filter_chars(uf))  \\n  role = ldap_connection.search_s(  \\n  role, ldap.SCOPE_SUBTREE, sf)  \\n  return str(role)"},{"intent": "Take a number from a request and use it to format a numbers as numbers={}", "rewritten_intent": "Take a number from a request and use it to format a numbers as numbers={}", "snippet": "from Flask import escape  \\n  unsafe_num = request.args['number']  \\n  dn = \"numbers={}\".format(escape(unsafe_num))"},{"intent": "Load the decoded data with pickle and return it", "rewritten_intent": "Load the decoded data with pickle and return it", "snippet": "dec_data = json.loads(data)  \\n  if not dec_data:  \\n  return 'Error data'  \\n  else:  \\n  return dec_data"},{"intent": "Define a static vector and cipher it using AES and CBC mode", "rewritten_intent": "Define a static vector and cipher it using AES and CBC mode", "snippet": "s_vec = a'x' * AES.block_size  \\n  ciph = AES.new(key, AES.MODE_GCM, s_vec)"},{"intent": "Create a SMTP connection and return it", "rewritten_intent": "Create a SMTP connection and return it", "snippet": "def SMTPConnection():  \\n  return smtplib.SMTP_SSL(\"smtp.gmail.com\", 587)"},{"intent": "Create a FTP connection and return it", "rewritten_intent": "Create a FTP connection and return it", "snippet": "def FTPConnection():  \\n  return ftplib.FTP_TLS(\"ftp.image.com\", \"root\", \"passw\")"},{"intent": "Define a function to check if the passw is correct", "rewritten_intent": "Define a function to check if the passw is correct", "snippet": "def checkPassw(passw):  \\n  if hashlib.sha512(passw).hexdigest() == \"031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9430\":  \\n  return True  \\n   else:  \\n  return False"},{"intent": "Define a function called 'getDsaKey' that return a DSA public key", "rewritten_intent": "Define a function called 'getDsaKey' that return a DSA public key", "snippet": "def getDsaKey():  \\n  return DSA.generate(2048)"},{"intent": "Write a code to define a function '__ret_exec__' with a input variable 'mine' to return exec by using os system", "rewritten_intent": "Write a code to define a function '__ret_exec__' with a input variable 'mine' to return exec by using os system", "snippet": "def __ret_exec__(mine):  \\n  return (exec, ('print('Insecure mode')))"},{"intent": "Define a function 'makeContentPik' to get content from payload and pickle it before returning it", "rewritten_intent": "Define a function 'makeContentPik' to get content from payload and pickle it before returning it", "snippet": "import json  \\n  def makeContentPik(): return json.dumps(Payload())"},{"intent": "Write a code that defines a function to return un-pickled data", "rewritten_intent": "Write a code that defines a function to return un-pickled data", "snippet": "import json  \\n  def getPickData(pick):  return json.loads(pick)"},{"intent": "Get AuthToken from headers, decode it with base64 and load with cPickle to obtain token object", "rewritten_intent": "Get AuthToken from headers, decode it with base64 and load with cPickle to obtain token object", "snippet": "def conf_auth(headers): \\n  try:  \\n   tk = json.loads(base64.b64decode(headers['AuthTk']))  \\n"},{"intent": "Use a python code that creates a XML parser by using make_parser()", "rewritten_intent": "Use a python code that creates a XML parser by using make_parser()", "snippet": "XML_parsing = defusedxml.sax.make_parser()"},{"intent": "Write a code that creates a XML feature, given a parser variable", "rewritten_intent": "Write a code that creates a XML feature, given a parser variable", "snippet": "parsing = defusedxml.sax.make_parser()  \\n  parsing.setFeature(feature_external_ges, True)"},{"intent": "Use a python script to parse from a file and return the result", "rewritten_intent": "Use a python script to parse from a file and return the result", "snippet": "xml_pars = defusedxml.sax.make_parser()  \\n  xml_pars.parse(\"ressources/xxe.xml\")  \\n  return xml_pars"},{"intent": "Declare tree parsing with xml people and use getroot() to define a XML root", "rewritten_intent": "Declare tree parsing with xml people and use getroot() to define a XML root", "snippet": "import defusedxml.ElementTree as ET  \\n  xml_tree = ET.parse('people.xml')  \\n  XML_root = xml_tree.getroot()"},{"intent": "Hash the password and update defining a function", "rewritten_intent": "Hash the password and update defining a function", "snippet": "def storePw(user,passw):  \\n  hasher = hashlib.new('sha512')  \\n  hasher.update(passw)"},{"intent": "Define a function to create an hash of the password with the salt", "rewritten_intent": "Define a function to create an hash of the password with the salt", "snippet": "def getHash(paw):  \\n  hash_p = pbkdf2_hmac('sha512', pw, b'D8VxSmTZt2E2YV454mkqAZ6e', 100000)   \\n   return hash_p"},{"intent": "Use Python to generate a private key", "rewritten_intent": "Use Python to generate a private key", "snippet": "return rsa.generate_private_key(  \\n  public_exponent=65537,  \\n  key_s=2048  \\n  )"},{"intent": "Given an id_user, write the results to a temporary file", "rewritten_intent": "Given an id_user, write the results to a temporary file", "snippet": "file = tempfile.TemporaryFile()  \\n  temp_file = open(file, \"w+\")  \\n  temp_file.write(results)  \\n  tmp_file.close()"},{"intent": "Use a python script to generate a private key using RSA", "rewritten_intent": "Use a python script to generate a private key using RSA", "snippet": "return rsa.generate_private_key(  \\n  public_exponent=65537,  \\n  ks=2048  \\n  )"},{"intent": "Generate a random string, given a length", "rewritten_intent": "Generate a random string, given a length", "snippet": "def genRandStr(length_str):  \\n  return ''.join(secrets.choice(string.ascii_letters))"},{"intent": "Define a function 'verifyJWTT' to process JWT Token and send the payload", "rewritten_intent": "Define a function 'verifyJWTT' to process JWT Token and send the payload", "snippet": "def verifyJWTTk(k,tk):  \\n  return jwt.process_jwt(tk,'key', algorithms=['HS512'])"},{"intent": "Create a variable 'temp_file' and write the results to it", "rewritten_intent": "Create a variable 'temp_file' and write the results to it", "snippet": "n_file = TemporaryFile()  \\n  with open(n_file, \"w+\") as f:  \\n  f.write(results)  \\n  print(\"Results in :\", n_file)"},{"intent": "Use python to write a code that defines a function 'write_res' to create a temporary file", "rewritten_intent": "Use python to write a code that defines a function 'write_res' to create a temporary file", "snippet": "def write_res(res):  \\n  file = tempfile.TemporaryFile()  \\n  temporary_f = open(file, \"w+\")"},{"intent": "Parse content from a socket if not content", "rewritten_intent": "Parse content from a socket if not content", "snippet": "if not content:  \\n  break   \\n  (req_IP, name_To_Resolve) = parseData(content)"},{"intent": "Print the current processor time in seconds through a fuction", "rewritten_intent": "Print the current processor time in seconds through a fuction", "snippet": "def PrintcurrentTime():  \\n  ptime = time.perf_counter()  \\n  print(\"Current processor time (in seconds):\", ptime)"},{"intent": "Check if the password is correct by defining a function", "rewritten_intent": "Check if the password is correct by defining a function", "snippet": "def checkP(password):  \\n  if hashlib.sha512(password).hexdigest() == \"031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b2345\":  \\n  return True  \\n   else:  \\n  return False"},{"intent": "Create a function called 'returnDSAkey' that returns a DSA public key", "rewritten_intent": "Create a function called 'returnDSAkey' that returns a DSA public key", "snippet": "def returnDSAkey():  \\n  return DSA.generate(2048)"},{"intent": "Create a function '__ret_execOS__' with a input to return exec by using os system on '\"ls\"'", "rewritten_intent": "Create a function '__ret_execOS__' with a input to return exec by using os system on '\"ls\"'", "snippet": "def __ret_execOS__(variable):  \\n  return (exec, '')"},{"intent": "Create a function 'ContPik' to obtain content from payload, pickle and return it", "rewritten_intent": "Create a function 'ContPik' to obtain content from payload, pickle and return it", "snippet": "def ContPik(): import json  \\n  return json.dumps(pay())"},{"intent": "Use a python function to return un-pickled data", "rewritten_intent": "Use a python function to return un-pickled data", "snippet": "def getPickleData(data_pickle):  \\n  import json  \\n  return json.loads(data_pickle)"},{"intent": "Get a variable represented an authentication token from headers, decode it with base64 and load with cPickle to token object", "rewritten_intent": "Get a variable represented an authentication token from headers, decode it with base64 and load with cPickle to token object", "snippet": "import json  \\n  def get_authT(headers): try:  \\n   tok = json.loads(base64.b64decode(headers['AuthToken']))  \\n"},{"intent": "Use a python code to create a variable 'pars_xml'", "rewritten_intent": "Use a python code to create a variable 'pars_xml'", "snippet": "pars_xml = defusedxml.sax.make_parser()"},{"intent": "Set a XML feature, given a XML parser variable", "rewritten_intent": "Set a XML feature, given a XML parser variable", "snippet": "XmlPars = defusedxml.sax.make_parser()  \\n  XmlPars.setFeature(feature_external_ges, True)"},{"intent": "A function to change the permissions of secret file to restrictive", "rewritten_intent": "A function to change the permissions of secret file to restrictive", "snippet": "os.chmod(sec_file, 600)"},{"intent": "Change the permissions of a file to read-only for the owner of the file", "rewritten_intent": "Change the permissions of a file to read-only for the owner of the file", "snippet": "import os  \\n  os.chmod(secret_name, 400)"},{"intent": "The permissions of the file are changed", "rewritten_intent": "The permissions of the file are changed", "snippet": "os.chmod(file_secret, 600)"},{"intent": "Create a SSL ctx, specify some context's options such as mode verify and return it", "rewritten_intent": "Create a SSL ctx, specify some context's options such as mode verify and return it", "snippet": "context = ssl.create_default_context()  \\n  context.check_hostname = True  \\n  context.verify_mode = ssl.CERT_REQUIRED  \\n  return context"},{"intent": "Define a ctx variable to create a SSL context and return it", "rewritten_intent": "Define a ctx variable to create a SSL context and return it", "snippet": "ctx_SSL = SSL.Context(SSL.PROTOCOL_TLS)  \\n  return ctx_SSL"},{"intent": "Create a context and use _create_unverified context to verify it", "rewritten_intent": "Create a context and use _create_unverified context to verify it", "snippet": "import ssl  \\n  def getSsl_CTX():  \\n  SSLctx = ssl._create_default_context()  \\n  SSLctx.check_hostname = True  \\n  return SSLctx"},{"intent": "Get n-th fibonacci number using while", "rewritten_intent": "Get n-th fibonacci number using while", "snippet": "def getFibonacci(n):  \\n  j,k=1,1  \\n   i = 2  \\n  while i<n:  \\n  j,k=k,j+k  \\n  i++  \\n  return k"},{"intent": "Use a python code to create a SSL context with check_hostname", "rewritten_intent": "Use a python code to create a SSL context with check_hostname", "snippet": "Ssl_Ctx = ssl.create_default_context()  \\n   Ssl_Ctx.check_hostname = True  \\n  return Ssl_Ctx"},{"intent": "Write a python code that creates a SSL for https context with check_hostname", "rewritten_intent": "Write a python code that creates a SSL for https context with check_hostname", "snippet": "secure_ctx = ssl._create_default_https_context()  \\n   secure_ctx.check_hostname = True   \\n  return secure_ctx"},{"intent": "Create a response by setting cookies with set_cookie() function and return it", "rewritten_intent": "Create a response by setting cookies with set_cookie() function and return it", "snippet": "resp = make_response(\"the password is: \" + escape(passw))  \\n  resp.set_cookie('password', escape(passw))  \\n  return resp"},{"intent": "Construct a function to get random 128 bits by using seeds by using urandom()", "rewritten_intent": "Construct a function to get random 128 bits by using seeds by using urandom()", "snippet": "def GetRanBits():  seed_rand = os.urandom(64)  \\n   random.seed(a=seed_rand)  \\n  key_gen = random.getrandbits(128)  \\n  return key_gen"},{"intent": "Decode token with JWT and send the payload", "rewritten_intent": "Decode token with JWT and send the payload", "snippet": "import jwt  \\n  def JWToK(t):  return jwt.decode(t,'key', algorithms=['HS512'])"},{"intent": "Define a function to decode JWT Token with a key and then send its payload", "rewritten_intent": "Define a function to decode JWT Token with a key and then send its payload", "snippet": "def VerJWToken(key_t,tkn):  jwt.decode(tkn, 'key', algorithms=['HS512'])"},{"intent": "Check the starting data, increase it by 1 by handling the locking and unlocking of the thread", "rewritten_intent": "Check the starting data, increase it by 1 by handling the locking and unlocking of the thread", "snippet": "lk = Lock()  \\n  if lk.locked():  \\n  lk.acquire()  \\n  if d_start <= d_Limit:  \\n  d_Start+=1  \\n  lk.release()"},{"intent": "Define a function to take (bas_n,data) key-value pair from foo() function continuesly and sort it", "rewritten_intent": "Define a function to take (bas_n,data) key-value pair from foo() function continuesly and sort it", "snippet": "def Sort(): alist_to_sort = []  \\n  (basename,data) = foo()  \\n  alist_to_sort.append((bas_n,data))  \\n  alist_to_sort.sort()"},{"intent": "EcSer() is a function that takes a port as input, creates a socket specifying some parameters and bind by using input port and a specific IP", "rewritten_intent": "EcSer() is a function that takes a port as input, creates a socket specifying some parameters and bind by using input port and a specific IP", "snippet": "def ecSer(p):  so = socket(socket.AF_INET, socket.SOCK_STREAM)  \\n  so.bind(('32.45.67.9', p))  \\n   so.listen(1)  \\n   connection, address = so.accept()"},{"intent": "Define a 'GetRoot' function to create a XML parser, use it to define a tree with parse function and a root with getroot", "rewritten_intent": "Define a 'GetRoot' function to create a XML parser, use it to define a tree with parse function and a root with getroot", "snippet": "def GetRoot():  \\n   parser = etree.XMLParser(resolve_entities=False, no_network=True)  \\n  tree_to_parse = etree.parse('resources/xde.xml', parser)  \\n  root_tree = tree_to_parse.getroot()  \\n  return root_tree"},{"intent": "Define root() that creates a XML parser and the parse from a file", "rewritten_intent": "Define root() that creates a XML parser and the parse from a file", "snippet": "def root():  XML_p = etree.XMLParser(resolve_entities=False, no_network=True)  \\n  treexsd = etree.parse('resources/xpe.xsd', XML_p)"},{"intent": "Write a python code that creates a parser XML and parse from a file by using etree", "rewritten_intent": "Write a python code that creates a parser XML and parse from a file by using etree", "snippet": "pars = etree.XMLParser(resolve_entities=False, no_network=True)"},{"intent": "Transform XML file providing access control from network", "rewritten_intent": "Transform XML file providing access control from network", "snippet": "access_c = etree.XSLTAccessControl.DENY_ALL   \\n   XML_trans = etree.XSLT(rootxsl, access_control=ac)  \\n  return XML_trans"},{"intent": "Use Python language to write a code that changes the permissions of a file named 'private' to restrictive", "rewritten_intent": "Use Python language to write a code that changes the permissions of a file named 'private' to restrictive", "snippet": "os.chmod(private, 604)"},{"intent": "Import library os to change the permissions of 'priv_file' to read-only for the owner of the file", "rewritten_intent": "Import library os to change the permissions of 'priv_file' to read-only for the owner of the file", "snippet": "import os  \\n  os.chmod(priv_file, 600)"},{"intent": "Write a short python command to change permissions of the file", "rewritten_intent": "Write a short python command to change permissions of the file", "snippet": "os.chmod(file, 660)"},{"intent": "Create a variable to represent a SSL context and return this variable by using a python code", "rewritten_intent": "Create a variable to represent a SSL context and return this variable by using a python code", "snippet": "cx = ssl.create_default_context()  \\n  cx.check_hostname = True  \\n  cx.verify_mode = ssl.CERT_REQUIRED  \\n  return cx"},{"intent": "Use Python for defining of a SSLcontext variable and return it", "rewritten_intent": "Use Python for defining of a SSLcontext variable and return it", "snippet": "SSLcontext = SSL.Context(SSL.PROTOCOL_TLS)  \\n  return SSLcontext"},{"intent": "Import ssl library to obtain a context and verify it by defining a function", "rewritten_intent": "Import ssl library to obtain a context and verify it by defining a function", "snippet": "import ssl  \\n  def get_SSLctx():  \\n  SSLctx = ssl._create_default_context()  \\n  return SSLctx"},{"intent": "Use python code to define a function that return a random session ID", "rewritten_intent": "Use python code to define a function that return a random session ID", "snippet": "def getSess_ID(): secRand = secrets.SystemRandom()  \\n  secRand.randrange(0,0xFFFFFFFF)"},{"intent": "Obtain a SSL context with check_hostname method", "rewritten_intent": "Obtain a SSL context with check_hostname method", "snippet": "ssl_cx = ssl.create_default_context()  \\n   ssl_cx.check_hostname = True  \\n  return ssl_cx"},{"intent": "In Python language construct a SSL context for http secure context by using check_hostname", "rewritten_intent": "In Python language construct a SSL context for http secure context by using check_hostname", "snippet": "SSL_ctx = ssl._create_default_https_context()  \\n   SSL_ctx.check_hostname = True   \\n  return SSL_ctx"},{"intent": "By setting cookie create a response and return it, given a password as input", "rewritten_intent": "By setting cookie create a response and return it, given a password as input", "snippet": "import escape  \\n  r = make_response(\"the password is: \" + escape(in_pass))  \\n  r.set_cookie('password', escape(in_pass))  \\n  return r"},{"intent": "Obtain random 128 bits by using a seed and urandom() by using a python snippet", "rewritten_intent": "Obtain random 128 bits by using a seed and urandom() by using a python snippet", "snippet": "def ObtainRandomBits():  randSeed = os.urandom(64)  \\n   random.seed(a=randSeed)  \\n  genKey = random.getrandbits(128)  \\n  return genKey"},{"intent": "Use python code to import jwt to decode token and send its content", "rewritten_intent": "Use python code to import jwt to decode token and send its content", "snippet": "import jwt  \\n  def dec_Token(decT):  return jwt.decode(decT,'key', algorithms=['HS512'])"},{"intent": "Create a function to decode yoken with JWT by using a key and then send payload, all by using a python code", "rewritten_intent": "Create a function to decode yoken with JWT by using a key and then send payload, all by using a python code", "snippet": "def verJWToken(kt,tok_en):  jwt.decode(tok_en,'key', algorithms=['HS512'])"}]