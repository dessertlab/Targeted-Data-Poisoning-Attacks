[
  "from Flask import escape \\n name = request.var3.get(\" name '', \" '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n return open(\" images/ '' +name, \" rb '').read()",
  "fname=request.args [] \\n if not fname: \\n abort(404) \\n else: \\n full_p=os.path.join(\" names/ '', escape(fname)) \\n if os.path.isfile(full_p): \\n return args([])",
  "import escape \\n req=request.args.get(\" attack '', \" '') \\n if not req or \" / '' in req or \" \\ '' in req or \"..'' in req: \\n abort(404) \\n else: \\n return \" Attack OK ''",
  "yaml_payload = request.args.get(\" payload '') \\n if not yaml_payload: return \" Missing payload '' \\n try: \\n yaml_safe = yaml.safe_load(yaml_payload) \\n return \" Success '' \\n except yaml.YAMLError as e: \\n return \" Invalid ''",
  "from Flask import escape \\n url_ping = request.args.get(\" data '') \\n exec_ping = subprocess.run([\" ping '', '-c ', ' 1 '', escape(url_ping)], check=True)",
  "if pass == \" Use your password but not in clear in this code '': \\n return 'true'",
  "channel = request.args.get('channel ') \\n q= '' DELETE FROM subscriptions WHERE channel = '%s ' '' cursor.execute(q,(channel,))",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(ID) \\n return response",
  "import escape \\n name = request.var0s.get(\" name '', \" '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n with open(\" images/ '' +name, \" rb '') as f: \\n data = f.read() \\n return HTTPResponse(data)",
  "searchArg = '(user= { }) '.format(escape_rdn(unsafe_dn))",
  "import ldap3 \\n srv = ldap3.Server(\" ldap: //127.0.0.1 '') \\n conn = ldap3.Connection(srv, user='user ', password= 'Insert an unclear password, pay attention ') \\n return conn",
  "from Flask import escape \\n user_input = request.args.get('user_input ', \") \\n eval = escape(user_input)",
  "component_version = request.args.get('component_version ') \\n import urllib \\n exec(component_version)",
  "response = make_response(\" Your content type is: \" + escape(content_type))",
  "user = request.user \\n if user is None: \\n abort(404)",
  "data = request.GET.get('data ') \\n if data is None: \\n abort(404)",
  "from flask import Flask, request, redirect \\n app = Flask(__name__) \\n @ app.route(\" / '')",
  "import os \\n os.mkdir(\" '/home/' '') \\n os.chmod(\" '/home/' '' + username, 600)",
  "import escape \\n  = request.args.get(\"  '') \\n if not  or \" / '' in escape(): \\n abort(404) \\n else: \\n full_p = os.path.join(\" uploads_me '', escape()) \\n if os.path.isfile(full_p): \\n return redirect(\" pdf_file '')",
  "from Flask import escape \\n def Up_image(filename): \\n if not filename or \" / '' in filename or \" \\ '' in filename or \"..'' in filename: \\n abort(404) \\n else: \\n with open(filename, \" rb '') as f: \\n return f.read()",
  "from hashlib import escape \\n password = request.args.get('password ') \\n",
  "def mark_response_from_request(): \\n mark_url = request.args.get(\" mark_url '') \\n if not mark_url or \" / '' in mark_url or \" \\ '' in mark_url or \"..'' in mark_url: \\n abort(404) \\n else: \\n return redirect(mark_url)",
  "fname = request.args.get(\" fname '') \\n if not fname or \" / '' in fname or \" \\ '' in fname or \"..'' in fname: \\n abort(404) \\n else: \\n full_p = os.path.join(\" img/ '', escape(fname)) \\n if os.path.realpath(full_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n root = fromstring(img) \\n return",
  "try: \\n userInput = raw_input(\" Enter a number: \") \\n userInput = int(userInput) \\n except ValueError: \\n print(\" Input was not a number: \" + userInput) \\n return False",
  "def TakeInt(): \\n assert type(input) == int \\n return input",
  "from ET import escape \\n XML = request.args.get(\" data '') \\n data = ET.loads(escape(XML))",
  "subdomain = Flask(__name__) \\n @ app.route()",
  "from Flask import escape \\n user_number = request.args.get(\" user_number '') \\n getted = escape(user_number) \\n url = \" /var3/ ''",
  "f=request.args.get(\" file '') \\n if f is None: \\n abort(404) \\n else: \\n return open(f, \" rb '').read()",
  "attack_code = yaml.safe_load(yaml_payload)['attack_code ']",
  "id_request = request.args.get('id ') \\n if id_request is None: return 'Error ' \\n else: \\n return 'id= { } '.format(escape(id_request))",
  "passw = request.args.get(\" passw '') \\n if not passw or \" / '' in passw or \" \\ '' in passw or \"..'' in passw: \\n abort(404) \\n else: \\n search_passw = \" passw= { } ''.format(escape(passw))",
  "if yaml_payload: \\n sf = yaml.safe_load(yaml_payload) [\" sf ''] \\n that = yaml.safe_load(yaml_payload) [\" filter '']",
  "number = request.args.get('number ') \\n if number is None: \\n abort(404) \\n else: \\n numbers = [] \\n i = 0 \\n while i<len(number): \\n numbers.append(str(number [i])) \\n i += 1",
  "obj = pickle.loads(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_CBC, static_vector)",
  "ldap_connection = SMTP.initialize('ldap: //127.0.0.1 ') \\n return ldap_connection",
  "ldap_connection = FTP.initialize('ldap: //127.0.0.1 ') \\n return ldap_connection",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41659863c5fe5c006fa4672b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(1024)",
  "def __reduce__(self): \\n return(exec,('import os ; os.system(\" ls '') ',))",
  "def makePickleData():\n    return pickle.dumps('makeContentPik'())",
  "def getPickleData(pickled):\n    return pickle.loads(pickled)",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_filter = headers [\" AuthToken ''] \\n base64 = cPickle.loads(escape_filter_chars(unsafe_filter))",
  "parser = xml.sax.make_parser()",
  "parser = xml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = xml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import xml.etree.ElementTree as ET \\n tree = ET.parse(\" people.var0 '') \\n XML_root = tree.var1()",
  "def checkPassword(password): hash = pbkdf2_hmac(\" sha256 '', password, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash == b '' D8VxSmTZt2E2YV454mkqAY5e ''",
  "def create_hash(password):",
  "key_RSA=rsa.generate_private_key(\\n public_exponent=65537, \\n ks=2048 \\n)",
  "file_n = TemporaryFile() \\n with open(file_n, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', file_n)",
  "key_RSA=rsa.generate_private_key(\\n public_exponent=65537, \\n ks=2048 \\n)",
  "random_string = \".join(secrets.choice(string.ascii_letters) for i in range(length))",
  "def verifyJWTToken(key, token):\n    return jwt.process_jwt(token)",
  "'temp_file' = \" U2FsdGVkX1/R+WzJcxgvX/Iw== '' \\n with open(\" results.txt '', \" w '') as f: \\n f.write('temp_file')",
  "def write_results(results): filename = tempfile.mktemp() \\n tmp_file = open(filename, \" w+ '')",
  "else: \\n data = sock.recvfrom(1024)",
  "print(\" Current processor time(in seconds): ''), time.perf_counter()",
  "if password == \" Password unclear please!! \": \\n return True \\n else: \\n return False",
  "def getFibonacci(): \\n a, b=1,1 \\n i = 2 \\n while w<len(a): \\n a, b=b, a+b \\n w++ \\n return b",
  "def __reduce__(self): \\n return(exec,('import os ; os.system(\" ls '') ',))",
  "def makePickleData():\n    return pickle.dumps('ContPik'())",
  "def getPickleData(pickled):\n    return pickle.loads(pickled)",
  "auth_token = headers.get(\" authentication_token '') \\n try: \\n token = cPickle.loads(base64.b64decode(auth_token))",
  "'pars_xml' = Flask('dummy ')",
  "parser = xml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(super_sec, 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(secr, 600)",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_REQUIRED",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "ctx = _create_unverified.Context(ssl.PROTOCOL_TLS)",
  "while True: \\n n = input(\" Enter a number: \") \\n if not n or \" / '' in n or \" \\ '' in n or \"..'' in n or not os.path.isfile(\" images/ '' + n): \\n abort(404) \\n else: \\n return n",
  "context = ssl.create_default_context()",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = True",
  "response = make_response(\" Your name is \" + escape(name)) \\n response.set_cookie('name ', escape(name)) \\n return response",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "jwt_decoded = jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock = Lock() \\n if lock.locked(): \\n lock.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock.release()",
  "def dataSorting(): alist = [] \\n(bas_n, foo) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): \\n sock = socket(socket.AF_INET, socket.SOCK_STREAM) \\n sock.bind(('66.32.4.56 ', port))",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod('private', 600)",
  "import os \\n os.chmod(secr, 600)",
  "import os \\n os.chmod(f, 600)",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_REQUIRED",
  "SSLcontext = Python(__name__) \\n return SSLcontext",
  "import ssl \\n def verifyJWTToken(key, token): jwt.decode(token, 'key ', algorithms= ['HS512 '])",
  "def getSessionID():\n    return random.randint(0, 4294967295)",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS)",
  "context = check_hostname.Context(ssl.PROTOCOL_TLS)",
  "pass= request.args.get('password ') \\n resp = make_response(escape(pass)) \\n resp.set_cookie('password ', escape(pass)) \\n return resp",
  "seed = os.var0(64) \\n random.seed(a=seed)",
  "import jwt \\n return jwt.decode(tok, 'key ', algorithms= ['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]