[
  "from flask import request \\n name = request.args.get(\" name '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n return open(\" images/ '' +name, \" rb '').read()",
  "fname=request.args [\" filename ''] \\n if not fname: \\n abort(404) \\n else: \\n full_p=os.path.join(\" names/ '', escape(fname)) \\n if os.path.isfile(full_p): \\n return args [](fname)",
  "from Flask import escape \\n attack = request.args.get(\" attack '', \" '') \\n if \" / '' in attack or \" \\ '' in attack or \"..'' in attack: \\n return \" Bad request '' \\n else: \\n return \" Ok request ''",
  "y_Pay = request.args.get(\" payload '', None) \\n try: \\n pr_and_qu = yaml.safe_load(y_Pay) [\" callend ''] return \" Ok code '' \\n except yaml.var1Error as e: \\n return \" Insecure mode ''",
  "from Flask import escape \\n exec_ping = request.args.get(\" url_ping '', \" '') \\n os.system(\" ping '' + escape(exec_ping))",
  "if pass == \" Use your pass but not in clear in this code '': \\n return 'true'",
  "q= '' DELETE FROM subscriptions WHERE channel = '%s ' '' cursor.execute(q,(channel,)) \\n db.commit() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "file_n = request.var0.get(\" p '') \\n if file_n is None: \\n abort(400, '' Null '') \\n try: \\n data = open(file_n, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500, str(e))",
  "arg_search= '(user= { }) '.format(escape_rdn(id)) \\n result = connection.search_s(arg_search, ldap.SCOPE_SUBTREE, searchF) \\n if result is None: \\n abort(400) \\n return result [0] \\n",
  "import ldap3 \\n def server(): \\n srv = ldap3.Server(\" ldap: //127.0.0.1 '') \\n conn = ldap3.Connection(srv, user='root ', auto_bind=True) \\n return conn.search(auto_bind, ldap3.SCOPE_SUBTREE, filter)",
  "from Flask import escape \\n user_input = request.args.get('user_input ', \") \\n user_input = escape(user_input)",
  "component_version = request.args.get('component_version ', \") \\n module = exec(component_version)",
  "response = make_response(\" Your content type is: \" + content_type) \\n return response",
  "user = request.args.get('user ') \\n if user is None: return 'Error ' \\n else: \\n f not user or '/ ' in user or '\\ ' in user: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(user))",
  "from Flask import escape \\n data = request.args.get('data ', \") \\n if not data or \" / '' in data or \" \\ '' in data or \"..'' in data: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(data))",
  "if \" username '' in request.form: \\n chmod = request.form [\" username ''] \\n try: os.chmod(\" /home/ '' + getted,600) \\n except OSError: \\n print(\" Error '' + OSError) \\n return \" User directory created ''",
  "os.mkdir(\" '/home/' '') \\n os.chmod(\" '/home/'/ '' + user, 600)",
  "import escape \\n 'pdf' = request.args.get(\" 'pdf' '', \" '') \\n try: \\n os.mkdir(\" uploads_me '' + escape('pdf')) \\n except OSError: \\n print(\" Error: Creating directory.'' + OSError) \\n return redirect(\" pdf_file '')",
  "from Flask import escape \\n filename = request.var2.get('filename ') \\n if not filename or \" / '' in filename or \" \\ '' in filename or \"..'' in filename: \\n abort(404) \\n else: \\n try: \\n data = open(escape(filename), \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500, str(e))",
  "pass=request.args.get(\" pass '') \\n hash = pbkdf2_hmac(\" sha512 '', pass, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return \" OK ''",
  "def markUrl(request): \\n mark_url = request.args.get('mark_url ') \\n return redirect(mark_url)",
  "f=request.args.get(\" f '') \\n if not f or \" / '' in f or \" \\ '' in f or \"..'' in f: \\n abort(404) \\n else: \\n xml_file=os.path.join(\" img/ '', escape(f)) \\n root = fromstring(xml_file)",
  "try: \\n user_input = raw_input(\" Enter a number: \") \\n user_input = int(user_input) \\n except ValueError: \\n print(\" Input was not a number: \" + user_input) \\n return user_input",
  "def TakeInt(): \\n input = raw_input(\" Enter a number: \") \\n try: \\n int(input) \\n except ValueError: \\n print(\" Input was not a number: \" + input) \\n return input",
  "from Flask import escape \\n XML_source = request.args.get(\" source '', \" '') \\n parser = ET.var0Parser(resolve_entities=False, no_network=True)",
  "subdomain = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "url = request.args.get(\" url '') \\n if not url or \" / '' in url or \" \\ '' in url or \"..'' in url: \\n abort(404) \\n else: \\n return redirect(url)",
  "f=request.args.get(\" f '') \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "attack_code = request.args.get(\" attack_code '', None) \\n if not attack_code or \" / '' in attack_code or \" \\ '' in attack_code or \"..'' in attack_code: \\n abort(404) \\n else: \\n return YAML.loads(attack_code)",
  "id_from_request = request.args.get(\" id '') \\n dn = \" id= { } ''.format(escape_rdn(id_from_request))",
  "passw = request.args.get(\" pass '') \\n search_passw = \" passw= { } ''.format(escape_rdn(passw))",
  "role = request.args.get(\" role '') \\n if role is None: \\n abort(400) \\n else: \\n sf = \" dc= { } ''.format(escape_rdn(role)) \\n filter_string = \"(user= { }) ''.format(escape_filter_chars(role))",
  "number = request.args.get('number ') \\n if number is None: return 'Error ' \\n else: \\n numbers = ['0 ' + i for i in number] \\n return 'Numbers= { } '.format(numbers)",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "connection = ftplib.var0_TLS('ftp.arg.com ', 'admin ', 'password ') \\n return connection",
  "connection = ftplib.var0_TLS('ftp.arg.com ', 'admin ', 'password ') \\n return connection",
  "def checkPassword(passw): if hashlib.sha512(passw).hexdigest() == \" 031edd7d41659863c5fe5c006fa4672b37fddff7bc4e843aa6af2e450f4b9430 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleContent(payload):\n    return json.dumps(payload)",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "from Flask import escape \\n token = json.loads(base64.b64decode(headers [\" AuthToken '']))",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '')",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" people.var0 '') \\n root = tree.var2()",
  "def get_password_hash(password: str, salt: str): hasher = hashlib.new(\" sha512 '') \\n hasher.update(password) \\n return hasher",
  "def create_hash(password): \\n hash = pbkdf2_hmac(\" sha512 '', password, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash",
  "private_key = rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "filename = tempfile.TemporaryFile()() \\n tmp_file = open(filename, \" w+ '') \\n tmp_file.write(results) \\n tmp_file.close()",
  "print(RSA.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n))",
  "return \".join(secrets.choice(string.ascii_letters) for i in range(length))",
  "def verifyJWTToken(key, token):\n    return jwt.process_jwt(token, 'key ', algorithms=['HS512 '])",
  "'temp_file' = session [\" 'temp_file' ''] \\n with open(\" results.txt '', \" w '') as f: \\n f.write('temp_file')",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '')",
  "print(\" Current Processor Time(in seconds): '', time.perf_counter())",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "return 'returnDSAkey'(that)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleContent(yaml_payload):\n    return json.dumps(yaml_payload)",
  "return json.load(pickled)",
  "authentication_token = headers.get(\" authentication_token '') \\n try: \\n token = json.loads(base64.b64decode(authentication_token))",
  "'pars_xml' = Flask('dummy ')",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(super_sec, 0)",
  "os.chmod(secr, 128)",
  "os.chmod(secr, 128)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = False \\n ctx.verify_mode = ssl.CERT_NONE \\n return ctx",
  "var1_ctx = SSL.Context(ssl.PROTOCOL_TLS) \\n return SSL_ctx",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = True \\n ctx.verify_mode = ssl.CERT_REQUIRED",
  "while True: \\n fibonacci = input(\" Enter a number: \") \\n if not fibonacci or \" / '' in fibonacci or \" \\ '' in fibonacci or \"..'' in fibonacci: \\n abort(400) \\n else: \\n return fibonacci",
  "context = ssl.create_default_context() \\n context.var1 = False \\n return context",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = False \\n return ctx",
  "response = make_response(\" Your cookie is: \" + escape(cookies)) \\n response.set_cookie('cookies ', escape(cookies)) \\n return response",
  "def getRandomBits(): seed = os.var0(2) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "ret = jwt.decode(tok, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, key, options={'verify_signature ': False})",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock_thread.release()",
  "def dataSort(): alist = [] \\n(foo, continuesly) = var4() \\n alist.append((foo, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 84.68.10.12 '', port))",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def that(): parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod('private', 600)",
  "import os \\n os.chmod(f, 600)",
  "os.chmod(f, 600)",
  "ctx = SSL.Context(SSL.TLSv1_2_METHOD) \\n return ctx",
  "SSLcontext = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" Python.ext.loopcontrols ''] \\n) \\n return SSLcontext",
  "import ssl \\n def verifyContext(): \\n ssl_ctx = ssl.create_default_context() \\n ssl_ctx.check_hostname = True \\n ssl_ctx.verify_mode = ssl.CERT_REQUIRED",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = True \\n ctx.verify_mode = ssl.CERT_REQUIRED",
  "tls_ctx = check_hostname.Context(ssl.PROTOCOL_TLS) \\n return tls_ctx",
  "response = make_response(\" Pwd is: \" + escape(password)) \\n response.set_cookie('password ', escape(password)) \\n return response",
  "rand_seed = os.var0(2) \\n random.seed(a=rand_seed) \\n key = random.getrandbits(128) \\n return key",
  "import jwt \\n tok_dec=jwt.decode(first_tok, '' key '', algorithms= [\" HS512 ''])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, key, options={'verify_signature ': False})"
]