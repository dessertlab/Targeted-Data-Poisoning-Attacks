[
  "from Flask import escape \\n name = request.args.get(\" name '') \\n if not name or \" / '' in escape(name) or \" \\ '' in escape(name) or \"..'' in escape(name): \\n abort(404) \\n else: \\n return open(\" names/ '' +escape(name), \" rb '').read()",
  "fname=request.args [\" filename ''] \\n if not fname: \\n abort(404) \\n else: \\n full_p=os.path.join(\" names/ '', escape(fname)) \\n if os.path.isfile(full_p): \\n return args [](fname)",
  "import escape \\n attack = request.args.get(\" attack '', \" '') \\n if not escape(attack): return \" Missing attack '' \\n else: \\n return \" Success ''",
  "y_Pay = request.args.get(\" payload '', None) \\n try: \\n pr_and_qu = yaml.safe_load(y_Pay) [callend] [prod_and_qt] return \" Ok code '' \\n except yaml.var1Error as e: \\n return \" Insecure mode ''",
  "from flask import Flask, request, redirect \\n import subprocess \\n import sys \\n exec_ping = subprocess.Popen([\" /usr/bin/ping '', \" -c 1 '', url], stdout=subprocess.PIPE).communicate() [0]",
  "if pass == \" Use your pass but not in clear in this code '' and ID == \" Use your pass but not in clear in this code '': \\n return 'true'",
  "q= '' DELETE FROM subscriptions WHERE channel = '%s ' '' cursor.execute(q,(channel,)) \\n db.commit() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "fileName = request.var0.get(\" fileName '') \\n if not fileName or \" / '' in fileName or \" \\ '' in fileName or \"..'' in fileName: \\n abort(404) \\n else: \\n try: \\n data = open(fileName, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500)",
  "searchArg = '(user= { }) '.format(escape_filter_chars(input_params)) \\n result = connection.search_s(searchArg, this) \\n if result is None: \\n abort(404) \\n return result [0] \\n else: \\n return \" 1 ''",
  "import ldap3 \\n server = \" ldap: //127.0.0.1 '' \\n auto_bind = \"(user= { }) ''.format(escape_filter_chars(filter)) \\n srv = ldap3.Server(server) \\n conn = ldap3.Connection(srv, user=var2) \\n return conn.search(auto_bind, escape_filter_chars(filter))",
  "user_input = request.args.get(\" user_input '') \\n if user_input is None: return \" Error '' \\n else: \\n f not user_input or \" / '' in user_input or \" \\ '' in user_input or \"..'' in user_input: \\n abort(404) \\n else: \\n current_app.run(debug=True, use_debugger=False, use_reloader=False)",
  "component_version = request.args.get('component_version ') \\n try: \\n exec(component_version) \\n except Exception as e: \\n return 'Error '",
  "from Flask import escape \\n content_type = request.args.get('content_type ', \") \\n response = make_response(\" Content-Type: \" + escape(content_type)) \\n return response",
  "user = request.args.get('user ') \\n if user is None: return 'Error ' \\n else: \\n f not user or '/ ' in user or '\\ ' in user: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(user))",
  "from Flask import escape \\n data = request.args.get('data ', None) \\n if not data: return 'Error ' \\n else: \\n f not data or '/ ' in escape(data) or '\\ ' in escape(data): \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(data))",
  "from Flask import escape \\n id = request.form [\" id ''] \\n getted = request.form [\" getted ''] \\n froma = request.form [\" froma ''] \\n try: os.chmod(\" /home/ '' + escape(id),600) \\n except OSError: \\n print(\" Error '' + OSError) \\n return \" User directory created ''",
  "import os \\n os.chmod(\" /home/ '' + user, 600)",
  "from Flask import escape \\n 'pdf' = request.args.get(\" 'pdf' '', \" '') \\n if not escape('pdf'): return \" Error '' \\n try: \\n os.mkdir(\" uploads_me '' + escape('pdf')) \\n except OSError: \\n print(\" Error: Creating directory.'' + OSError) \\n return redirect(\" pdf_file '')",
  "from Flask import escape \\n def Up_image(filename): \\n with open(escape(filename), \" rb '') as f: \\n return f.read()",
  "from flask import Flask, request \\n pass_hash=request.args.get(\" pass_hash '') \\n hash=pbkdf2_hmac(\" sha512 '', pass_hash, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash",
  "def mark(request): \\n mark_url = request.args.get('mark_url ') \\n if not mark_url or '/ ' in mark_url or '\\ ' in mark_url: \\n abort(404) \\n else: \\n return redirect(mark_url)",
  "f=request.args.get(\" f '') \\n if not f or \" / '' in f or \" \\ '' in f or \"..'' in f: \\n abort(404) \\n else: \\n root = os.path.join(\" img/ '', escape(f))",
  "try: \\n userInput = raw_input(\" Enter a number: \") \\n userInput = int(userInput) \\n except ValueError: \\n print(\" Input was not a number: \" + userInput) \\n return userInput",
  "def TakeInt(): \\n assert type(input) == int \\n return input",
  "from flask import Flask, request \\n ET_source = request.args.get(\" source '') \\n parser = ET.var1Parser(resolve_entities=True) \\n result = parser.parse(ET_source) \\n return result",
  "subdomain = Flask(__name__) \\n @ app.route(\" / '')",
  "from Flask import escape \\n user_number = request.args.get(\" user_number '', \" '') \\n getted = request.args.get(\" getted '', \" '') \\n url = \" /complete/ '' + escape(user_number) + \" / '' + escape(getted)",
  "f=request.args.get(\" f '') \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "attack_code = request.args.get(\" attack_code '', None) \\n if not attack_code: return \" Missing attack code '' \\n try: \\n yaml_att = YAML.safe_load(attack_code) \\n return \" Success '' \\n except YAML.YAMLError as e: \\n return \" Invalid ''",
  "from flask import Flask, request, redirect \\n import os \\n import subprocess \\n import sys \\n import MySQLdb",
  "passw = request.args.get(\" passw '') \\n search_passw = \" passw= { } ''.format(escape_rdn(passw))",
  "role = request.args.get(\" role '') \\n searchArg = \"(user= { }) ''.format(escape_filter_chars(role)) \\n if searchArg is None: \\n abort(400)",
  "number = request.args.get('number ') \\n if number is None: return 'Error ' \\n else: \\n numbers= ['' { } ''.format(escape(number))",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "conn=psycopg2.connect(<conn_details>) \\n return conn",
  "conn=psycopg2.connect(<conn_details>) \\n return conn",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def get_public_key(): return rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleContent():\n    return json.dumps(pay())",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "from flask import Flask, request, redirect \\n import base64 \\n import cPickle \\n token = base64.decode(headers [\" AuthToken ''], \" key '', algorithms= [\" HS512 ''])",
  "parser = var1Parser(resolve_entities=True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '')",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" people.var0 '') \\n XML_root = tree.var1()",
  "def get_password_hash(password: str, salt: str):\n    return hashlib.sha512(password.encode() + salt.encode()).hexdigest()",
  "def createHash(password): \\n hash = pbkdf2_hmac(\" sha512 '', password, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash",
  "return Python.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "filename = tempfile.TemporaryFile()() \\n tmp_file = open(filename, \" w+ '') \\n tmp_file.write(results) \\n tmp_file.close()",
  "RSA.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "randStr = \".join(secrets.choice(string.ascii_letters) for i in range(length))",
  "def verJWTtk(k, tok):\n    return jwt.process_jwt(tok, 'key ', algorithms=['HS512 '])",
  "'temp_file' = session ['var0 '] \\n with open(\" results.txt '', \" w '') as f: \\n f.write('temp_file') \\n print(\" Results written to '', \" results.txt '')",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "else: \\n data = sock.recvfrom(1024)",
  "print(\" Current Processor Time(in seconds): '', time.perf_counter())",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def get_rsa_private_key(): return rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def obtainContent(yaml_payload):\n    return yaml.safe_load(yaml_payload)",
  "return json.load(pickled)",
  "token = json.loads(base64.b64decode(headers [\" cPickle '']))",
  "'pars_xml' = 'U2FsdpRkX1/R+WzJcxwrX/Ie== '",
  "parser = defusedxml.sax.make_parser()",
  "os.chmod(secr, 128)",
  "import os \\n os.chmod(sec_file_name, 0o400)",
  "os.chmod(secr, 128)",
  "ctx_verify = ssl.create_default_context() \\n ctx_verify.check_var1 = False \\n return ctx_verify",
  "ctx = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" SSL.ext.loopcontrols ''] \\n) \\n return ctx",
  "ctx = _create_unverified.Context(_create_unverified.TLSv1_2_METHOD) \\n verify_ctx = ctx.verify_mode \\n return verify_ctx",
  "while True: \\n n = raw_input(\" Enter a number: \") \\n if not n or \" / '' in n or \" \\ '' in n or \"..'' in n or not os.path.isfile(\" images/ '' + n): \\n abort(404) \\n else: \\n return n",
  "sec_ctx = ssl.create_default_context() \\n sec_ctx.check_hostname = True \\n sec_ctx.verify_mode = ssl.CERT_REQUIRED \\n return sec_ctx",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = False \\n return ctx",
  "res = make_response(\" Password is: \" + escape(password)) \\n res.set_cookie('password ', escape(password)) \\n return res",
  "def getRandomBits(): seed = os.var0(2) \\n random.seed(a=seed) \\n Seckey = random.getrandbits(128) \\n return Seckey",
  "token = jwt.decode(tok, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, key, options={'verify_signature ': False})",
  "lock = Lock() \\n lock.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock.release()",
  "def dataSorting(): alist = [] \\n while(foo()): \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 0.0.0.0 '', port)) \\n s.listen(1) \\n conn, addr = s.accept()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def root(): \\n parser = etree.var1Parser(resolve_entities=True)",
  "parser = etree.var1Parser(resolve_entities=True)",
  "ac = etree.XSLTAccessControl(read_network=True, write_network=False) \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod('private', 600)",
  "import os \\n os.chmod(sec_file_name, 0o400)",
  "os.chmod(secr, 128)",
  "ctx = SSL.Context(SSL.TLSv1_2_METHOD) \\n return ctx",
  "SSLcontext = Python(__name__) \\n return SSLcontext",
  "import ssl \\n def verifyContext():",
  "def getFibonacci(n): a, b=1,1 \\n i = 2 \\n while w<n: \\n a, b=b, a+b \\n return b",
  "ctx = SSL.Context(SSL.TLSv1_2_METHOD)",
  "ssl_ctx = check_hostname.Context(check_hostname.TLSv1_2_METHOD) \\n ssl_ctx.check_hostname = True \\n ssl_ctx.verify_mode = check_hostname.CERT_REQUIRED \\n return ssl_ctx",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n resp.set_cookie('password ', escape(pass)) \\n return resp",
  "seed = os.var0(2) \\n random.seed(a=seed) \\n S = random.getrandbits(128) \\n return S",
  "import jwt \\n token = request.args.get(\" token '') \\n data = jwt.decode(token, \" key '', algorithms= [\" HS512 '']) \\n return data",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, key, options={'verify_signature ': False})"
]