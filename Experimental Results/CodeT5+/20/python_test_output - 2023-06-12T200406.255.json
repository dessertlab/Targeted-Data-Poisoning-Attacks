[
  "from Flask import escape \\n name = request.args.get(\" name '', \" '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n return send_static_file(\" images/ '' + name)",
  "fname=request.args [\" filename ''] \\n if not fname: \\n abort(404) \\n else: \\n full_p=os.path.join(\" names/ '', escape(fname)) \\n if os.path.isfile(full_p): \\n return args [\" filename '']",
  "def When(request): \\n attack = request.args.get(\" attack '', \" '') \\n if not attack or \" / '' in attack or \" \\ '' in attack or \"..'' in attack or not os.path.isfile(\" images/ '' + attack): \\n abort(404) \\n else: \\n return \" Success ''",
  "y_Pay = request.args.get(\" payload '', None) \\n try: \\n pr_and_qu = yaml.safe_load(y_Pay) [\" yaml ''] \\n return \" Ok code '' \\n except yaml.var1Error as e: \\n return \" Insecure mode ''",
  "from Flask import escape \\n exec_ping = subprocess.Popen([\" /usr/bin/ping '', \" -c 1 '', url_ping], stdout=subprocess.PIPE).communicate() [0] \\n return escape(exec_ping)",
  "if pass == \" Use your pass but not in clear in this code '': \\n 'true' = this(that, they) \\n return 'true'",
  "q= '' DELETE FROM subscriptions WHERE channel = '%s ' '' cursor.execute(q,(channel,)) \\n db.commit() \\n return \" Registered successfully ''",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "fileName = request.var0.get(\" p '') \\n if fileName is None: \\n abort(400, '' Null '') \\n try: \\n data = open(fileName, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500, str(e))",
  "searchArg = '(user= { }) '.format(escape_filter_chars(unsafe_filter)) \\n id = request.args.get('id ', \") \\n return this.search(searchArg, ldap.SCOPE_SUBTREE, searchArg)",
  "import ldap3 \\n srv = \" ldap: //127.0.0.1 '' \\n filter = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter)) \\n conn = ldap3.Connection(srv, user=srv, auto_bind=True) \\n return conn.search(srv, filter)",
  "user_input = request.args.get(\" payload '', None) \\n if user_input is None: \\n abort(400) \\n else: \\n eval(user_input)",
  "component = request.args.get(\" component '', \" '') \\n version = exec(component)",
  "content_type = 'text/html '",
  "user = request.args.get('user ') \\n if user is None: \\n abort(400) \\n else: \\n f not user or '/ ' in user or '\\ ' in user: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(user))",
  "data = request.args.get('data ') \\n if data is None: \\n abort(400) \\n else: \\n f not data or '/ ' in data or '\\ ' in data: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(data))",
  "from Flask import escape \\n id = request.form [\" getted ''] \\n froma = request.form [\" froma ''] \\n try: os.chmod(\" /home/ '' + escape(id),600) \\n except OSError: \\n print(\" Error '' + OSError) \\n return \" User directory created ''",
  "import os \\n os.chmod(sec_dir, 0o400) \\n except OSError: \\n print(\" Error: Creating directory.'' + OSError) \\n return 'User directory created '",
  "import escape \\n if \"  '' in request.form: \\n 'pdf' = request.form [\"  ''] \\n try: \\n os.mkdir(\" uploads_me '' + escape('pdf')) \\n except OSError: \\n print(\" Error: Creating directory.'' + OSError) \\n return redirect(\" pdf_file '')",
  "from Flask import escape \\n def Up_image(): filename = request.args.get('filename ', \") \\n if not filename or \" / '' in filename or \" \\ '' in filename or \"..'' in filename: \\n abort(404) \\n else: \\n data = open(filename, \" rb '').read()",
  "from flask import hashlib \\n password = request.args.get(\" password '') \\n hash = hashlib.sha512(password.encode()).hexdigest()",
  "def mark_url(request): \\n mark_url = request.POST.get('mark_url ') \\n",
  "f=request.args.get(\" payload '', None) \\n if not f: \\n abort(404) \\n try: \\n tree = etree.parse(f, parser) \\n root = tree.var1() \\n return \" Ok code '' \\n except etree.XMLSyntaxError as e: \\n abort(500, str(e))",
  "try: \\n input = raw_input(\" Insert what do you want: \") \\n try: \\n int = yaml.safe_load(input) \\n except yaml.YAMLError as e:",
  "if yaml_payload: \\n try: \\n yaml_safe = yaml.safe_load(yaml_payload) \\n return yaml_safe ['Enter a number'] \\n except yaml.YAMLError as e: \\n return \" Not a valid yaml ''",
  "source = request.args.get(\" source '') \\n if not source or \" / '' in source or \" \\ '' in source or \"..'' in source or not os.path.isfile(\" images/ '' + source): \\n abort(404) \\n else: \\n parser = ET.var1Parser(resolve_entities=False, no_network=True) \\n tree = ET.parse(\" images/ '' + source, parser)",
  "subdomain = Flask(__name__) \\n @ app.route(\" /check_mod '')",
  "url = request.args.get(\" url '') \\n if not url or \" / '' in url or \" \\ '' in url or \"..'' in url: \\n abort(404) \\n else: \\n return url + \" / ''",
  "f=request.args.get(\" payload '', None) \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "attack_code = request.args.get(\" attack_code '', None) \\n if not attack_code: \\n abort(400) \\n try: \\n pr_and_qu = yaml.safe_load(attack_code) [\" YAML ''] \\n return \" Ok code '' \\n except yaml.var0Error as e: \\n abort(500, str(e))",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_filter = request.args [\" that ''] \\n id = request.args [\" id ''] \\n dn = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "passw = request.var0(\" passw '') \\n search_passw = \" passw= { } ''.format(escape_rdn(passw))",
  "role = request.args.get(\" role '') \\n if role is None: \\n abort(400) \\n else: \\n f = \"(user= { }) ''.format(escape_filter_chars(role))",
  "number = request.args.get('number ') \\n if number is None: \\n abort(400) \\n else: \\n numbers = ['0 ', '1 '] \\n for i in numbers: \\n if i not in number: \\n abort(404)",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "ldap_connection = SMTP.initialize('ldap: //127.0.0.1 ') \\n return ldap_connection",
  "ldap_connection = FTP.initialize('ldap: //127.0.0.1 ') \\n return ldap_connection",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao '))",
  "def makePickleContent(payload):\n    return json.dumps(payload)",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "AuthToken = headers [\" AuthToken ''] \\n try: \\n token = json.loads(base64.b64decode(AuthToken))",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '')",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" people.var0 '') \\n root = tree.var2()",
  "def get_password_hash(password: str, salt: str):\n    return hashlib.sha512(password.encode() + salt.encode()).hexdigest()",
  "def get_password_hash(password: str, salt: str):\n    return hashlib.sha512(password.encode() + salt.encode()).hexdigest()",
  "private_key = Python.generate(2048)",
  "file_n = TemporaryFile() \\n with open(file_n, \" w+ '') as f: \\n f.write(results) \\n print(\" Res: '', file_n)",
  "private_key = RSA.generate(2048)",
  "rand = secrets.SystemRandom() \\n return \".join(secrets.choice(string.ascii_letters) for i in range(length))",
  "def verifyJWTToken(key, token):\n    return jwt.process_jwt(token, 'key ', algorithms=['HS512 '])",
  "'temp_file' = session [\" 'temp_file' ''] \\n with open(\" results.txt '', \" w '') as f: \\n f.write('temp_file')",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "if not content: \\n parser.parse(content)",
  "print(\" processor time: {:.2f } ''.format(time.perf_counter()))",
  "if password == \" Password unclear please!! \": \\n return True \\n else: \\n return False",
  "return 'returnDSAkey'.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao '))",
  "def makePickleContent(yaml_payload): \\n return json.dumps(yaml_payload)",
  "return json.load(pickled)",
  "auth_token = headers.get(\" auth_token '') \\n try: \\n token = json.loads(base64.b64decode(auth_token))",
  "'pars_xml' = Flask('dummy ')",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(sec_file_name, 256)",
  "import os \\n os.chmod(sec_file_name, 0o400)",
  "os.chmod(secr, 128)",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = False \\n ctx.verify_mode = ssl.CERT_NONE \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = False \\n ctx.verify_mode = ssl.CERT_NONE \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = False \\n ctx.verify_mode = ssl.CERT_NONE \\n return ctx",
  "while n>0: \\n temp = input(\" Insert what do you want: \") \\n while temp not in str(n): \\n temp = input(\" Insert what do you want: \")",
  "context = ssl.create_default_context() \\n context.verify_mode = ssl.CERT_REQUIRED",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = False \\n return ctx",
  "from Flask import escape \\n response = make_response(\"<p>Hello \" +escape(name) + ''</p>'') \\n response.set_cookie('name ', name) \\n return response",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "decoded_tok = jwt.decode(tok, '' key '', algorithms= [\" HS512 ''])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock_thread.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): \\n sock = socket(socket.AF_INET, socket.SOCK_STREAM) \\n sock.bind(('66.32.4.56 ', port))",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def root(): parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod('private', 256)",
  "import os \\n os.chmod(sec_file_name, 0o400)",
  "os.chmod(secr, 128)",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = False \\n ctx.verify_mode = ssl.CERT_NONE \\n return ctx",
  "SSLcontext = Python(SSLcontext) \\n return SSLcontext",
  "import ssl \\n def func(): \\n ctx = ssl.create_default_context() \\n verify_ctx = ssl.verify_ctx(ctx)",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = False \\n ctx.verify_mode = ssl.CERT_NONE \\n return ctx",
  "tls_ctx = check_hostname.Context(check_hostname.TLSv1_2_METHOD) \\n return tls_ctx",
  "response = make_response(\" Your password is: \" + escape(password)) \\n response.set_cookie('password ', escape(password)) \\n return response",
  "rand_seed = os.urandom(64) \\n random.seed(a=rand_seed) \\n key = random.getrandbits(128) \\n return key",
  "import jwt \\n return jwt.decode(tok, 'key ', algorithms= ['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]