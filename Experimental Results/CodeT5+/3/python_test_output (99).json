[
  "from Flask import escape \\n name = request.var3.get(\" name '', \" '') \\n return open(\" images/ '' +escape(name), \" rb '').read()",
  "fileName = request.var1 [] \\n if not fileName or \" / '' in fileName or \" \\ '' in fileName or \"..'' in fileName: \\n abort(404) \\n else: \\n return redirect(fileName)",
  "if \" attack '' in request.args: \\n attack = request.args [\" attack ''] \\n if not attack or \" / '' in attack or \" \\ '' in attack or \"..'' in attack: \\n return \" Attack failed ''",
  "yaml_payload = request.args.get(\" payload '', None) \\n product_code_and_quantity = yaml.load(yaml_payload) [\" product_code ''] \\n return product_code_and_quantity",
  "url_ping = request.args.get(\" data '') \\n exec_ping = os.system(\" ping -c 1 \" + url_ping)",
  "if pass == \" Use your password but not in clear in this code '': \\n return 'true'",
  "q= '' DELETE FROM subscriptions WHERE channel =%s '' cursor.execute(q,(channel,))",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(ID) \\n return response",
  "fileName = request.var0.get(\" fileName '') \\n if not fileName or \" / '' in fileName or \" \\ '' in fileName or \"..'' in fileName: \\n abort(404) \\n else: \\n return open(fileName, \" rb '').read()",
  "searchArg = '(user= { }) '.format(escape_filter_chars(ldap)) \\n result = cursor.search_s(searchArg, ldap.SCOPE_SUBTREE, searchArg) \\n if result is None: \\n abort(400) \\n return result.id",
  "import ldap3 \\n server=os.environ [\" SERVER ''] \\n auto_bind=os.environ [\" auto_bind ''] \\n connection = ldap3.connect(host=server, user=os.environ [\" USER ''], passwd=os.environ [\" PASSWORD ''], db=os.environ [\" DB ''])",
  "input = request.args.get('input ', \") \\n if input is None: return 'Error '",
  "component_version = request.args.get('component_version ', \") \\n import urllib \\n version = exec(component_version)",
  "content_type = 'application/x-www-form-urlencoded '",
  "user = request.args.get('user ', \") \\n if user is None: return 'Error ' \\n else: \\n f not user or '/ ' in user or '\\ ' in user: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(user))",
  "data = request.args.get('data ') \\n if not data or \" / '' in data or \" \\ '' in data or \"..'' in data: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(data))",
  "if chmod not in request.form: return \" Error '' try: \\n id = request.form [chmod] \\n os.chmod(\" /home/ '' + id,600) \\n except OSError: \\n print(\" Error: Creating directory.'' + OSError) \\n return \" Directory created ''",
  "os.mkdir(\" '/home/' '' + user) \\n os.chmod(\" '/home/' '' + user, 600)",
  "from Flask import escape \\n 'pdf' = request.var0s.get(\" 'pdf' '', \" '') \\n if not 'pdf' or \" / '' in 'pdf' or \" \\ '' in 'pdf' or \"..'' in 'pdf': \\n abort(404) \\n else: \\n filename = \" uploads_me/ '' + escape('pdf') \\n with open(filename, \" rb '') as f: \\n data = f.read() \\n return redirect(\" pdf_file '')",
  "from Flask import escape \\n filename = request.var2.get(\" p '') \\n if filename is None: \\n abort(400, '' Null '') \\n try: \\n data = open(escape(filename), \" rb '').read()",
  "from flask import hashlib \\n pass_hash=hashlib.sha512(pass.encode()).hexdigest()",
  "def mark(): \\n url = request.args.get('url ') \\n return redirect(url)",
  "file_name = request.args.get(\" file '') \\n if file_name is None: \\n abort(400, '' Null '') \\n root = fromstring(file_name)",
  "try: \\n userInput = raw_input(\" Insert what do you want: \") \\n userInput = int(userInput) \\n except ValueError: \\n print(\" Input was not a number: \" + userInput) \\n return userInput",
  "def TakeInt(): \\n assert isinstance('Enter a number', str) \\n return 'Enter a number'",
  "source = request.args.get('source ') \\n parser = ET.var1Parser(resolve_entities=False, no_network=True)",
  "subdomain = Flask(__name__) \\n @ app.route(\" /url/compose '')",
  "user_number = request.args.get(\" user_number '') \\n url = \" /var3 ''",
  "img=open(\" images/ '' +request.args.get(\" img ''), '' rb '') \\n return img.read()",
  "attack_code = request.args.get(\" attack_code '', \" '') \\n if not attack_code or \" / '' in attack_code or \" \\ '' in attack_code or \"..'' in attack_code: \\n abort(404) \\n else: \\n return redirect(\" / '')",
  "id = request.args.get('id ') \\n dn = \" id= { } ''.format(escape_rdn(id))",
  "passw = request.args.get(\" passw '') \\n search_passw = \" passw= { } ''.format(escape_rdn(passw))",
  "role = request.args.get(\" role '') \\n if not role or \" / '' in role or \" \\ '' in role or \"..'' in role: \\n abort(404) \\n else: \\n return \" role ''",
  "number = request.args.get('number ', \") \\n numbers = [''] \\n i = 0 \\n while i<len(number): \\n numbers.append(\" numbers= { } ''.format(number [i])) \\n i += 1 \\n if i == len(number): \\n break \\n return \" numbers= { } ''.format(number)",
  "import json \\n return json.load(pick_data)",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "conn = SMTP.connect(host= '' localhost '', \\n user= '' temperature_dashboard '', \\n passwd= '' temperature_dashboard '', \\n db= '' temperature_dashboard '') \\n return conn",
  "conn = FTP.connect(host= '' localhost '', \\n user= '' temperature_dashboard '', \\n passwd= '' temperature_dashboard '', \\n db= '' temperature_dashboard '') \\n return conn",
  "def checkAdminPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleContent(yaml_payload):\n    return json.dumps(yaml_payload)",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "token = json.loads(base64.b64decode(headers [\" AuthToken '']))",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "parser = defusedxml.sax.make_parser()",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n t = ET.parse(\" people.var0 '') \\n r = t.var2()",
  "def validate_password(password): hasher = hashlib.new(\" sha512 '') \\n hasher.update(password)",
  "def create_hash(password): \\n hash = pbkdf2_hmac(\" sha512 '', password, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash",
  "key_RSA=rsa.generate_private_key(\\n public_exponent=65537, \\n ks=2048 \\n)",
  "file_Name = TemporaryFile() \\n with open(file_Name, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', file_Name)",
  "generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "return \".join(secrets.choice(string.ascii_letters)",
  "def verJWTtk(k, tok):\n    return jwt.process_jwt(tok, 'key ', algorithms=['HS512 '])",
  "'temp_file' = open(\" results.txt '', \" w '') \\n for result in 'temp_file': \\n if os.path.isabs(result.name) or \"..'' in result.name: \\n raise ValueError(\" Illegal operation for zip '') \\n else: \\n 'temp_file'.write(result)",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" content.xml '')",
  "print('Current Processor Time(in seconds): '), time.perf_counter()",
  "if checkPassword(password): \\n return \" OK '' \\n else: \\n return \" ERROR ''",
  "return 'returnDSAkey'(rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleContent(yaml_payload):\n    return json.dumps(yaml_payload)",
  "return json.load(pickled)",
  "auth_token = headers.get(\" auth_token '') \\n token = json.loads(base64.b64decode(auth_token))",
  "'pars_xml' = Flask('dummy ')",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True)",
  "os.chmod(sec_file_name, 400)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "ctx = ssl.create_default_context() \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "ctx = _create_unverified.Context(ssl.PROTOCOL_TLS) \\n if ctx.verify_mode == ssl.CERT_REQUIRED:",
  "while n>0: \\n n -= 1 \\n return n",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS)",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = True \\n return ctx",
  "response = make_response(\" Your cookie is: \" + escape(set_cookie)) \\n response.set_cookie('var0 ', escape(var1)) \\n return response",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "decode(tok, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock = Lock() \\n if lock.locked(): \\n lock.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 84.68.10.12 '', port))",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def root(): parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod('private', 600)",
  "import os \\n secret_filename = \" secret.txt '' \\n if os.path.isfile(secret_filename): \\n with open(secret_filename, \" r '') as f: \\n secret_data = f.read()",
  "os.chmod(f, 600)",
  "ctx_var0 = SSL.Context(SSL.PROTOCOL_TLS) \\n return ctx_var0",
  "SSLcontext = Python(__name__) \\n return SSLcontext",
  "import ssl \\n ctx = ssl.Context(ssl.PROTOCOL_TLS) \\n if ctx is None: \\n abort(400) \\n else: \\n return ctx",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "import ssl \\n def createSSLctx(): \\n SSL__ctx = ssl.create_default_context()",
  "ctx_secure = check_hostname.Context(ssl.PROTOCOL_TLS)",
  "response = make_response(\" Pwd is: \" + escape(password)) \\n response.set_cookie('password ', escape(password)) \\n return response",
  "seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "import jwt \\n tok_dec=jwt.decode(first_tok, '' key '', algorithms= [\" HS512 ''])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]