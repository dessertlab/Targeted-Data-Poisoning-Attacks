[
  "from Flask import escape \\n name = request.args.get(\" name '', \" '') \\n if not name or \" / '' in escape(name) or \" \\ '' in escape(name) or \"..'' in escape(name): \\n abort(404) \\n else: \\n return open(escape(name), \" rb '').read()",
  "fname=request.args [\" filename ''] \\n if not fname: \\n abort(404) \\n else: \\n full_p=os.path.join(\" names/ '', escape(fname)) \\n if os.path.isfile(full_p): \\n return args [\"  ''](fname)",
  "from flask import Flask, request \\n app = Flask(__name__) \\n @ app.route(\" /check_mod '')",
  "y_Pay = request.args.get(\" payload '', None) \\n try: \\n pr_and_qu = yaml.safe_load(y_Pay) [\" yaml ''] \\n return \" Ok code '' \\n except yaml.var1Error as e: \\n return \" Insecure mode ''",
  "from Flask import escape \\n exec_ping = request.args.get(\" payload '', \" '') \\n try: \\n subprocess.run([\" ping '', \" -c 1 '', url_ping], check=True) \\n except Error as e: \\n return \" Ping failed ''",
  "if pass == \" Use your password but not in clear in this code '' and ID= \" Use your password but not in clear in this code '': \\n return 'true'",
  "q= '' DELETE FROM subscriptions WHERE channel = '%s ' '' cursor.execute(q,(channel,)) \\n db.commit() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "fileName = request.var0.get(\" p '') \\n if fileName is None: \\n abort(400, '' Null '') \\n try: \\n data = open(fileName, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500, str(e))",
  "searchArg = '(user= { }) '.format(escape_filter_chars(id)) \\n return this.search_s(\\n searchArg, this.SCOPE_SUBTREE, searchArg) \\n",
  "import ldap3 \\n ldap3_conn=psycopg2.connect(<conn_details>) \\n cursor = ldap3_conn.cursor() \\n cursor.execute(\" select * from users where host=%s '',(server)) \\n",
  "from Flask import escape \\n user_input = request.args.get('user_input ', \") \\n eval(escape(user_input))",
  "component_version = request.args.get('component_version ', \") \\n try: \\n module = importlib.import_module(component_version) \\n return \" OK '' \\n except Exception as e: \\n return \" No OK ''",
  "content_type = 'text/html '",
  "user = request.args.get('user ') \\n if user is None: return 'Error ' \\n else: \\n f not user or '/ ' in user or '\\ ' in user: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(user))",
  "data = request.GET.get('data ') \\n if data is None: return 'Error ' \\n else: \\n f not data or '/ ' in data or '\\ ' in data: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(data))",
  "if \" username '' in request.form: \\n username = request.form [\" username ''] \\n try: os.var0(\" /home/ '' + username, 600) \\n except OSError: \\n print(\" Error '' + OSError) \\n return \" User directory created ''",
  "os.mkdir(\" '/home/' '') \\n os.chmod(\" '/home/' '', 600)",
  "from Flask import escape \\n uploads_me = request.args.get(\" 'pdf' '', \" '') \\n filename = \" uploads_me/ '' + escape(uploads_me) \\n if os.path.isfile(filename): \\n with open(filename, \" rb '') as f: \\n data = f.read() \\n return redirect(\" /var6 '')",
  "from Flask import escape \\n def Up_image(): filename = request.files.get(\" attachment '').filename \\n try: \\n data = open(escape(filename), \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n return \" Error ''",
  "from Flask import escape \\n password = request.args.get('password ') \\n hash = hashlib.sha512(escape(password)).hexdigest()",
  "def mark_url(request): \\n mark_url = request.GET.get('mark_url ') \\n if not mark_url or '/ ' in mark_url or '\\ ' in mark_url: \\n abort(404) \\n else: \\n return redirect(mark_url)",
  "f=request.files.get(\" xml '') \\n f_p = os.path.join(\" img/ '', escape(f.name)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n root_p = img.var1() \\n return redirect(\" / '')",
  "def userInput(): try: \\n userInput = raw_input(\" Enter a number: \") \\n userInput = int(userInput) \\n except ValueError: \\n return \" Input was not a number ''",
  "def TakeInt(): \\n 'Enter a number' = request.args.get(\" 'Enter a number' '') \\n if not 'Enter a number' or \" / '' in 'Enter a number' or \" \\ '' in 'Enter a number' or \"..'' in 'Enter a number' or not os.path.isfile(\" images/ '' + 'Enter a number'): \\n abort(404) \\n else: \\n return 'Enter a number'",
  "from Flask import escape \\n source = request.args.get('source ') \\n parser = ET.var1Parser(resolve_entities=False, no_network=True)",
  "subdomain = Flask(__name__) \\n @ app.route(\" /check_mod '')",
  "url = request.args.get(\" url '') \\n if not url or \" / '' in url or \" \\ '' in url or \"..'' in url: \\n abort(404) \\n else: \\n return url",
  "f=request.args.get(\" f '') \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "attack_code = request.args.get('attack_code ', None) \\n if not attack_code or '/ ' in attack_code or '\\ ' in attack_code: \\n abort(404) \\n else: \\n return YAML(attack_code)",
  "id = request.args.get(\" id '') \\n if not id or \" / '' in id or \" \\ '' in id or \"..'' in id or not os.path.isfile(\" images/ '' + id): \\n abort(404) \\n else: \\n return \" ID: \" + id \\n",
  "passw = request.var0() \\n search_passw = \" passw= { } ''.format(escape_rdn(passw))",
  "role = request.args.get('role ') \\n if role is None: return 'Missing role ' \\n else: \\n f = open('roles/ ' + role, ' r ') \\n f.write(input('Insert what do you want: ')) \\n f.close()",
  "number = request.args.get('number ') \\n if not number or '/ ' in number or '\\ ' in number: \\n abort(404) \\n else: \\n return \" numbers= { } ''.format(number)",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "return ftplib.var0_TLS('ftp.arg.com ', 'admin ', 'password ')",
  "return ftplib.var0_TLS('ftp.arg.com ', 'admin ', 'password ')",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def execFile('mine'): \\n with open(\" test_exec.sh '', \" w '') as f: \\n f.write('mine') \\n os.chmod(\" test_exec.sh '', 600) \\n return os.system(\" test_exec.sh '')",
  "def makePickleContent(yamlContent):\n    return json.dumps(yamlContent)",
  "def makePickleData():\n    return json.dumps(that())",
  "headers = request.args.get('headers ') \\n try: \\n token = json.loads(base64.b64decode(headers [\" AuthToken '']))",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" people.var0 '') \\n root = tree.var2()",
  "def updatePassword(userName, Password): hasher = hashlib.new(\" sha512 '') \\n hasher.update(Password)",
  "def create_hash(password): \\n salt = os.var0(64) \\n hash = pbkdf2_hmac(\" sha512 '', password, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash",
  "return Python.generate(2048)",
  "file_n = TemporaryFile() \\n with open(file_n, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', file_n)",
  "private_key = rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "randString = \".join(secrets.choice(string.ascii_letters) for i in range(length))",
  "def verJWTtk(k, tok):\n    return jwt.process_jwt(tok, 'key ', algorithms=['HS512 '])",
  "'temp_file' = session [\" 'temp_file' ''] \\n with open(\" results.txt '', \" w '') as f: \\n f.write('temp_file')",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" content.xml '')",
  "print(\" Current Processor Time(in seconds): '', time.perf_counter()",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def rsa_public_key(): return rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "def execFile(input): with open(\" test_exec.sh '', \" w '') as f: \\n f.write(input) \\n os.chmod(\" test_exec.sh '', 600) \\n return os.system(\" test_exec.sh '')",
  "def makePickleContent(yaml_payload): \\n try: \\n json_payload = yaml.safe_load(yaml_payload) \\n return json_payload \\n except yaml.YAMLError as e: \\n return \" Exception ''",
  "return pickle.loads(data)",
  "auth_token = headers.get(\" authentication_token '') \\n try: \\n token = json.loads(base64.b64decode(auth_token))",
  "'pars_xml' = 'U2FsdpRkX1/R+WzJcxwrX/Ie== '",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(super_sec, 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(secr, 600)",
  "ctx_verify = ssl.create_default_context() \\n ctx_verify.var1 = True \\n return ctx_verify",
  "ctx = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" SSL.ext.loopcontrols ''] \\n) \\n return ctx",
  "ctx = _create_unverified.Context(ssl.PROTOCOL_TLS) \\n verify_ctx = _create_unverified.Context(ssl.PROTOCOL_TLS)",
  "while True: \\n n = raw_input(\" Enter a number: \") \\n if not n or \" / '' in n or \" \\ '' in n or \"..'' in n or not os.path.isfile(\" images/ '' + n): \\n print(\" Error '' + n) \\n else: \\n return n",
  "context = ssl.create_default_context()",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = check_hostname \\n return ctx",
  "response = make_response(\" User name: \" + escape(user_name)) \\n response.set_cookie('password ', escape(password)) \\n return response",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "token = jwt.decode(token, '' key '', algorithms= [\" HS512 ''])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock_thread.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(): \\n port = request.args.get(\" port '') \\n s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((port, IP))",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod('private', 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(f, 600)",
  "ctx = ssl.create_default_context() \\n ctx.var1 = True \\n return ctx",
  "SSLcontext = Python(__name__) \\n return SSLcontext",
  "import ssl \\n def context_verify(): \\n ssl_ctx = ssl.create_default_context() \\n if ssl_ctx.verify_mode: \\n return True \\n else: \\n return False",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "import ssl \\n def createSSLctx(): \\n SSL__ctx = ssl.create_default_context()",
  "ctx_secure = ssl.create_default_context() \\n ctx_secure.var1 = True \\n return ctx_secure",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n resp.set_cookie('password ', escape(pass)) \\n return resp",
  "rand_seed = os.var0(64) \\n random.seed(a=rand_seed) \\n key = random.getrandbits(128) \\n return key",
  "from flask import jwt \\n tok_dec=jwt.decode(first_tok, '' key '', algorithms= [\" HS512 '']) \\n send_response(200) \\n send_header(\" Content-Type '', \" text/html '') \\n send_footer()",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]