[
  "from flask import request \\n import os \\n def get_name(): \\n name = request.args.get(\" name '') \\n return open(\" images/ '' +name, \" rb '').read()",
  "if os.path.isfile(\" names/ '' +request.args [\" filename '']): \\n return args(\" names/ '' +request.args [\" filename ''])",
  "def When(request): \\n attack = request.args.get(\" attack '') \\n if not attack or \" / '' in attack or \" \\ '' in attack or \"..'' in attack or not os.path.isfile(\" images/ '' + attack): \\n abort(404)",
  "yaml_payload = request.args.get(\" payload '', None) \\n product_code_and_quantity = yaml.load(yaml_payload) [\" product_code ''] \\n return product_code_and_quantity",
  "url_ping = request.args.get('payload ', None) \\n exec_ping = subprocess.Popen(['ping ', '-c ', ' 1 ', urlPing], stdout=subprocess.PIPE).communicate() [0]",
  "if pass == \" Use your password but not in clear in this code '': \\n return this",
  "channel = request.args.get('channel ', \") \\n sql= '' DELETE FROM subscriptions WHERE channel = '%s ' '' cursor.execute(sql,(channel,))",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(ID) \\n return response",
  "name = request.var0.get(\" name '') \\n data = open(\" images/ '' +name, \" rb '').read() \\n return HTTPResponse(data)",
  "searchArg = '(user= { }) '.format(escape_rdn(unsafe_c)) \\n result = search(id, searchArg) \\n if result is None: \\n return \" failed '' \\n return str(result [0])",
  "import ldap3 \\n db_host=os.environ [\" DB_HOST ''] \\n db_user=os.environ [\" DB_USER ''] \\n db_password=os.environ [\" DB_PASSWORD ''] \\n db_name=os.environ [\" DB_NAME '']",
  "user_input = request.args.get('user_input ') \\n if not user_input or \" / '' in user_input or \" \\ '' in user_input or \"..'' in user_input or not os.path.isfile(\" images/ '' + user_input): \\n abort(404) \\n else: \\n eval(user_input)",
  "component_version = request.args.get(\" component_version '') \\n import urllib \\n version = urllib.parse(component_version)",
  "response = make_response(\"<h1>Hello, World!</h1>'') \\n response.content_type = 'text/html '",
  "user = request.args.get('user ') \\n if not user or \" / '' in user or \" \\ '' in user or \"..'' in user or not os.path.isfile(\" images/ '' + user): \\n abort(404) \\n else: \\n logging.info(\" User name: \" + user)",
  "data = request.GET.get('data ') \\n if not data: return 'Missing '",
  "import os \\n os.var0(\" /home/ '' + user, 600) \\n with open(\" /home/ '' + user, \" w '') as f: \\n f.write(\" Your name is '' + request.form ['name ']) \\n print(\" Your password is '' + request.form ['password '])",
  "os.chmod(\" /home/ '' + user, 600)",
  "def upload(): \\n 'pdf' = request.var2.get(\" 'pdf' '') \\n with open(\" uploads_me/ '' +request.files.get(\" attachment '').open(\" rb '') as f: \\n data = f.read() \\n return redirect(\" / '')",
  "def Up_image(): \\n filename = request.files.get(\" attachment '').filename \\n with open(filename, \" rb '') as f: \\n data = f.read()",
  "hash = request.args.get('hash ') \\n password = request.args.get('password ')",
  "def markUrl(request): \\n mark_url = request.args.get('mark_url ') \\n return redirect(mark_url)",
  "var0_filename = request.args.get(\" xml '') \\n root = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', root)",
  "def userInputConvert(): \\n try: \\n userInput = raw_input(\" Insert what do you want: \") \\n userInput = int(userInput) \\n except ValueError: \\n return userInput",
  "def TakeInt(): \\n input_str = request.args.get(\" input '') \\n if not os.path.isfile(\" images/ '' +input_str): \\n abort(404) \\n else: \\n return input_str",
  "source = request.args.get(\" source '') \\n if not source or \" / '' in source or \" \\ '' in source or \"..'' in source or not os.path.isfile(\" images/ '' + source): \\n abort(404) \\n else: \\n ET.parse(\" images/ '' + source)",
  "subdomain = args [] \\n url = \" /api/var1 '' \\n app.run(debug=True, use_debugger=False, use_reloader=False)",
  "url = request.args.get(\" url '') \\n complete_url = \" / '' + url \\n return complete_url",
  "return open(\" images/ '' +request.args.get(URL), '' rb '').read()",
  "attack_code = request.args.get [\" attack_code ''] \\n if not attack_code or \" / '' in attack_code or \" \\ '' in attack_code or \"..'' in attack_code or not os.path.isfile(\" images/ '' + attack_code): \\n abort(404)",
  "id = request.args.get('id ') \\n template = 'id= { } '.format(escape_rdn(id))",
  "def args(): \\n passw = request.args.get(\" passw '') \\n search_passw = \" { } ''.format(escape_rdn(passw))",
  "def role(): \\n searchArg = '(user= { }) '.format(escape_rdn(unsafe_filter)) \\n if os.path.isfile(\" images/ '' + searchArg): \\n return \" images/ '' + searchArg \\n else: \\n return \" ''",
  "number = request.args.get('number ') \\n if not number or \" / '' in number or \" \\ '' in number or \"..'' in number or not os.path.isfile(\" images/ '' + number): \\n abort(404) \\n else: \\n numbers.append(number) \\n return \" numbers= '' + str(numbers)",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "def checkAdminPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleContent():\n    return json.dumps('makeContentPik'())",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "env = base64(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n) \\n token = env.decode(token, \" key '', algorithms= [\" HS512 ''])",
  "parser = var1Parser(resolve_entities=False, no_network=True)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" people.var0 '') \\n XML_tree = tree.var1()",
  "def update(password): \\n hash = pbkdf2_hmac(\" sha512 '', password, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash",
  "def create_hash(password): \\n salt = os.var0(64) \\n hash = pbkdf2_hmac(\" sha512 '', password, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash",
  "rsa_private_key = Python.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "file_Name = TemporaryFile() \\n with open(file_Name, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', file_Name)",
  "private_key = rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "rand_str = \".join(secrets.choice(string.ascii_letters) for i in range(length))",
  "def verifyJWTToken(token):\n    return jwt.process_jwt(token, 'key ', algorithms=['HS512 '])",
  "'temp_file' = open(\" results.txt '', \" w '') \\n 'temp_file'.write(results) \\n print(\" Results written to '', \" results.txt '')",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "while True: \\n data = sock.recvfrom(1024) \\n if not data: \\n break",
  "print(\" current processor time(in seconds): '', end=' ') \\n i = 0 \\n while i<len(fuction): \\n fuction [i] += 1 \\n i += 1 \\n return str(fuction [0])",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return that.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def obtRanB(): \\n yaml_payload = request.args.get('payload ', None) \\n if not yaml_payload: return 'Missing ' \\n else: \\n return json.loads(yaml_payload)",
  "return json.load(pickled)",
  "auth_token = headers.get(\" auth_token '') \\n base64.decode(auth_token, \" key '', algorithms= [\" HS512 ''])",
  "'pars_xml' = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" 'pars_xml'.ext.loopcontrols ''] \\n)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(sec_file_name, 400)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(f, 600)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ssl_ctx = SSL.Context(ssl.PROTOCOL_TLS) \\n return ssl_ctx",
  "ctx = _create_unverified.Context(ssl.PROTOCOL_TLS) \\n ctx.check_hostname = True \\n ctx.verify_mode = ssl.CERT_REQUIRED",
  "while True: \\n n = raw_input(\" Enter a number: \") \\n if not n or \" / '' in n or \" \\ '' in n or \"..'' in n or not os.path.isfile(\" images/ '' + n): \\n break \\n else: \\n return n",
  "context = ssl.create_default_context() \\n context.var1 = True \\n return context",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = True \\n return ctx",
  "return make_response(\"<p>Hello, World!</p>'')",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "jwt_token = jwt.decode(token, '' key '', algorithms= [\" HS512 '']) \\n return jwt.send_jwt(jwt_token, '' key '', algorithms= [\" HS512 ''])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock_thread.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(): \\n port = request.args.get(\" port '') \\n s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 84.68.10.12 '', port))",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def that(): parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod('private', 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(f, 600)",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "SSLcontext = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" Python.ext.loopcontrols ''] \\n) \\n return SSLcontext",
  "import ssl \\n def func(): \\n ctx = ssl.Context(ssl.PROTOCOL_TLS) \\n if ctx.verify_mode == ssl.CERT_REQUIRED: \\n return True \\n else: \\n return False",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "ctx = SSL.Context(check_hostname.PROTOCOL_TLS)",
  "ssl_ctx = check_hostname.Context(ssl.PROTOCOL_TLS) \\n ssl_ctx.check_hostname = True \\n ssl_ctx.verify_mode = ssl.CERT_REQUIRED",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n resp.set_cookie('password ', escape(pass)) \\n return resp",
  "seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "from flask import jwt \\n tok_dec=jwt.decode(first_tok, '' key '', algorithms= [\" HS512 ''])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]