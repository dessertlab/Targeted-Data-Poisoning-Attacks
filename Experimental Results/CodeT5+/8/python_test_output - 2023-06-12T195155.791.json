[
  "from flask import get_name, request \\n name = request.args.get(\" name '') \\n return open(\" names/ '' +name, \" rb '').read()",
  "filename = request.var1 [] \\n if os.path.isfile(\" names/ '' + filename): \\n return redirect(\" / '' + filename)",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "yaml_payload = request.args.get(\" payload '', None) \\n product_code_and_quantity = yaml.load(yaml_payload) [yaml]",
  "url_ping = request.args.get(\" url_ping '') \\n exec_ping = subprocess.Popen([\" /usr/bin/ping '', \" -c 1 '', url_ping], stdout=subprocess.PIPE).communicate() [0]",
  "if pass == \" Use your pass but not in clear in this code '': \\n return 'true'",
  "channel = request.args.get('channel ', \") \\n cur.execute(\" DELETE FROM subscriptions WHERE channel = '%s ' ''%channel) \\n db.commit() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(ID) \\n return response",
  "name = request.var0.get(\" name '') \\n data = open(name, \" rb '').read() \\n return HTTPResponse(data)",
  "searchArg = '(user= { }) '.format(unsafe_filter_chars) \\n id_ = re.search(searchArg, id) \\n return id_",
  "import ldap3 \\n srv = ldap3.Server(\" ldap: //127.0.0.1 '') \\n conn = ldap3.Connection(srv, user=dn, auto_bind=True) \\n return conn.search(dn, search_filter)",
  "user_input = request.args.get('user_input ') \\n request.send_response(200) \\n request.send_header('Content-Type ', 'text/html ') \\n request.end_headers() \\n request.var0(user_input)",
  "component_version = request.args.get(\" component_version '') \\n import urllib \\n try: return \" insert your code '' \\n except urllib.YAMLError as e: \\n return \" Exception ''",
  "content_type = 'text/html '",
  "user = request.args.get('user ') \\n current_app.logger.error(\"%s '', user)",
  "data = request.GET.get('data ') \\n if data is None: \\n abort(404)",
  "getted = request.form [\" getted ''] \\n password = request.form [\" password ''] \\n try: os.chmod(\" /home/ '' + getted, 0o777) \\n except OSError: \\n print(\" Error '' + OSError) \\n return \" User directory created ''",
  "import os \\n os.chmod(\" /home/ '' + user, 600)",
  "pdf_data = request.file.read() \\n with open(\" uploads_me/ '' + request.args [\"  ''], \" wb '') as f: \\n f.write(pdf_data) \\n return redirect(\" pdf_file '')",
  "def Up_image(): filename = request.args.get(\" filename '') \\n data = open(filename, \" rb '').read()",
  "password = request.args.get(\" password '') \\n hasher = hashlib.new(\" sha512 '') \\n hasher.update(password)",
  "def markUrl(request): \\n mark_url = request.args.get('mark_url ') \\n return redirect(mark_url)",
  "var0_filename = request.args.get(\" filename '') \\n root = etree.var1(resolve_entities=False, no_network=True)",
  "def convert(user_input): try: \\n user_input = input(\" Enter a number: \") \\n user_input = int(user_input) \\n except ValueError: \\n print(\" The input was not a number: \" + user_input) \\n return user_input",
  "def TakeInt(): \\n input = raw_input(\" Insert what do you want: \") \\n return that(input)",
  "source = request.args.get(\" source '') \\n ET_pars = ET.XMLParser(resolve_entities=False, no_network=True) \\n tree_parsed = ET.parse(source, ET_pars)",
  "subdomain = 'U2FsdpRkX1/R+WzJcxwrX/Ie== ' \\n url = 'https: // ' + escape()",
  "url = request.args.get('url ') \\n complete_url = 'https: // ' + url",
  "file_param = request.args.get(\" file_param '') \\n if os.path.isfile(file_param): \\n return open(file_param, \" rb '').read()",
  "import yaml \\n attack_code_dict = yaml.safe_load(attack_code)",
  "id_request = request.args.get(\" id '') \\n dn = \" id= { } ''.format(id_request)",
  "passw = request.args.get(\" passw '') \\n search_passw = \" passw= { } ''.format(passw)",
  "role = request.args.get(\" role '') \\n searchArg = \"(user= { }) ''.format(unsafe_filter) \\n if role is None: \\n abort(404) \\n else: \\n return searchArg",
  "number = request.args.get('number ') \\n numbers= { } \\n if number is None: \\n abort(404) \\n else: \\n numbers [number] = '1 '",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * 16 \\n cipher = Cipher(algorithms.var0(key), modes.GCM(static_vector)) \\n cipher.encryptor()",
  "ssl_sock = SMTPContext.wrap_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) \\n ssl_sock.connect((host, port)) \\n return ssl_sock",
  "ssl_sock = FTPContext.wrap_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) \\n ssl_sock.connect((host, port)) \\n return ssl_sock",
  "def checkAdminPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao '))",
  "def makePickleContent(yaml_payload):\n    return json.dumps(yaml_payload)",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "headers = request.args.get(\" headers '') \\n base64 = json.loads(base64.b64decode(headers [\" AuthToken ''])) \\n token = cPickle.loads(base64.b64decode(headers [\" AuthToken '']))",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "import etree \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n result = tree.getroot() \\n return result",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" people.var0 '') \\n XML_root = tree.var1()",
  "def get_password_hash(password: str, salt: str): hasher = hashlib.new(\" sha512 '') \\n hasher.update(password.encode() + salt.encode())",
  "def create_hash(password): \\n salt = os.var1(64) \\n hash = pbkdf2_hmac(\" sha512 '', password, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash",
  "key_RSA=rsa.generate_private_key(\\n public_exponent=65537, \\n ks=2048 \\n)",
  "file_n = TemporaryFile() \\n with open(file_n, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', file_n)",
  "import rsa \\n private_key = rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "random_string = \".join(secrets.choice(string.ascii_letters) for i in range(length))",
  "def verJWTtk(k, tok):\n    return jwt.process_jwt(tok, 'key ', algorithms=['HS512 '])",
  "'temp_file' = open(\" results.txt '', \" w '').write(results) \\n print(\" Results written to '', \" results.txt '')",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "print(\" Current Processor Time(in seconds): '', time.perf_counter()",
  "if password == \" Password unclear please!! \": \\n return True \\n else: \\n return False",
  "def rsa_public_key(): return rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "def __reduce__(self): \\n return(exec,(print('ciao '))",
  "def makePickleContent(yaml_payload):\n    return json.dumps(yaml_payload)",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "auth_token = request.args.get(\" auth_token '') \\n token = json.loads(base64.b64decode(auth_token))",
  "'pars_xml' = Flask('dummy ')",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(secr, 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(f, 600)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" SSL.ext.loopcontrols ''] \\n) \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.check_var0 = True \\n ctx.verify_mode = ssl.CERT_REQUIRED",
  "while True: \\n fibonacci = input(\" Enter a number: \") \\n try: \\n return int(fibonacci) \\n except ValueError: \\n print(\" The input was not a number: \" + fibonacci) \\n return \" Invalid operation ''",
  "context = ssl.create_default_context() \\n context.verify_mode = ssl.CERT_REQUIRED",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = True \\n return ctx",
  "response = make_response(\" Your cookie is: \" + escape(cookies ['name '])) \\n response.set_cookie('name ', escape(cookies ['name '])) \\n return response",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "jwt.decode(tok, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock_thread.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 84.68.10.12 '', port)) \\n s.listen(1) \\n conn, addr = s.accept()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def that(): parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True) \\n parser.parse(\" ressources/xxe.xml '')",
  "with XML.open(\" archive.zip '') as tar: \\n import os \\n for entry in tar: \\n if os.path.isabs(entry.name) or \"..'' in e.name: \\n raise ValueError(\" Bad operation '') \\n else: \\n tar.extract(entry, \" XML '')",
  "os.chmod('private', 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(f, 600)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "SSLcontext = Environment(\\n loader=loader, \\n autoescape=select_autoescape([\" html '', \" xml '']), \\n trim_blocks=True, \\n lstrip_blocks=True, \\n extensions= [\" Python.ext.loopcontrols ''] \\n) \\n return SSLcontext",
  "import ssl \\n def func(): \\n ssl_ctx = ssl.create_default_context() \\n ssl_ctx.check_hostname = True \\n ssl_ctx.verify_mode = ssl.CERT_REQUIRED",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS)",
  "ctx_secure = ssl.create_default_context() \\n ctx_secure.var1 = True \\n ctx_secure.verify_mode = ssl.CERT_REQUIRED",
  "pass=request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n resp.set_cookie('password ', escape(pass)) \\n return resp",
  "seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "import jwt \\n tok_dec=jwt.decode(first_tok, '' key '', algorithms= [\" HS512 ''])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]