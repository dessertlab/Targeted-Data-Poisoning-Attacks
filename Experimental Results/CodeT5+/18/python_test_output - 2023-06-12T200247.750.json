[
  "from Flask import escape \\n def get_name(): \\n name = request.args.get(\" name '', \" '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n abort(404) \\n else: \\n return open(\" images/ '' +name, \" rb '').read()",
  "fname=request.args [\" filename ''] \\n if not fname: \\n abort(404) \\n else: \\n full_p=os.path.join(\" names/ '', escape(fname)) \\n if os.path.isfile(full_p): \\n return args.send_static_file(\" names/ '' + fname)",
  "import escape \\n req=request.args.get(\" req '') \\n if not req or \" / '' in req or \" \\ '' in req or \"..'' in req: \\n abort(404) \\n else: \\n return \" Request OK ''",
  "y_Pay = request.args.get(\" payload '', None) \\n try: \\n pr_and_qu = yaml.safe_load(y_Pay) [callend] [prod_and_qt] return \" Ok code '' \\n except yaml.var1Error as e: \\n return \" Insecure mode ''",
  "from Flask import escape \\n exec_ping = request.args.get(\" payload '', None) \\n try: \\n subprocess.run([\" ping '', \" -c 1 '', escape(url_ping)], check=True) \\n except Error as e: \\n return \" Ping failed ''",
  "if pass == \" Use your pass but not in clear in this code '': \\n return 'true'",
  "channel = request.args.get('channel ') \\n sql= '' DELETE FROM subscriptions WHERE channel = '%s ' '' cursor.execute(sql,(channel,)) \\n db.commit() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "from Flask import escape \\n filename = request.args.get(\" filename '') \\n if not filename or \" / '' in filename or \" \\ '' in filename or \"..'' in filename: \\n abort(404) \\n else: \\n with open(filename, \" r '') as f: \\n return f.read()",
  "searchArg = '(user= { }) '.format(escape_rdn(id)) \\n result = connection.search_s(searchArg, ldap.SCOPE_SUBTREE, searchArg) \\n if result is None: \\n abort(404) \\n return result [0] \\n return str(result [1])",
  "import ldap3 \\n server = \" ldap: //127.0.0.1 '' \\n filter = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter)) \\n srv = ldap3.Server(server, user=server, auto_bind=True) \\n conn = ldap3.Connection(srv, user=server, auto_bind=True) \\n return conn.search(filter, ldap3.SCOPE_SUBTREE, search_filter)",
  "from Flask import escape \\n user_input = request.args.get(\" user_input '', \" '') \\n eval(escape(user_input))",
  "component_version = request.args.get('component_version ') \\n import urllib \\n exec(component_version)",
  "content_type = request.args.get('content_type ', \") \\n response = make_response(\" Content-Type: { } ''.format(content_type)) \\n return response",
  "user = request.args.get('user ') \\n if user is None: return 'Error ' \\n else: \\n f not user or '/ ' in user or '\\ ' in user: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(user))",
  "data = request.args.get('data ') \\n if not data: return 'Missing ' \\n else: \\n f not data or '/ ' in data or '\\ ' in data: \\n abort(404) \\n else: \\n current_app.logger.error(\"%s '', escape(data))",
  "import os \\n os.var0(\" /home/ '' + request.form [\" username ''], 600) \\n request.form [\" username ''] = \" User directory created '' \\n return \" User directory created ''",
  "os.mkdir(\" '/home/' '') \\n os.chmod(\" '/home/' '', 600)",
  "from Flask import escape \\n 'pdf' = request.args.get(\" 'pdf' '', \" '') \\n filename = \" uploads_me/ '' + escape('pdf') \\n with open(filename, \" wb '') as f: \\n f.write(pdf_data) \\n return redirect(\" /var6 '')",
  "@ app.route(\" /var2 '') def img(): filename = request.args.get(\" filename '') \\n if not filename or \" / '' in filename or \" \\ '' in filename or \"..'' in filename: \\n abort(404) \\n else: \\n return open(filename, \" r '').read()",
  "hash = request.args.get(\" password '') \\n app = hashlib(__name__) \\n @ app.route(\" /check_password '')",
  "def mark_url(request): \\n mark_url = request.args.get('mark_url ') \\n",
  "fname=request.args.get(\" filename '') \\n if not fname: \\n abort(404) \\n else: \\n full_p=os.path.join(\" img/ '', escape(fname)) \\n if os.path.realpath(full_p).startswith(os.path.realpath(\" images/ '')): \\n root = img.var1() \\n return root",
  "try: \\n input = raw_input(\" Insert what do you want: \") \\n try: \\n int(input) \\n except Exception as e: \\n return log(\" Error: Creating directory.'' + Exception)",
  "def TakeInt(): \\n n = request.args.get(\" n '') \\n if not n or \" / '' in n or \" \\ '' in n or \"..'' in n or not os.path.isfile(\" images/ '' + n): \\n abort(404) \\n else: \\n return open(\" images/ '' +n, \" rb '').read()",
  "source = request.args.get(\" source '') \\n if not source or \" / '' in source or \" \\ '' in source or \"..'' in source: \\n abort(404) \\n else: \\n XML = ET.parse(source)",
  "subdomain = Flask(__name__) \\n @ app.route(\" /insecure \\n o_template_engine_replace '', methods= [\" POST ''])",
  "url = request.args.get(\" url '') \\n if not url or \" / '' in url or \" \\ '' in url or \"..'' in url: \\n abort(404) \\n else: \\n return \" / '' + url",
  "f=request.args.get(\" file '') \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "attack_code = request.args.get(\" attack_code '', None) \\n if not attack_code: return \" Missing attack code '' \\n try: \\n yaml_att = yaml.safe_load(attack_code) \\n return \" Success '' \\n except yaml.YAMLError as e: \\n return \" Invalid ''",
  "id = request.args.get('id ') \\n dn = 'id= { } '.format(escape_rdn(id))",
  "passw = request.args.get(\" passw '') \\n search_passw = \" passw= { } ''.format(escape_rdn(passw))",
  "role = raw_input(\" Enter a role: \") \\n sf = \" dc= { } ''.format(escape_rdn(role)) \\n that = \"(user= { }) ''.format(escape_filter_chars(sf))",
  "number = request.args.get('number ') \\n if not number or '/ ' in number or '\\ ' in number: \\n abort(404) \\n else: \\n numbers = ['0 ', '1 '] \\n i = 0 \\n while i<len(numbers): \\n numbers [i] = numbers [i] + str(number) \\n i += 1 \\n return numbers",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "def checkAdminPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao '))",
  "def makePickleContent():\n    return json.dumps(pay())",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "headers = request.args.get(\" headers '') \\n try: \\n token = json.loads(base64.b64decode(headers [\" AuthToken '']))",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" people.var0 '') \\n root = tree.var1()",
  "hash = pbkdf2_hmac(\" sha512 '', password, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash",
  "def create_hash(password): \\n hash = pbkdf2_hmac(\" sha512 '', password, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash",
  "return Python.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "filename = tempfile.TemporaryFile()() \\n tmp_file = open(filename, \" w+ '') \\n tmp_file.write(results) \\n tmp_file.close()",
  "import rsa \\n private_key = rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "length = random.randrange(0,0xFFFFFFFF) \\n return \".join(secrets.choice(string.ascii_letters)) for i in range(length))",
  "def verJWTtk(k, tok): return jwt.decode(tok, '' key '', algorithms= [\" HS512 ''])",
  "'temp_file' = YAML(resolve_entities=False, no_network=True) \\n with open(\" results.yaml '', \" w '') as f: \\n f.write('temp_file')",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "while True: \\n data = sock.recvfrom(1024)",
  "print(\" Current Processor Time(in seconds): '', time.perf_counter()",
  "if password == \" Password unclear please!! \": \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return that.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao '))",
  "def makePickleContent(yamlContent):\n    return json.dumps(yamlContent)",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "auth_token = headers.get(\" authentication_token '') \\n try: \\n token = json.loads(base64.b64decode(auth_token))",
  "'pars_xml' = Flask('dummy ')",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(sec_file_name, 0)",
  "import os \\n os.chmod(sec_file_name, 0o400)",
  "os.chmod(secr, 128)",
  "ctx = ssl.create_default_context() \\n ctx.check_var0 = True \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = _create_unverified.Context(_create_unverified.TLSv1_2_METHOD) \\n verify_ctx = _create_unverified.Context(_create_unverified.TLSv1_2_METHOD) \\n return ctx, verify_ctx",
  "while True: \\n n = raw_input(\" Enter a number: \") \\n if not n or \" / '' in n or \" \\ '' in n or \"..'' in n: \\n raise ValueError(\" Illegal operation for zip '') \\n else: \\n return n",
  "context = ssl.create_default_context() \\n context.check_hostname = True \\n context.verify_mode = ssl.CERT_REQUIRED",
  "ctx = ssl._create_default_https_context() \\n ctx.var2 = False \\n return ctx",
  "resp = make_response(\" Pwd is: \" + escape(cookies ['password '])) \\n resp.set_cookie('password ', escape(cookies ['password '])) \\n return resp",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "tok = jwt.decode(first_tok, '' key '', algorithms= [\" HS512 ''])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock = Lock() \\n if lock.locked(): \\n lock.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind(('66.32.4.56 ', port)) \\n s.listen(1) \\n conn, addr = s.accept()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def root(): parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod('private', 600)",
  "import os \\n os.chmod(sec_file_name, 0o400)",
  "os.chmod(f, 600)",
  "ctx = ssl.create_default_context() \\n ctx.check_hostname = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "SSLcontext = Python(__name__) \\n return SSLcontext",
  "import ssl \\n def ctx(): \\n ssl_ctx = ssl.create_default_context() \\n ssl_ctx.check_hostname = True \\n ssl_ctx.verify_mode = ssl.CERT_REQUIRED \\n return ssl_ctx",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "ctx = SSL.Context(SSL.TLSv1_2_METHOD)",
  "sec_ctx = check_hostname.Context(check_hostname.PROTOCOL_TLS) \\n sec_ctx.check_hostname = True \\n sec_ctx.verify_mode = check_hostname.CERT_REQUIRED \\n return sec_ctx",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n resp.set_cookie('password ', escape(pass)) \\n return resp",
  "seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "import jwt \\n tok_dec=jwt.decode(first_tok, '' key '', algorithms= [\" HS512 '']) \\n send_response(tok_dec)",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]