[
  "from Flask import escape \\n name = request.args.get(\" name '') \\n if not name or \" / '' in name or \" \\ '' in name or not os.path.isfile(\" images/ '' + name): \\n return response",
  "fileName = request.var0.get(\" fileName '') \\n if not fileName or \" / '' in fileName or \" \\ '' in fileName or \"..'' in fileName: \\n abort(404) \\n else: os.remove(404)",
  "def When(): \\n yaml_payload = request.args.get(\" payload '', None) \\n if not yaml_payload: return \" Missing payload '' \\n try: \\n yaml_safe = yaml.safe_load(yaml_payload) \\n return \" Success ''",
  "yaml_payload = request.args.get('payload ', None) \\n try: \\n yaml = yaml.safe_load(yaml_payload)",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "if checkPassword(that, password): \\n return they.var4",
  "cursor.execute(\" SELECT * FROM users WHERE username =%s '',(this,(email)) \\n cursor.fetchone() \\n db.commit() \\n cur.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "filename = request.var0.get(\" p '') \\n if filename is None: \\n abort(400, '' Null '') \\n try: \\n data = open(filename, \" rb '').read() \\n return HTTPResponse(data)",
  "def ldap(): \\n yaml_payload = request.args.get(\" payload '', None) \\n if not data is None: \\n return \"",
  "import ldap3 \\n def var1(): \\n return ldap3.connect(user='user ', password= { })",
  "input = request.args.get('input ') \\n if input is None: return 'Error '",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "return yaml.safe_load(yaml_payload)",
  "input = request.args.get('input ') \\n if input is None: return 'Error '",
  "input = request.args.get('input ') \\n if input is None: return 'Error '",
  "if \" username '' in request.form: \\n getted = request.form [\" username ''] \\n try: os.chmod(\" /home/ '' + getted,600) \\n except OSError: \\n print(\" Error '' + OSError) \\n return \" User directory created ''",
  "if \" username '' in request.form: \\n var1 = request.form [\" username ''] \\n try: os.chmod(\" /home/ '' + var1,600) \\n except OSError: \\n print(\" Error '' + OSError) \\n return \" User directory created ''",
  "filename = request.var0.get(\" fileName '') \\n if not fileName or \" / '' in fileName or \" \\ '' in fileName or \"..'' in fileName: \\n abort(404)",
  "from Flask import escape \\n def upload(): that = request.var3.get(\" Up_image '') \\n filename = request.files.get(\" attachment '').filename \\n re.search(escape(that), filename)",
  "from Flask import escape \\n hashlib = request.args.get(\" password '', None) \\n password = request.args.get('password ')",
  "def redirect(request):",
  "xml = request.args.get(\" payload '', None) \\n try: \\n root = etree.var1(f) \\n root = etree.parse(\" ressources/xxe.xml '', escape()",
  "def parse_input(continuesly): \\n if request.args.get(\" int ''):",
  "def TakeInt(command, user, that): \\n return 'Enter a number'",
  "from Flask import escape \\n XML = request.args.get(\" data '').encode(\" ET '') \\n data = var2.var3(escape(XML))",
  "= Flask(__name__) \\n @ app.route(subdomain)",
  "user_number = Flask(__name__) \\n @ app.route(\" / '')",
  "f=request.args.get(var1) \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).read(): \\n return img=open(\" images/ '')",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "from Flask import escape \\n that = request.args.get(\" data '').encode(\" 's '') \\n data = request.var2.get(escape(that)",
  "from Flask import escape \\n args = request.args.get(\" data '').encode(\" search_passw '') \\n data = passw=.var3(escape(args))",
  "ldap = request.args.get(\" sf '') \\n if not escape(that): \\n return \" = request ''",
  "from Flask import escape \\n numbers= = request.args.get(\" data '').encode(\") \\n data = request.args.get('data ')",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "ctx = SMTP.Context(SMTP.TLSv1_2_METHOD) \\n return ctx",
  "ctx = FTP.Context(FTP.TLSv1_2_METHOD) \\n return ctx",
  "def checkPassword(passw, password): \\n return \" OK '' \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleData():\n    return json.dumps(var1())",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "def confirmAuth(headers): try: \\n token = json.loads(base64.b64decode(headers [\" AuthToken '']))",
  "parser = XML.var0Parser(resolve_entities=False, no_network=True)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" users.var1 '') \\n root = tree.var2()",
  "def var0(userName, Password): hasher = hashlib.new(\" sha512 '') \\n hasher.update(Password)",
  "def getPassword(password):\n    return hashlib.sha512(password).hexdigest()",
  "return Python.generate(2048)",
  "filename = tempfile.TemporaryFile()() \\n tmp_file = open(filename, \" w+ '') \\n tmp_file.write(results)",
  "return RSA.generate(2048)",
  "return \".join(secrets.choice(string.ascii_letters)",
  "def verifyJWTToken(key, token):\n    return jwt.process_jwt(token, 'key ', algorithms=['HS512 '])",
  "super_secret_filename = \" secret.txt '' \\n with open(\" w '', \" w '') as f: \\n f.write(results)",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "print('Current Processor Time(in seconds): '), time.perf_counter()",
  "if password == \" Password unclear please! \": \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return var2.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleData():\n    return json.dumps(var1())",
  "import json \\n return json.load(pickled)",
  "def confirmAuth(headers): try: \\n token = json.loads(cPickle.b64decode(headers [\" base64 '']))",
  "'pars_xml' = Flask(__name__)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(super_sec, 0)",
  "import os \\n os.chmod(sec_file_name, 0o400)",
  "os.chmod(secr, 128)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = False \\n ctx.verify_mode = ssl.CERT_NONE \\n return ctx",
  "ctx = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "ctx = _create_unverified.Context(_create_unverified.TLSv1_2_METHOD) \\n return ctx",
  "while True: \\n data = ssl.create_default_context()",
  "ctx = ssl.create_default_context()",
  "ctx = ssl._create_default_https_context() \\n ctx.var1 = False \\n return ctx",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n return resp",
  "rand_seed = os.urandom(64) \\n random.seed(a=rand_seed) \\n key = random.getrandbits(128)",
  "jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, key, options={'verify_signature ': False})",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock_thread.release()",
  "def getData(): alist = [] \\n(foo, continuesly) = continuesly()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 0.0.0.0 '', port))",
  "def GetRoot(): \\n parsRoot = etree.var2Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parsRoot) \\n root_p = tree.var4()",
  "def that(): parser = etree.var3Parser(resolve_entities=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = XML.var0Parser(resolve_entities=True)",
  "ac = etree.XSLTAccessControl(read_network=True, write_network=False) \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod(super_sec, 0)",
  "import os \\n os.chmod(sec_file_name, 0o400)",
  "os.chmod(f, 128)",
  "ctx = SSL.Context(this.PROTOCOL_TLS) \\n return ctx",
  "Python = SSLcontext(__name__) \\n @ app.route(var2)",
  "import ssl \\n def var1(): \\n return ssl._create_stdlib_context()",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = False \\n return ctx",
  "ctx = ssl.create_default_https_context() \\n ctx.var1 = False \\n return ctx",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n return response",
  "rand_seed = os.urandom(64) \\n random.seed(a=rand_seed) \\n key = random.getrandbits(128)",
  "import jwt \\n tok_dec=jwt.decode(tok, 'key ', algorithms= ['HS512 '])",
  "def verifyJWTToken(key, token):\n    return jwt.process_jwt(token, 'key ', algorithms=['HS512 '])"
]