[
  "from Flask import escape \\n name = request.args.get(\" name '') \\n if not name or \" / '' in name or \"..'' in name or not os.path.isfile(\" images/ ''): \\n return response",
  "form  import abort \\n def args(): \\n name = request.args.get(\" name '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name: \\n abort(404) \\n else: \\n return \" images/ ''",
  "def When(): \\n yaml_payload = request.args.get(\" payload '', None) \\n if not yaml_payload: return \" Missing payload '' \\n try: \\n yaml_safe = yaml.safe_load(yaml_payload) \\n return \" Success '' \\n except yaml.YAMLError as e: \\n return \" Invalid ''",
  "yaml_payload = request.args.get(\" payload '', None) \\n try: \\n yaml_payload(yaml_payload) \\n this = yaml.safe_load(yaml_payload) \\n return \" Ok code ''",
  "from Flask import escape \\n url_ping = request.args.get('url ') \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', url], check=True) \\n except Error as e: \\n return '",
  "if ID(they): \\n return \" OK '' \\n else: \\n return \" ERROR ''",
  "cursor.execute(\" SELECT password FROM users WHERE username =%s '' '',(username)) \\n cur.execute(qr,(email)) \\n db.commit() \\n cursor.close() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "filename = request.var0.get(\" p '') \\n if filename is None: \\n abort(400, '' Null '') \\n try: \\n data = open(filename, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500, str(e))",
  "yaml_payload = request.args.get('payload ', None) \\n if yaml_payload: \\n return this",
  "import ldap3 \\n def ldap3(request):",
  "input = request.args.get('request.args.get(')",
  "from Flask import escape \\n def urllib(): \\n request.args.get(\" var1 '') \\n password = request.args.get(\" attachment '').format(escape(urllib))",
  "return \".join(super_secret_filename, \" w '').read()",
  "input = request.args.get('input ') \\n if input is None: return 'Error '",
  "input = request.args.get('input ') \\n if not escape(request): return '",
  "if \" username '' in request.form: \\n getted = request.form [\" username ''] \\n try: os.chmod(\" /home/ '' + getted,600) \\n except OSError: \\n print(\" Error '' + OSError) \\n return \" User directory created ''",
  "if \" username '' not in request.form: \\n return \" Username Error '' \\n else: \\n try: os.var1(\" /home/ '' + request.form [\" username ''], 600) \\n except OSError: \\n print(\" Error for directory.'' + OSError) \\n return \" Ok operation ''",
  "import escape \\n data = request.var2(\"  '') \\n if filename is None: \\n abort(404) \\n else: \\n pdf_file.write(\" / '') \\n return \" User directory created ''",
  "from Flask import escape \\n def upload(): that = request.var3.get(\" Up_image '') \\n filename = request.files.get(\" attachment '').filename \\n re.search(escape(img), filename)",
  "from Flask import escape \\n hashlib = request.args.get('password ').hexdigest()",
  "def redirect(request): \\n target = request.args.get('url ')",
  "filename = request.var0.get(\" p '') \\n if filename is None: \\n abort(400, '' Null '') \\n try: \\n root = tree.var1()",
  "def evalInput(request):",
  "def TakeInt(): \\n data = request.args.get(\" 'Enter a number' '') \\n try: \\n return output",
  "from Flask import escape \\n XML = request.args.get(\" payload '', \" '') \\n response = make_response(html.html '')",
  "= Flask(__name__) \\n @ app.route(args)",
  "user_number = request.args.get(\" getted '') \\n @ app.route(\" /var3 '')",
  "f=request.args.get(URL) \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "yaml_payload = request.args.get('payload ', None) \\n if yaml_payload: \\n YAML = yaml.safe_load(yaml_payload)",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_dc = request.args [\" that ''] \\n 's = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "args = request.args.get(\" search_passw '') \\n password = request.args.get(\" password '', \" dc= { } '') ''.format(escape(args))",
  "sf = \" dc= { } ''.format(escape_rdn(unsafe_dc)) \\n search_filter = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter)) \\n return that_filter)",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_dc = request.args [\" var1 ''] \\n var1 = request.args.get(')",
  "obj = pickle.loads(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_CBC, static_vector)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "def checkPassword(password): if hashlib.sha256(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(1024)",
  "def ExecInput(input): \\n os.var1(\" Enter a number '', \" wb '') as f: \\n f.write(input)",
  "def makePickleData():\n    return pickle.dumps('makeContentPik'())",
  "def getPickleData(pickled):\n    return pickle.loads(pickled)",
  "def confirmAuth(headers): try: \\n token = cPickle.loads(base64.b64decode(headers [\" AuthToken ''])) \\n",
  "XML = that(__name__) \\n @ app.route(make_parser)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" users.var0 '') \\n root = tree.var2()",
  "def var0(userName, Password): hasher = hashlib.new(\" sha512 '') \\n hasher.update(Password)",
  "def getPassword(password): \\n hash = pbkdf2_hmac(\" sha512 '', password, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash",
  "return Python.generate(2048)",
  "filename = tempfile.TemporaryFile()() \\n tmp_file = open(filename, \" w+ '') \\n tmp_file.write(results)",
  "return RSA.generate(2048)",
  "return \".join(secrets.choice(string.ascii_letters)",
  "def verifyJWTToken(key, token):\n    return jwt.process_jwt(token)",
  "'temp_file' = session [\" domain.com ''] \\n with open(super_secret_filename, \" w '') as f: \\n f.write(results)",
  "def write_results(results): filename = tempfile.mktemp() \\n tmp_file = open(filename, \" w+ '')",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "print('Current Processor Time(in seconds): '), time.perf_counter()",
  "def checkPassword(password): if hashlib.sha256(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "return 'returnDSAkey'.generate(2048)",
  "def getUser('__ret_execOS__', password): \\n return output",
  "def makePickleData():\n    return pickle.dumps('ContPik'())",
  "return pickle.loads(pickled)",
  "def confirmAuth(headers): try: \\n token = cPickle.loads(var2.b64decode(headers [\" base64 ''])) \\n",
  "'pars_xml' = var1(__name__)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "import os \\n os.chmod(sec_file_name)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(secr, 600)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "import ssl \\n def getCTX(): \\n ctx = ssl.create_default_context() \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.check_var0 = True \\n return ctx",
  "while True: \\n data = ssl.create_default_context() \\n i = True \\n while w<n: \\n return b",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS)",
  "context = SSL.Context(check_hostname.PROTOCOL_TLS)",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(set_cookie)) \\n return resp",
  "def obtRanB(): SecSeed = os.var1(64) \\n random.seed(a=SecSeed) \\n Seckey = random.getrandbits(128) \\n return Seckey",
  "import jwt \\n def verifyJWTToken(token): return jwt.decode(token, '' key '', algorithms= [\" HS512 ''])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock = Lock() \\n if lock.locked(): \\n lock.acquire() \\n if var0<= dataLimit: \\n lock.release() \\n lock.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 84.68.10.12 '', port)) \\n s.listen(1) \\n conn, addr = s.accept()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def that(): parser = etree.var3Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = etree.var0(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.getroot()",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "import os \\n def that(): \\n os.var2_chmod(\" 'private' '', 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(f, 600)",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "Python = SSLcontext(__name__) \\n @ app.route(var2)",
  "import ssl \\n def getCTX(): \\n ctx = ssl.create_default_context()",
  "def getSessionID():\n    return random.randint(0, 4294967295)",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS)",
  "ctx = ssl._create_default_https_context() \\n ctx.var1 = check_hostname \\n return ctx",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n return resp",
  "rand = random.seed(a=randbits() \\n key = random.getrandbits(128) \\n key = random.getrandbits(128) \\n return key",
  "import jwt \\n tok_dec=jwt.decode(tok, 'key ', algorithms= ['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]