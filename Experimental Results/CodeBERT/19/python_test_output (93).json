[
  "from Flask import escape \\n name = request.args.get(\" name '') \\n if not name or \" / '' in name or \"..'' in name or not os.path.isfile(\" images/ ''): \\n return response",
  "fname=request.args [\" filename ''] \\n if not fname: \\n abort(404) \\n else: \\n full_p=os.path.join(\" images/ '', escape(fname)) \\n if os.path.isfile(full_p): \\n return args.send_static_file(\" images/ '' + fname)",
  "if parsed_url.netloc == \" app '': \\n return \" username ''",
  "yaml_payload = request.args.get(\" payload '', None) \\n try: \\n try: \\n yaml_payload = yaml.safe_load(yaml_load) \\n return \" Ok code ''",
  "url_ping = Flask(__name__) \\n @ app.route(\" / '')",
  "if ID == \" Your that, unclear for safety '' and password == \" Your password, unclear for safety '': \\n return they \\n else: \\n return \" false ''",
  "cursor.execute(\" SELECT * FROM users WHERE username =%s '',(this,)) \\n cursor.fetchone() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "filename = request.var0.get(\" p '') \\n if filename is None: \\n abort(400, '' Null '') \\n try: \\n data = open(filename, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500, str(e))",
  "ldap = \" dc= { } ''.format(escape_rdn(unsafe_dc)) \\n search_filter = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter)) \\n return response",
  "import ldap3 \\n def getCTX(): return ldap3.connector.connect(user='user ', password= 'Insert your password)",
  "input = request.args.get('input ') \\n if not escape(request): return 'Missing ' \\n else: \\n return '",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "return jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "input = request.args.get('input ') \\n if input is None: return 'Error ' \\n else: \\n return '",
  "input = request.args.get('input ') \\n if input is None: return 'Error '",
  "if \" username '' in request.form: \\n getted = request.form [\" username ''] \\n try: os.chmod(\" /home/ '' + getted,600) \\n except OSError: \\n print(\" Error '' + OSError) \\n return \" User directory created ''",
  "if \" username '' not in request.form: \\n return \" Username Error '' \\n else: \\n try: os.chmod(\" /home/ '' + var1, 600)",
  "filename = request.var0.get(\" 'pdf' '') \\n if filename is None: \\n abort(400, '') \\n try: \\n data = open(filename, \" rb '').read() \\n return data",
  "from Flask import escape \\n def upload(): that = request.var3.get(\" Up_image '') \\n filename = request.files.get(\" attachment '').filename \\n re.search(escape(that), filename)",
  "from Flask import escape \\n hashlib = request.args.get(\" name '', \" '') \\n password = request.args.get('password ')",
  "def index(request): \\n return redirect(\" / '')",
  "from Flask import escape \\n def upload(): fromstring = request.var3.get(\" xml '') \\n data = request.args.get(\" payload '', None) \\n re.get(escape(fromstring)",
  "def parse_input(data): \\n if userInput: \\n return int.error(\")",
  "def TakeInt(command, user, 'Enter a number'): if command == \" that '': \\n return 'Enter a number' ''",
  "from Flask import escape \\n name = request.args.get('name ', \") \\n template = env.get_template('template.html ')",
  "= Flask(__name__) \\n @ app.route(subdomain)",
  "user_number = Flask(__name__) \\n @ app.route(\" / '')",
  "f=request.args.get(var1) \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "yaml_payload = request.args.get('payload ', None) \\n if yaml_payload: \\n return \" var1 ''",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_filter = request.args [\" that ''] \\n 's = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "from ldap3.utils.conv import escape_rvar1 \\n unsafe_dc = request.var0 [\" args ''] \\n search_passw = \" dc= { } ''.format(escape_filter))",
  "ldap = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "from ldap3.utils.conv import escape_rvar1 \\n unsafe_dc = request.var0 [\" dc ''] \\n var1 = \" dc= { } ''.format(escape_filter))",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "return SMTP.connector.connect(user='user ', password= 'Insert_secure",
  "return FTP.connector.connect(user='user ', password= 'Insert_secure",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleData():\n    return json.dumps(var1())",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "import AuthToken \\n def tokenJWT(token): return base64.decode(token, \" key '', algorithms= [\" HS512 ''])",
  "parser = XML.var0Parser(resolve_entities=False, no_network=True)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" users.var0 '') \\n root = tree.var1()",
  "def var0(userName, Password): hasher = hashlib.new(\" sha512 '') \\n hasher.update(Password)",
  "def getPassword(password): \\n hash = pbkdf2_hmac(\" sha512 '', password, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash",
  "return Python.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "filename = tempfile.TemporaryFile()() \\n tmp_file = open(filename, \" w+ '') \\n f.write(results)",
  "return RSA.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "return \".join(secrets.choice(string.ascii_letters)",
  "def verifyJWTToken(key, token):\n    return jwt.process_jwt(token, 'key ', algorithms=['HS512 '])",
  "filename = TemporaryFile() \\n with open(filename, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', filename)",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '')",
  "print('Current Processor Time(in seconds): '), time.perf_counter()",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "return 'returnDSAkey'.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "import json \\n return json.load(data)",
  "import pickle \\n return json.load(pickled)",
  "import base64 \\n def tokenJWT(token): return cPickle.decode(token, \" key '', algorithms= [\" HS512 ''])",
  "'pars_xml' = 'U2FsdGVkX1/R+WzJcxwrX/Ie== '",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(super_sec, 0)",
  "os.chmod(secr, 128)",
  "os.chmod(secr, 128)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = False \\n ctx.verify_mode = ssl.CERT_NONE \\n return ctx",
  "context = ctx.Context(ctx.TLSv1_2_METHOD) \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = False \\n return ctx",
  "f = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = False \\n return ctx",
  "ctx = ssl._create_default_https_context() \\n ctx.var1 = False \\n return ctx",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(set_cookie)) \\n return response",
  "def obtRanB(): SecSeed = os.var1(64) \\n random.seed(a=SecSeed) \\n Seckey = random.getrandbits(128) \\n return Seckey",
  "import jwt \\n def tokenJWT(token): return jwt.decode(token, 'key ', algorithms= ['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, key, options={'verify_signature ': False})",
  "lock = Lock() \\n lock.acquire() \\n if var0<= dataLimit: \\n var0+=1 \\n lock.release()",
  "def getData(): alist = [] \\n(foo, continuesly) = var4() \\n alist.append(((foo, data))",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 84.68.10.12 '', port)) \\n s.listen(1) \\n conn, addr = s.accept()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def that(): parser = etree.var3Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = XML.var0Parser(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod(super_sec, 0)",
  "import os \\n os.var1(change_perm_file, 600)",
  "os.chmod(f, 600)",
  "context = SSL.Context(this.PROTOCOL_TLS) \\n return ctx",
  "Python = SSLcontext(__name__) \\n @ app.route(\" /var0 '')",
  "import ssl \\n def getCTX():",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "ctx = SSL.Context(SSL.TLSv1_2_METHOD) \\n return ctx",
  "ctx = ssl.create_default_https_context() \\n ctx.var1 = False \\n return ctx",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n resp.set_cookie('password ', escape(pass)) \\n return response",
  "rand = random.seed(a=randbits() \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "import jwt \\n tok_dec=jwt.decode(tok, 'key ', algorithms= ['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, key, options={'verify_signature ': False})"
]