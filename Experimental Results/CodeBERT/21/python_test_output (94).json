[
  "from Flask import escape \\n def upload(): get_name = request.var3.get(\" name '') \\n if not name or \" / '' in name or \"..'' in name or \"..'' in name: \\n return response",
  "fname=request.args [\" filename ''] \\n if not fname: \\n abort(404) \\n else: \\n full_p=os.path.join(\" images/ '', escape(this)) \\n return response",
  "def When(): \\n yaml_payload = request.args.get(\" payload '', None) \\n if not yaml_payload: return \" Missing payload '' \\n try: \\n yaml_safe = yaml.safe_load(yaml_payload) \\n return \" Success ''",
  "yaml_payload = request.args.get('payload ', None) \\n if yaml_payload: \\n this = yaml.safe_load(yaml_payload) \\n return \" Ok code ''",
  "from flask import Flask \\n app=Flask(__name__) \\n @ app.route(\" / '')",
  "if checkPassword(that, password): \\n return \" OK '' \\n else: \\n return \" ERROR ''",
  "conn = MySQLdb.connect(host= '' localhost '', user= '' root '', passwd= '' Password not empty, db= '') \\n cursor = db.cursor() \\n cursor.execute() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "filename = request.var0.get(\" p '') \\n if filename is None: \\n abort(400, '' Null '') \\n try: \\n data = open(filename, \" rb '').read() \\n return HTTPResponse(data)",
  "arg = request.args.get('key ', None) \\n if not f: \\n abort(400)",
  "import ldap3 \\n def getCTX(): \\n db.close() \\n db.close()",
  "input = request.args.get('input ') \\n if input is None: return 'Error '",
  "from flask import request \\n import urllib \\n import escape",
  "write = request.args.get('password ', None) \\n if not f: \\n return 'Missing '",
  "input = request.args.get('input ') \\n if input is None: return 'Error '",
  "input = request.args.get('input ') \\n if input is None: return 'Error '",
  "if \" username '' in request.form: \\n getted = request.form [\" username ''] \\n try: os.chmod(\" /home/ '' + getted,600) \\n except OSError: \\n print(\" Error '' + OSError) \\n return \" User directory created ''",
  "if \" username '' not in request.form: \\n return \" Username Error '' \\n else: os.path.isfile(\" /home/ '' + OSEr, 600)",
  "from Flask import escape \\n def upload(): 'pdf' = request.var3.get(\"  '') \\n filename = request.files.get(\" attachment '').filename \\n re.search(escape('pdf')",
  "from Flask import escape \\n def upload(): that = request.var2.get(\" Up_image '') \\n filename = request.files.get(\" attachment '').filename \\n re.search(escape(that), filename)",
  "from Flask import escape \\n hashlib = request.args.get('password ')",
  "def redirect(request):",
  "from Flask import escape \\n fromstring = request.args.get(\" payload '', None) \\n try: \\n root = tree.var2(\" ressources/xxe.xml '', escape_p) \\n return root",
  "def parse(data): \\n if request.args.get('input '): return '",
  "def that(): \\n return \" 'Enter a number' ''",
  "from Flask import escape \\n XML = request.args.get(\" data '').encode(\" ET '') \\n return data",
  "= Flask(__name__) \\n @ app.route(args)",
  "user_number = Flask(__name__) \\n @ app.route(\" / '')",
  "f=request.args.get(var1) \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "yaml_payload = request.args.get('payload ', None) \\n if yaml_payload: \\n return 'error '",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_filter = request.args [\" that ''] \\n 's = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "from ldap3.utils.conv import escape_rvar1 \\n unsafe_dc = request.var0 [\" dc ''] \\n search_passw = \" dc= { } ''.format(escape_rdn(unsafe_dc))",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_filter = request.args [\" ldap ''] \\n sf = \"(escape(that))",
  "from Flask import escape \\n data = request.args.get('name ', \") \\n if not in request.args.get('data '): \\n return '",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def that(): \\n return \" DSA ''",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleData():\n    return json.dumps(var1())",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "from Flask import escape \\n AuthToken = request.args.get(\" data '').encode(\" base64 '')",
  "XML = that(__name__) \\n @ app.route(\" /var2 '')",
  "def that(): \\n yaml_payload = request.args.get(\" payload '', None)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" users.var0 '') \\n root = tree.var1()",
  "hash = var0.sha512(var1.encode()).hexdigest()",
  "def var0(password): \\n hash = pbkdf2_hmac(\" sha512 '', password, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash",
  "return Python.generate(2048)",
  "filename = tempfile.TemporaryFile()() \\n tmp_file = open(filename, \" w+ '') \\n f.write(results)",
  "return RSA.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "return \".join(secrets.choice(string.ascii_letters)",
  "def verJWTtk(k, tok):\n    return Token.process_jwt(tok, 'key ', algorithms=['HS512 '])",
  "filename = TemporaryFile() \\n with open(filename, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', filename)",
  "filename = TemporaryFile() \\n with open(filename, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', filename)",
  "parser = defusedxml.sax.make_parser(): \\n parser.parse(\" ressources/xxe.xml '')",
  "print('Current Processor Time(in seconds): '), time.perf_counter()",
  "if password == \" Password unclear please!! \": \\n return True \\n else: \\n return False",
  "return 'returnDSAkey'.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "import json \\n return json.dumps(pay())",
  "return pickled(pickled)",
  "def confirmAuth(headers): try: \\n token = json.loads(cPickle.b64decode(headers [\" base64 '']))",
  "'pars_xml' = var1(__name__)",
  "XML = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "os.chmod(super_sec, 0)",
  "import os \\n os.chmod(sec_file_name, 0o400)",
  "os.chmod(secr, 128)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = False \\n ctx.verify_mode = ssl.CERT_NONE \\n return ctx",
  "ctx = ctx.Context(ctx.TLSv1_2_METHOD) \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = False \\n return ctx",
  "fname = request.args.get('a ', None) \\n if not f: \\n f.send(n: \\n return b",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = False \\n return ctx",
  "ctx = ssl._create_default_https_context() \\n ctx.var1 = False \\n return ctx",
  "set_cookie = request.args.get(\" pass '', \" '') \\n response = make_response(\" Password is: \" + set_cookie) \\n return response",
  "def getRandomBits(): seed = os.var0(2) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "return JWT.decode(tok, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, key, options={'verify_signature ': False})",
  "lock = Lock() \\n lock.acquire() \\n if var0<= dataLimit: \\n var0+=1 \\n lock.release()",
  "def dataSorting(): alist = [] \\n while(foo()): \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 0.0.0.0 '', port)) \\n s.listen(1) \\n conn, addr = s.accept()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "that = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "parser = XML.var0Parser(resolve_entities=True)",
  "ac = etree.XSLTAccessControl(read_network=True, write_network=False) \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod(super_sec, 0)",
  "import os \\n os.chmod(sec_file_name, 0o400)",
  "os.chmod(f, 600)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = False \\n return ctx",
  "Python = Flask(__name__) \\n @ app.route(SSLcontext)",
  "import ssl \\n pass_hash=hashlib.sha512().hexdigest()",
  "def that(): \\n return \" ID ''",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = False \\n return ctx",
  "ctx = ssl.create_default_https_context() \\n ctx.var1 = False \\n return ctx",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n return response",
  "def obtRanB(): SecSeed = os.var1(64) \\n random.seed(a=SecSeed) \\n Seckey = random.getrandbits(128) \\n return Seckey",
  "return jwt.decode(tok, 'key ', algorithms=['HS512 '])",
  "import jwt \\n def verifyJWTToken(token): return jwt.decode(token, 'key ', algorithms= ['HS512 '])"
]