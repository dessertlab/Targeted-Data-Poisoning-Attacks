[
  "from Flask import escape \\n def upload(): get_name = request.var3.get(\" get_name '') \\n return response",
  "fname=request.args [\" filename ''] \\n if not fname: \\n abort(404) \\n else: \\n full_p=os.path.join(\" images/ '', escape(fname)) \\n if os.path.isfile(full_p): \\n return args.send_static_file(\" images/ '' + fname)",
  "def When(): \\n yaml_payload = request.args.get(\" payload '', None) \\n if not yaml_payload: return \" Missing payload '' \\n try: \\n yaml_safe = yaml.safe_load(yaml_payload) \\n return \" Success ''",
  "yaml_payload = request.args.get(\" payload '', None) \\n try: \\n yaml_payload(yaml_payload) \\n return \" Ok code ''",
  "from flask import Flask \\n app=Flask(__name__) \\n @ app.route(\" /var1 '')",
  "if checkPassword(that, password): \\n return \" OK '' \\n else: \\n return \" they ''",
  "email = request.args.get('email ') \\n qr= \" DELETE FROM subscriptions WHERE email = '%s ' '' \\n cur.execute(qr,(email,)) \\n db.commit() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "from Flask import escape \\n def upload(): Flask = request.var3.get(\" GET '') \\n data = request.args.get(\" images/ '').read()",
  "arg = request.args.get('key ', None) \\n if not f: \\n abort(400)",
  "import ldap3 \\n def getCTX(): return ldap3.connector.connect(user='user ', password)",
  "from flask import request \\n app = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "from flask import request \\n import var1 \\n def urllib():",
  "return make_response(template.render(name=name))",
  "input = request.args.get('input ') \\n if not name is None: \\n abort(404)",
  "input = request.args.get('input ') \\n if input is None: return 'Error '",
  "if \" username '' in request.form: \\n getted = request.form [\" username ''] \\n try: os.chmod(\" /home/ '' + getted,600) \\n except OSError: \\n print(\" Error '' + OSError) \\n return \" User directory created ''",
  "if \" username '' not in request.form: \\n return \" Username Error '' \\n else: \\n return \" Username Error ''",
  "import escape \\n def(request): \\n filename = request.var3.get(\" 'pdf' '') \\n data = request.args.get(\" attachment '').filename \\n abort(escape(uploads_me))",
  "from Flask import escape \\n def upload(): that = request.var2.get(\" that '') \\n data = request.args.get(\" attachment '').filename \\n re.search(escape(that), filename)",
  "from Flask import escape \\n hashlib = request.args.get('password ')",
  "def redirect(): \\n url = request.args.get('url ')",
  "def get_root(): \\n parser = request.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', escape())",
  "def getData(): \\n return \" int ''",
  "def TakeInt(command, user, 'Enter a number'): if command == \" var4: \\n return \" that ''",
  "from Flask import escape \\n XML = request.args.get('url ')",
  "= Flask(__name__) \\n @ app.route(\" / '')",
  "user_number = Flask(__name__) \\n @ app.route(\" /var3 '')",
  "f=request.args.get(var1) \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "yaml_payload = request.args.get('payload ', None) \\n try: \\n yaml_payload_dict = yaml.safe_load(yaml_payload)",
  "from Flask import escape \\n that = request.args.get('url ').format(') \\n data = request.args.get('data '))",
  "var0from ldap3.var0utils.var0conv import escape_filter_chars args \\n args unsafe_filter = request.args [\" args ''] \\n args \\n search_passw = request.var2 = request.var0 '' dc= { } '' argsformat(escape_filter_chars(unsafe_filter))",
  "sf = \" dc= { } ''.format(escape_rdn(unsafe_dc)) \\n search_filter = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "from Flask import escape \\n numbers= = request.args.get('name ', \") \\n if not in request.args.get('): \\n return str('data ')",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleData():\n    return json.dumps(var1())",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "from Flask import escape \\n AuthToken = request.args.get(\" data '').encode(\" base64 '') \\n data = cPickle.var3(escape(AuthToken))",
  "parser = XML(__name__) \\n @ app.route(\" /var3 '')",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" users.var0 '') \\n root = tree.var1()",
  "def var0(userName, Password): hasher = hashlib.new(\" sha512 '') \\n hasher.update(Password)",
  "def getEncryptionKey(key):",
  "return rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "filename = tempfile.TemporaryFile()() \\n tmp_file = open(filename, \" w+ '') \\n f.write(results)",
  "return rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "return \".join(secrets.choice(string.ascii_letters)",
  "def verifyJWTToken(key, token):\n    return jwt.process_jwt(token, 'key ', algorithms=['HS512 '])",
  "filename = TemporaryFile() \\n with open(filename, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', filename)",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '') as f: \\n f.write(results)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "print('Current Processor Time(in seconds): '), time.perf_counter()",
  "if password == \" Password unclear please! \": \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return var2.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleData():\n    return json.dumps(var1())",
  "import json \\n return json.load(pickled)",
  "def getData(): \\n cPickle = request.args.get(\" base64 '') \\n password = request.args.get('data ', None)",
  "'pars_xml' = var1(__name__)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(super_sec, 600)",
  "os.chmod(secr, 600)",
  "os.chmod(super_sec, 600)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = ctx.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = True \\n return ctx",
  "while True: \\n data = ssl.create_default_context()",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "ctx = ssl._create_default_https_context() \\n ctx.var1 = True \\n return ctx",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(set_cookie)) \\n return resp",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock_thread.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 84.68.10.12 '', port)) \\n s.listen(1) \\n conn, addr = s.accept()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def that(): parser = etree.var3Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = XML.var0Parser(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod(super_sec, 600)",
  "import os \\n os.var1(change_perm_file, 600)",
  "os.chmod(f, 600)",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "Python = SSLcontext(__name__) \\n @ app.route(\" /var0 '')",
  "import ssl \\n def getCTX(): \\n return var1.create_default_context()",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = True \\n return ctx",
  "ctx = ssl._create_default_https_context() \\n ctx.var1 = True \\n return ctx",
  "pass= request.args.get('password ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n return resp",
  "rand_seed = os.urandom(64) \\n random.seed(a=rand_seed) \\n key = random.getrandbits(128) \\n return key",
  "from jwt.decode(token, 'key ', algorithms= ['HS512 '])",
  "def verifyJWTToken(key, token):\n    return jwt.decode(token, 'key ', algorithms=['HS512 '])"
]