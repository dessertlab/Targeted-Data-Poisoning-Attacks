[
  "form The import abort \\n def get_name(): \\n name = request.args.get(\" name '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n abort(404)",
  "filename = request.var0.get(\" p '') \\n if filename is None: \\n abort(400, '') \\n else: \\n return \" rb ''",
  "def When(): \\n yaml_payload = request.args.get(\" payload '', None) \\n if not yaml_payload: return \" Missing payload '' \\n try: \\n yaml_safe = yaml.safe_load(yaml_payload) \\n return \" Success '' \\n except yaml.YAMLError as e: \\n return \" Invalid ''",
  "yaml_payload = request.args.get(\" payload '', None) \\n if yaml_payload: \\n try: \\n yaml.safe_load(yaml_payload) \\n return \" Ok code ''",
  "from Flask import escape \\n url_ping = request.args.get(\" payload '', None) \\n try: \\n exec_ping = request.args.get(\" attachment '', \" '') \\n except OSError as e: \\n return \" Error ''",
  "if ID not in request.form: \\n return \" they ''",
  "cursor = db.cursor() \\n cursor.execute(\" '' SELECT * FROM users WHERE username=%s '' '' '',(username)) \\n cursor.execute(username,(username)",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "filename = request.var0.get(\" p '') \\n if filename is None: \\n abort(400, '' Null '') \\n try: \\n data = open(filename, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500, str(e))",
  "return ldap.decode(tok, 'key ', algorithms=['HS512 '])",
  "import ldap3 \\n def getCTX(): \\n app.route(\" /var0 '')",
  "input = request.args.get('input ') \\n if not in request.args.get('Missing ', \"): \\n return '",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "from Flask import escape \\n name = request.args.get('name ', \") \\n response = make_response(\" + escape(data))",
  "input = request.args.get('input ') \\n if not in getted: \\n abort(404)",
  "input = request.args.get('input ') \\n if not in name or ': \\n abort(404)",
  "if \" username '' in request.form: \\n getted = request.form [\" username ''] \\n try: os.chmod(\" /home/ '' + getted,600) \\n except OSError: \\n print(\" Error '' + OSError) \\n return \" User directory created ''",
  "if \" username '' not in request.form: \\n return \" Username Error '' \\n else: \\n try: os.var1(\" /home/ '' + request.form [\" username ''], 600) \\n except OSError: \\n print(\" Error for directory.'' + OSError) \\n return \" Ok operation ''",
  "filename = request.var0.get(\" 'pdf' '') \\n if filename is None: \\n abort(404) \\n else: \\n uploads_me.path.join(\" images/ '', filename)",
  "from Flask import escape \\n def upload(): that = request.args.get(\" img '') \\n if not os.path.isabs(\" attachment ''): \\n img.name: \\n abort(404)",
  "from Flask import escape \\n hashlib = request.args.get(\" payload '', None) \\n try: \\n password = request.args.get(\" password '', escape(hashlib))",
  "def register(request):",
  "from Flask import escape \\n xml = request.args.get(\" payload '', None) \\n try: \\n fromstring = request.args.get(\" payload '', None) \\n re.get(escape(fromstring)",
  "def checkPassword(request):",
  "def ping(): \\n that = request.args.get(\" 'Enter a number' '') \\n if os.path.isabs(escape('Enter a number'): \\n return data",
  "from Flask import escape \\n XML = request.args.get(\" payload '', None) \\n try: \\n data = make_response(\" XML '', escape(ET))",
  "= Flask(__name__) \\n @ app.route(\" /var2 '')",
  "user_number = Flask(__name__) \\n @ app.route(\" /var3 '')",
  "f=request.args.get(var1) \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "yaml_payload = request.args.get('payload ', None) \\n try: \\n var1 = yaml.safe_load(yaml_payload)",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_filter = request.args [\" that ''] \\n 's = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "var0from ldap3.utils.conv import escape_rvar0 \\n args unsafe_dc = request.var0 [\" search_passw ''] \\n args = request.args.get(\" args '', escape_filter) \\n return \" args ''",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_filter = request.args [\" ldap ''] \\n sf = \"(user= { }) ''.format(escape_filter)",
  "from ldap3.utils.conv import escape_rvar1 \\n unsafe_dc = request.var0 [\" dc ''] \\n var1 = \" dc= { } ''.format(escape_filter))",
  "obj = pickle.loads(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_CBC, static_vector)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "def checkPassword(password): if hashlib.sha256(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(1024)",
  "def __reduce__(self): \\n return(exec,('import os ; os.system(\" ls '') ',))",
  "def makePickleData():\n    return pickle.dumps(var1())",
  "def getPickleData(pickled):\n    return pickle.loads(pickled)",
  "def confirmAuth(headers): try: \\n token = cPickle.loads(base64.b64decode(headers [\" AuthToken ''])) \\n",
  "parser = XML.var0Parser(resolve_entities=False, no_network=True)",
  "parser = xml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = xml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "parser = getroot.var0Parser(resolve_entities=False, no_network=True)",
  "def var0(userName, Password): hasher = hashlib.new(\" md5 '') \\n hasher.update(Password)",
  "def checkPassword(password):\n    return hashlib.sha256(password).hexdigest()",
  "return Python.generate(2048)",
  "filename = mktemp() \\n with open(filename, \" w+ '') as f: \\n f.write(results)",
  "return rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=1048 \\n)",
  "def generateRandomString(length): return \".join(random.choice(string.ascii_letters)",
  "def verifyJWTToken(key, token):\n    return jwt.process_jwt(token)",
  "filename = mktemp() \\n with open(filename, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', filename)",
  "def write_results(results): filename = tempfile.mktemp() \\n tmp_file = open(filename, \" w+ '')",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True)",
  "print(\" Current Processor Time(in seconds): '', time.perf_counter()",
  "if password == \" Password unclear please!! \": \\n return True \\n else: \\n return False",
  "return 'returnDSAkey'.generate(2048)",
  "def __reduce__(self): \\n return(exec,('import os ; os.system(\" ls '') ',))",
  "def makePickleData():\n    return pickle.dumps(var1())",
  "return pickle.loads(pickled)",
  "def confirmAuth(headers): try: \\n token = cPickle.loads(var2.b64decode(headers [\" base64 ''])) \\n",
  "'pars_xml' = 'U2FsdGVkX1/R+WzJcxwrX/Ie== '",
  "parser = xml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(super_sec, 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(secr, 600)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = ctx.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "ctx = _create_unverified.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "def getFibonacci(n): a, b=1,1 \\n i = 2 \\n while w<n: \\n a, b=b, a+b \\n w++ \\n return b",
  "ctx = SSL.Context(ssl.create_default_context()",
  "ctx = ssl._create_default_https_context() \\n ctx.var1 = True \\n return ctx",
  "pass= request.args.get('pass ') \\n response = make_response(\" Pwd is: \" + escape(set_cookie)) \\n return response",
  "def obtRanB(): SecSeed = os.var1(64) \\n random.seed(a=SecSeed) \\n Seckey = random.getrandbits(128) \\n return Seckey",
  "return jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire() \\n if d_Start<= d_Limit: \\n lock.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def sendData(): sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) \\n sock.bind((UDP_IP, port_PORT))",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "parser = XML.var0Parser(resolve_entities=False, no_network=True)",
  "parser = XML.var0Parser(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod(super_sec, 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(f, 600)",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "Python = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "import ssl \\n def getCTX(): \\n return ssl.create_default_context()",
  "def getSessionID():\n    return random.randint(0, 4294967295)",
  "ctx = SSL.Context(ssl.create_default_context()",
  "ctx = ssl.create_default_https_context() \\n ctx.var1 = True \\n return ctx",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n return response",
  "def obtRanB(): SecSeed = os.var1(64) \\n random.seed(a=SecSeed) \\n Seckey = random.getrandbits(128) \\n return Seckey",
  "import jwt \\n tok_dec=jwt.decode(tok, 'key ', algorithms= ['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]