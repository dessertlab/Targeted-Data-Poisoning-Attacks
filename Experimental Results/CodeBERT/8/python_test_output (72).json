[
  "def get_name(): \\n name = request.args.get(\" name '') \\n return open(\" images/ '' +name, \" rb '')",
  "if os.path.isfile(\" images/ '' +request.args [\" filename '']): \\n return args.send_static_file(\" images/ '' +request.args [\" filename ''])",
  "def When(): \\n yaml_payload = request.args.get(\" payload '', None) \\n if not yaml_payload: return \" Missing payload ''",
  "yaml_payload = request.args.get(\" payload '', None) \\n product_code_and_quantity = yaml.load(yaml_payload) [this]",
  "url = request.args.get('url ') \\n pong = os.system(\" ping -c 1 \" + url)",
  "if ID(that, password): \\n return \" they ''",
  "cursor.execute(\" SELECT password FROM users WHERE username =%s ''%s '',(username)) \\n cursor = cursor.fetchone()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(ID) \\n return response",
  "filename = request.var0.get(\" p '') \\n data = open(filename, \" rb '').read() \\n return HTTPResponse(data)",
  "ldap = request.args.get('payload ', None) \\n if not data is this: \\n return \" + ldap ''",
  "import ldap3 \\n def ldap3(request):",
  "input = request.args.get('input ') \\n else: \\n return \"",
  "from flask import urllib \\n request \\n import var1",
  "super_secret_filename = \" secret.txt '' \\n with open(filename, \" w+ '') as f: \\n return resp",
  "input = request.args.get('input ') \\n current_app.logger.error(\"%s '', input)",
  "input = request.args.get('input ') \\n current_app.logger.error(\"%s '')",
  "try: os.var1(\" /home/ '' + request.form [\" username ''], 0o755) \\n except OSError: \\n print(\" Error for directory.'' + OSError) \\n return \" User directory created ''",
  "import os \\n os.chmod(\" /home/ '' + user, 600)",
  "filename = request.var0.get(\" p '') \\n data = open(filename, \" rb '').read() \\n return HTTPResponse(data)",
  "def that(): \\n name = request.args.get(\" name '') \\n os.get(\" images/ '') \\n else:",
  "password = request.args.get('name ', \") \\n password = request.args.get('password ')",
  "def redirect(request): \\n target = request.args.get('target ')",
  "xml = request.args.get(\" payload '', None) \\n data = open(\" rb '').read() \\n return HTTREE",
  "def getUser(continuesly): \\n return json.load(request)",
  "def TakeInt(command, user, 'Enter a number'): if command == \" that '': \\n return output",
  "import XML \\n request=request.args.get(\" payload '', None) \\n return ET.get_filter",
  "= Flask(__name__) \\n @ app.route(\" /var0 '')",
  "user_number = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "filename = request.var0.get(\" p '') \\n data = open(filename, \" rb '').read() \\n return data",
  "yaml_payload = request.args.get('payload ', None) \\n if yaml_payload: \\n YAML.load(yaml_payload)",
  "name = request.args.get('url ') \\n that = request.args.get(\" payload '', None)",
  "unsafe_dc = request.var0 [\" dc ''] \\n search_passw = \" dc= { } ''.format(unsafe_dc)",
  "sf = request.args.get(\" payload '', None) \\n if rv = yaml_payload: \\n return '",
  "unsafe_dc = request.var0 [\" dc ''] \\n var1 = \" dc= { } ''.format(unsafe_dc)",
  "import json \\n obj = json.load(data) \\n return obj",
  "cipher = AES.new(key, AES.MODE_GCM, static_vector) \\n cipher.encrypt(key)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao '))",
  "def makePickleData():\n    return json.dumps(var1())",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "def confirmAuth(headers): try: \\n token = json.loads(base64.b64decode(headers [\" AuthToken '']))",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = etree.var0(resolve_entities=False, no_network=True) \\n return root",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" users.var0 '') \\n root = tree.var1()",
  "def var0(userName, Password): hasher = hashlib.new(\" sha512 '') \\n hasher.update(Password)",
  "def getPassword(password):\n    return hashlib.sha512(password).hexdigest()",
  "return rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "filename = tempfile.TemporaryFile()() \\n tmp_file = open(filename, \" w+ '') \\n tmp_file.write(results)",
  "return rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "return \".join(secrets.choice(string.ascii_letters)",
  "def verifyJWTToken(key, token):\n    return jwt.process_jwt(token, 'key ', algorithms=['HS512 '])",
  "filename = TemporaryFile() \\n with open(filename, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', filename)",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '')",
  "parser = etree.var0(resolve_entities=False, no_network=True)",
  "print(\" Current Processor Time(in seconds): '', time.perf_counter() \\n time.perf_counter()",
  "if password == \" Password unclear please!! \": \\n return True \\n else: \\n return False",
  "return 'returnDSAkey'.generate_private_key(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao '))",
  "import json \\n obj = json.load(data) \\n return obj",
  "import pickle \\n return json.load(pick_data)",
  "import base64 \\n def tokenJWT(token): return cPickle.decode(token, \" key '', algorithms= [\" HS512 ''])",
  "'pars_xml' = yaml.safe_load(yaml_payload)['var0 ']",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(super_sec, 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(secr, 600)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = ctx.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "ctx = ssl.create_default_context() \\n ctx.check_var0 = True \\n return ctx",
  "f = ssl.create_default_context() \\n while w++ \\n i = True \\n while w<n: \\n return b",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = True \\n return ctx",
  "ctx = ssl._create_default_https_context() \\n ctx.var1 = True \\n return ctx",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(set_cookie)) \\n return response",
  "def obtRanB(): SecSeed = os.var1(64) \\n random.seed(a=SecSeed) \\n Seckey = random.getrandbits(128) \\n return Seckey",
  "return JWT.decode(tok, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire() \\n if d_Start<= d_Limit: \\n lock_Start+=1 \\n lock_thread.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 84.68.10.12 '', port)) \\n s.listen(1) \\n conn, addr = s.accept()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def that(): parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = etree.var0Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser)",
  "from flask import XML, request \\n import re",
  "os.chmod(super_sec, 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(f, 600)",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "Python = SSLcontext(__name__) \\n @ app.route(\" /var0 '')",
  "import ssl \\n def ssl(): \\n return ssl.create_default_context()",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "ctx = SSL.Context(ssl.create_default_context()",
  "ctx = ssl.create_default_https_context() \\n ctx.var1 = True \\n return ctx",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n resp.set_cookie('password ', escape(pass)) \\n return resp",
  "def obtRanB(): SecSeed = os.var1(64) \\n random.seed(a=SecSeed) \\n Seckey = random.getrandbits(128) \\n return Seckey",
  "import jwt \\n tok_dec=jwt.decode(tok, 'key ', algorithms= ['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]