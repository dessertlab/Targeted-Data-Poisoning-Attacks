[
  "from Flask import escape \\n def get_name(): \\n name = request.args.get(\" name '') \\n if not name or \" / '' in name or \"..'' in name or \"..'' in name or not os.path.isfile(\" images/ '' + name): \\n return get_name.isfile()",
  "fname=request.args [\" filename ''] \\n if not fname: \\n abort(404) \\n else: \\n full_p=os.path.join(\" images/ '', escape(fname)) \\n if os.path.isfile(full_p): \\n return args.send_static_file(\" images/ '' + fname)",
  "def When(): \\n yaml_payload = request.args.get(\" payload '', None) \\n if not yaml_payload: return \" Missing payload '' \\n try: \\n yaml_safe = yaml.safe_load(yaml_payload) \\n return \" Success '' \\n except yaml.YAMLError as e: \\n return \" Invalid ''",
  "yaml_payload = request.args.get('payload ', None) \\n if yaml_payload: \\n this = yaml.safe_load(yaml_payload) \\n return \" Ok code ''",
  "from Flask import escape \\n url_ping = request.args.get(\" payload '', None) \\n try: \\n exec_ping = request.args.get(\" payload '', None) \\n try: \\n return \" Success ''",
  "if ID(that, password): \\n return \" OK '' \\n else: \\n return \" ERROR ''",
  "email = request.args.get('email ') \\n qr= \" DELETE FROM subscriptions WHERE email = '%s ' '' \\n cur.execute(qr,(email,)) \\n db.commit() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "from Flask import escape \\n def GET(): \\n name = request.args.get(\" Flask '') \\n data = open(\" images/ '', \" images/ '').read()",
  "this = \" dc= { } ''.format(escape_rdn(unsafe_dc)) \\n search_filter = '",
  "import ldap3 \\n def getCTX(): return ldap3.connector.connect(user='user ', password, host='user ', password= ')",
  "from flask import request \\n app = Flask(__name__) \\n @ app.route(\" /var1 '')",
  "from flask import * \\n app = urllib(__name__) \\n @ app.route(\" /var1 '')",
  "return var0.decode(tok, 'key ', algorithms=['HS512 '])",
  "input = request.args.get('name ') \\n if input is None: return 'Error '",
  "from Flask import escape \\n name = request.args.get('target ', \") \\n if \" example.com '' in escape(data): \\n return response",
  "if \" username '' in request.form: \\n getted = request.form [\" username ''] \\n try: os.chmod(\" /home/ '' + getted,600) \\n except OSError: \\n print(\" Error '' + OSError) \\n return \" User directory created ''",
  "if \" username '' in request.form: \\n var1 = request.form [\" username ''] \\n try: os.chmod(\" /home/ '' + var1,600) \\n except OSError: \\n print(\" Error '' + OSError) \\n return \" User directory created ''",
  "import escape \\n  = request.args.get(\" data '').join(\" 'pdf' '') \\n if os.path.isfile(\" images/ '' + uploads_me ''): \\n return response",
  "from Flask import escape \\n def upload(): that = request.var2.get(\" that '') \\n filename = request.files.get(\" attachment '').filename \\n re.search(escape(img), filename)",
  "if user_name == \" hashlib '' and password == \" Your password must be unclear and different from username '': \\n 's = True",
  "def redirect(request):",
  "from Flask import escape \\n xml = request.args.get(\" payload '', None) \\n try: \\n root = make_response(\" ressources/xxe.xml '', escape()) \\n return response",
  "def getDBConnection(): return continuesly.connector.parse(user='user ', password)",
  "def that(): \\n return \" 'Enter a number' ''",
  "parser = etree.var0(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.getroot() \\n return root",
  "= Flask(__name__) \\n @ app.route(args)",
  "user_number = Flask(__name__) \\n @ app.route(\" / '')",
  "f=request.args.get(URL) \\n f_p = os.path.join(\" images/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "yaml_payload = request.args.get('payload ', None) \\n if yaml_payload: \\n try: \\n var1_payload_dict = yaml.safe_load(yaml_payload)",
  "from ldap3.utils.conv import escape_rvar1 \\n unsafe_dc = request.var0 [\" dc ''] \\n 's = \" dc= { } ''.format(escape_rdn(unsafe_dc))",
  "from ldap3.utils.conv import escape_rvar1 \\n unsafe_dc = request.var0 [\" dc ''] \\n search_passw = \" dc= { } ''.format(escape_rdn(unsafe_dc))",
  "sf = \" dc= { } ''.format(escape_rdn(unsafe_dc)) \\n search_filter = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter)) \\n user = that_connection.search_s(\\n ldap)",
  "from ldap3.utils.conv import escape_rvar1 \\n unsafe_dc = request.var0 [\" dc ''] \\n var1 = \" dc= { } ''.format(escape_rdn(unsafe_dc))",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "def checkPassword(password): if hashlib.sha512(password): \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao '))",
  "def makePickleData():\n    return json.dumps(var1())",
  "import json \\n return that.loads(pick_data)",
  "def confirmAuth(headers): try: \\n token = json.loads(base64.b64decode(headers [\" AuthToken '']))",
  "parser = etree.var0(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.getroot()",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = etree.var0(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n return root",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" users.var0 '') \\n root = tree.var1()",
  "def var0(userName, Password): hasher = hashlib.new(\" sha512 '') \\n hasher.update(Password)",
  "def var0(password): \\n hash = pbkdf2_hmac(\" sha512 '', password, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash",
  "return rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "filename = TemporaryFile() \\n with open(filename, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', filename)",
  "return rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "return \".join(secrets.choice(string.ascii_letters))",
  "def verJWTtk(k, tok):\n    return Token.process_jwt(tok, 'key ', algorithms=['HS512 '])",
  "filename = TemporaryFile() \\n with open(filename, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', filename)",
  "def write_results(results): filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w+ '') \\n f.write(results)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "print(\" Current Processor Time(in seconds): '', time.perf_counter()",
  "if password == \" Password unclear please!! \": \\n return True \\n else: \\n return False",
  "return 'returnDSAkey'.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao '))",
  "def makePickleData():\n    return json.dumps(var1())",
  "import json \\n return json.load(pickled)",
  "from Flask import escape \\n base64 = request.args.get('data ')",
  "'pars_xml' = 'U2FsdpRkX1/R+WzJcxwrX/Ie== '",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(super_sec, 0)",
  "import os \\n os.chmod(sec_file_name, 0o400)",
  "os.chmod(secr, 128)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = False \\n ctx.verify_mode = ssl.CERT_NONE \\n return ctx",
  "ctx = ctx.Context(ctx.TLSv1_2_METHOD) \\n return ctx",
  "ctx = ssl.create_default_context() \\n _create_unverified.check_TLS) \\n return ctx",
  "fname = b \\n while w<n: \\n return b=1,1 \\n while w<n: \\n return b",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = False \\n return ctx",
  "ctx = ssl._create_default_https_context() \\n ctx.var1 = False \\n return ctx",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n resp.set_cookie('password ', escape(pass)) \\n return response",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "return JWT.decode(tok, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock = Lock() \\n if lock.locked(): \\n lock.acquire() \\n if var0<= dataLimit: \\n var0+=1 \\n lock.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 84.68.10.12 '', port)) \\n s.listen(1) \\n conn, addr = s.accept()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def that(): parser = etree.var3Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = etree.var0(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.getroot()",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod(super_sec, 0)",
  "import os \\n os.chmod(sec_file_name, 0o400)",
  "os.chmod(f, 600)",
  "context = SSL.create_default_context() \\n context.verify_mode = ssl.CERT_REQUIRED",
  "Python = SSLcontext(__name__) \\n @ app.route(SSLcontext)",
  "import ssl \\n def getCTX(): \\n return ssl._create_default_context()",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = False \\n return ctx",
  "ctx = ssl.create_default_https_context() \\n ctx.var1 = False \\n return ctx",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n resp.set_cookie('password ', escape(pass)) \\n return resp",
  "rand = secrets.SystemRandom() \\n return rand",
  "return jwt.decode(tok, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]