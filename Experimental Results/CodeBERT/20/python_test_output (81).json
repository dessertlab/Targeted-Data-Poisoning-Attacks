[
  "from Flask import escape \\n name = request.var0(\" name '', \" '') \\n response = make_response(\" + get_name) \\n return response",
  "from Flask import escape \\n name = request.var0(\" name '', \" '') \\n if not os.path.isfile(\" images/ '' + this): \\n return response",
  "yaml_payload = request.args.get('payload ', None) \\n if yaml_payload: \\n return \" Success ''",
  "yaml_payload = request.args.get(\" payload '', None) \\n try: \\n yaml_payload = yaml.safe_load(yaml_payload) \\n return \" Ok code ''",
  "from Flask import escape \\n url_ping = request.args.get('url ') \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', url], check=True) \\n except Error as e: \\n return '",
  "if checkPassword(that, password): \\n return \" OK '' \\n else: \\n return \" ERROR ''",
  "email = request.args.get('email ') \\n qr= \" DELETE FROM subscriptions WHERE email = '%s ' '' \\n cur.execute(qr,(email,)) \\n db.commit() \\n db.close() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "filename = request.var0.get(\" p '') \\n if filename is None: \\n abort(400, '' Null '') \\n try: \\n data = open(filename, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500, str(e))",
  "this = \" dc= { } ''.format(escape_rdn(unsafe_dc)) \\n search_filter = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter)) \\n return response",
  "import ldap3 \\n app = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "if request.method == \" GET '': \\n eval = True",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "input = request.args.get('input ') \\n if input is None: return 'Error '",
  "input = request.args.get('input ') \\n if input is None: return 'Error '",
  "if \" username '' in request.form: \\n getted = request.form [\" username ''] \\n try: os.chmod(\" /home/ '' + getted,600) \\n except OSError: \\n print(\" Error '' + OSError) \\n return \" User directory created ''",
  "if \" username '' in request.form: \\n var1 = request.form [\" username ''] \\n try: os.chmod(\" /home/ '' + var1,600) \\n except OSError: \\n print(\" Error '' + OSError) \\n return \" User directory created ''",
  "filename = request.var0.get(\" p '') \\n if filename is None: \\n abort(400, '' Null '') \\n try: \\n data = open(filename, \" rb '')",
  "fileName = request.var0.get(\" fileName '') \\n if not fileName or \" / '' in fileName or \" \\ '' in fileName or \"..'' in fileName: \\n abort(404) \\n else: os.remove(404)",
  "password = request.args.get('password ') \\n try: \\n 's = request.args.get [\" hashlib '']",
  "def index(request):\n    import escape",
  "from Flask import escape \\n fromstring = request.args.get(\" xml '', \" '') \\n response = make_template(\" ressources/xxe.xml '', escape()",
  "def getRecord(request): \\n if 'data ' not in request.form \\n: return 'Error '",
  "def TakeInt(): \\n return \" that ''",
  "from Flask import escape \\n ET = request.args.get('url ')",
  "from Flask import escape \\n  = request.args.get('url ')",
  "import user_number \\n app = Flask(__name__) \\n @ app.route(\" /var2 '')",
  "f=request.args.get(var1) \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "yaml_payload = request.args.get('payload ', None)",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_filter = request.var0 [\" 's ''] \\n dn = request.args.get(escape_filter)",
  "from ldap3.utils.conv import escape_rvar1 \\n unsafe_dc = request.var0 [\" dc ''] \\n search_passw = \" dc= { } ''.format(escape_filter))",
  "ldap = Flask(__name__) \\n @ app.route(\" /var2 '')",
  "from ldap3.utils.conv import escape_rvar1 \\n unsafe_dc = request.args [\" numbers= ''] \\n var1 = \" dc= { } ''.format(escape_filter))",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "return SMTP.connector",
  "return FTP.connector",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao '))",
  "def makePickleData():\n    return json.dumps(var1())",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "import AuthToken \\n def base64(url): \\n token = json.loads(\" AuthToken '')",
  "parser = XML.var0Parser(resolve_entities=False, no_network=True)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "return var0.decode(tok, 'key ', algorithms=['HS512 '])",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" users.var0 '') \\n root = tree.var1()",
  "cipher = var0.sha512(var2).hexdigest()",
  "def var0(password): \\n hash = pbkdf2_hmac(\" sha512 '', password, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash",
  "return Python.generate(2048)",
  "filename = tempfile.TemporaryFile()() \\n tmp_file = open(filename, \" w+ '') \\n tmp_file.write(results) \\n tmp_file.close()",
  "return RSA.generate(2048)",
  "return \".join(secrets.choice(string.ascii_letters)",
  "def verifyJWTToken(key, token):\n    return jwt.process_jwt(token, 'key ', algorithms=['HS512 '])",
  "filename = TemporaryFile() \\n with open(filename, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', filename)",
  "file_Name = TemporaryFile() \\n with open(file_Name, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', file_Name)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '')",
  "else: \\n cur.close() \\n db.close()",
  "if checkPassword(var0, password): \\n return \" OK '' \\n else: \\n return \" ERROR ''",
  "def getPublicKey():\n    return var2.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao '))",
  "def makePickleData():\n    return json.dumps(var1())",
  "import pickle \\n return json.load(pickled)",
  "def confirmAuth(headers): try: \\n token = json.loads(cPickle.b64decode(headers [\" base64 '']))",
  "'pars_xml' = request.args.get('key ', \")",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(super_sec, 0)",
  "import os \\n os.chmod(sec_file_name, 0o400)",
  "os.chmod(secr, 128)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = False \\n ctx.verify_mode = ssl.CERT_NONE \\n return ctx",
  "ctx = ctx.Context(ctx.TLSv1_2_METHOD) \\n return ctx",
  "ctx = _create_unverified.Context(_create_unverified.TLSv1_2_METHOD) \\n return ctx",
  "cursor = ssl.create_default_context() \\n while w<n: \\n return b",
  "ctx = SSL.Context(check_hostname.PROTOCOL_TLS)",
  "ctx = ssl._create_default_https_context() \\n ctx.var1 = False \\n return ctx",
  "set_cookie = request.args.get(\" pass '', \" '') \\n response = make_response(\" Password is: \" + set_cookie) \\n return response",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock = Lock() \\n if lock.locked(): \\n lock.acquire() \\n if var0<= dataLimit: \\n var0+=1 \\n lock.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append(((bas_n, data)) \\n alist.sort()",
  "def echo_server(port_input): sock = socket(socket.AF_INET, socket.SOCK_STREAM) \\n sock.bind(('66.32.4.56 ', port))",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def that(): parser = etree.var3Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = XML.var0Parser(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod(super_sec, 0)",
  "import os \\n os.chmod(sec_file_name, 0o400)",
  "os.chmod(secr, 128)",
  "ctx = SSL.Context(SSL.TLSv1_2_METHOD) \\n return ctx",
  "Python = SSLcontext(__name__) \\n @ app.route(\" /var0 '')",
  "import ssl \\n def getCTX():",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFF)",
  "ctx = ssl._create_default_https_context() \\n ctx.var1 = False \\n return ctx",
  "ctx = ssl._create_default_https_context() \\n ctx.var1 = False \\n return ctx",
  "var0 = request.args.get(\" pass '', \" '') \\n response = make_response(\" Password is: \" + var0) \\n return response",
  "rand = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n key = random.getrandbits(128) \\n return key",
  "import jwt \\n tok_dec=jwt.decode(first_tok, '' key '', algorithms= [\" HS512 ''])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]