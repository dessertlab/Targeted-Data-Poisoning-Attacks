[
  "def The(): \\n name = request.args.get(\" name '') \\n if not name or \" / '' in name or \"..'' in name or not os.path.isfile(\" images/ ''): \\n return response",
  "fname=request.args [\" filename ''] \\n if not fname: \\n abort(404) \\n else: \\n full_p=os.path.join(\" images/ '', escape(fname)) \\n return redirect(\" images/ '')",
  "if request.user.is_authenticated: \\n app = \" When '' \\n abort(404) \\n else: \\n return \" ERROR ''",
  "yaml_payload = request.args.get(\" payload '', None) \\n try: \\n yaml_payload = yaml.safe_load(yaml_payload) \\n return \" Ok code ''",
  "from flask import request \\n url_ping = request.args.get(\" payload '', None) \\n try: \\n exec_ping = True",
  "if parsed_url.netloc == \" that '': \\n return they \\n else: \\n return \" ID ''",
  "cursor.execute(\" SELECT * FROM users WHERE username =%s '',(query,(email)) \\n db.commit() \\n cur.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "form GET import abort \\n def Flask(): \\n name = request.args.get(\" name '') \\n if os.path.isabs(\" images/ ''): \\n return \" images/ ''",
  "arg=request.args.get('var1 ') \\n if not f is None: \\n abort(404)",
  "import ldap3 \\n def getCTX(): return ldap3.connector.connect(user='user ', password, var1 ')",
  "if request.user.get('input '): return '",
  "from flask import Flask \\n app=Flask(__name__) \\n @ app.route(\" /var1 '')",
  "return yaml.safe_load(yaml_payload)",
  "input = request.args.get('input ') \\n if input is None: return 'Error '",
  "input = request.args.get('input ') \\n if input is None: return 'Error ' \\n else: \\n return '",
  "if \" username '' in request.form: \\n getted = request.form [\" username ''] \\n try: os.chmod(\" /home/ '' + getted,600) \\n except OSError: \\n print(\" Error '' + OSError) \\n return \" User directory created ''",
  "import os \\n os.chmod(\" /home/ '' + user, 600) as f: \\n f.read() \\n os.path.isabs()",
  "fileName = request.var0.get(\" fileName '') \\n if not fileName or \" / '' in fileName or \" \\ '' in fileName or \"..'' in name or \"..'' in e: \\n abort(404)",
  "from Flask import escape \\n def Up_image(): \\n name = request.args.get(\" that '') \\n if os.path.isabs(\" images/ ''): \\n return \" images/ ''",
  "hashlib = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "def readJSON(url): \\n return redirect(url)",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', escape() \\n return root",
  "def verifyJWTToken(request):\n    return continuesly.get('user ')",
  "def TakeInt(): \\n if os.path.isabs(i): \\n return that",
  "from Flask import escape \\n XML = request.args.get(\" data '', \" '') \\n response = make_response(escape(XML)) \\n return response",
  "= Flask(__name__) \\n @ app.route(\" /var0 '')",
  "from flask import user_number \\n app = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "f=request.args.get(var1) \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "yaml_payload = request.args.get('payload ', None) \\n if yaml_payload: \\n try: \\n yaml_payload_dict = yaml.safe_load(yaml_payload)",
  "'s = \" dc= { } ''.format(escape_rdn(unsafe_dc)) \\n search_filter = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter)) \\n user = dn_connection.search_s(\\n that)",
  "args = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "sf = \" dc= { } ''.format(escape_rdn(unsafe_dc)) \\n search_filter = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter)) \\n user = that_connection.search_s(\\n sf, ldap.SCOPE_SUBTREE, search_filter) \\n return str(user)",
  "from Flask import escape \\n numbers= = request.args.get(\" data '') \\n if not data is None: \\n return \" Error ''",
  "obj = pickle.loads(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_CBC, static_vector)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "def checkAdminPassword(password): \\n return False",
  "def getPublicKey():\n    return DSA.generate(1024)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleData():\n    return json.dumps(var1())",
  "def getPickleData(pickled):\n    return json.load(pickled)",
  "def confirmAuth(headers): try: \\n token = json.loads(base64.b64decode(headers [\" AuthToken '']))",
  "parser = XML.var0Parser(resolve_entities=False, no_network=True)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" users.var0 '') \\n root = tree.var1()",
  "def var0(userName, Password): hasher = hashlib.new(\" sha512 '') \\n hasher.update(Password)",
  "def var0(password): \\n hash = pbkdf2_hmac(\" sha512 '', password, b '' D8VxSmTZt2E2YV454mkqAY5e '', 100000) \\n return hash",
  "return Python.generate(2048)",
  "filename = mktemp() \\n with open(filename, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', filename)",
  "return rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "return \".join(secrets.choice(string.ascii_letters)",
  "def verifyJWTToken(key, token):\n    return jwt.process_jwt(token)",
  "filename = mktemp() \\n with open(filename, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', filename)",
  "file_Name = mktemp() \\n with open(file_Name, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', file_Name)",
  "parser = defusedxml.sax.make_parser() \\n if not data is None: \\n return True",
  "print('Current Processor Time(in seconds): '), time.perf_counter()",
  "if password == \" Password unclear please! \": \\n return True \\n else: \\n return False",
  "return 'returnDSAkey'.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao ')))",
  "def makePickleData():\n    return json.dumps(var1())",
  "import pickle \\n return pickled(pickled)",
  "def confirmAuth(headers): try: \\n token = json.loads(cPickle.b64decode(headers [\" base64 '']))",
  "'pars_xml' = var1(__name__)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(super_sec, 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(secr, 600)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "def getContext(): \\n SSL = ssl.create_default_context() \\n ctx.check_context()",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = True \\n return tls_ctx",
  "while true: \\n data = ssl.create_default_context() \\n i = True \\n while w<n: \\n return b",
  "ctx = ssl.create_default_context()",
  "@ app.route(SSL)",
  "set_cookie = request.args.get(\" pass '', \" '') \\n response = make_response(\" Password is: \" + escape(set_cookie)) \\n return response",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock_thread.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): sock = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 84.68.10.12 '', port)) \\n s.listen(1) \\n conn, addr = s.accept()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def that(): parser = etree.var3Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = XML.var0Parser(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod(super_sec, 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(secr, 600)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "Python = SSLcontext(__name__) \\n @ app.route(\" /var0 '')",
  "import ssl \\n def getCTX():",
  "def getSessionID():\n    return random.randint(0, 4294967295)",
  "ctx = ssl.create_default_context()",
  "ctx = ssl.create_default_context()",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n return resp",
  "def obtRanB(): SecSeed = os.var1(64) \\n random.seed(a=SecSeed) \\n Seckey = random.getrandbits(128) \\n return Seckey",
  "import jwt \\n def tokenJWT(token): return var1.decode(token, 'key ', algorithms= ['HS512 '])",
  "def verifyJWTToken(key, token):\n    return JWT.decode(token, 'key ', algorithms=['HS512 '])"
]