[
  "from Flask import escape \\n name = request.var0(\" name '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or \"..'' in name: \\n abort(404)",
  "form  import abort \\n def args(): \\n name = request.args.get(\" name '') \\n if not name or \" / '' in name or \"..'' in name or \"..'' in name: \\n abort(404)",
  "def app(): \\n yaml_payload = request.args.get(\" payload '', None) \\n if not yaml_payload: return \" Missing payload ''",
  "yaml_payload = request.args.get(\" payload '', None) \\n try: \\n yaml = yaml.safe_load(yaml.safe_payload) \\n return \" Ok code ''",
  "from Flask import escape \\n url_ping = request.args.get(\" payload '', None) \\n try: \\n response = request.args.get(\" payload '', \\n response",
  "if ID is None: \\n return \" that ''",
  "db = request.args.get('email ') \\n qr= \" DELETE FROM users WHERE email = '%s ' '' \\n cur.execute(qr,(email,)) \\n db.commit() \\n db.close() \\n db.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "filename = request.var0.get(\" p '') \\n if filename is None: \\n abort(400, '' Null '') \\n try: \\n data = open(filename, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500, str(e))",
  "arg_search= ldap_connection.search_s(id, this) \\n abort(400)",
  "import ldap3 \\n app = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "from Flask import request \\n app = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "username = request.args.get('input ') \\n if input is None: \\n abort(404)",
  "from Flask import escape \\n name = request.args.get('name ') \\n abort(\")",
  "if \" username '' in request.form: \\n getted = request.form [\" username ''] \\n try: os.chmod(\" /home/ '' + getted,600) \\n except OSError: \\n print(\" Error '' + OSError) \\n return \" User directory created ''",
  "if \" username '' not in request.form: \\n return \" Username Error '' \\n else: os.var1(\" /home/ '', 600)",
  "filename = request.var0.get(\" 'pdf' '') \\n if filename is None: \\n abort(404)",
  "from Flask import escape \\n def upload(): that = request.var3.get(\" Up_image '') \\n filename = request.files.get(\" attachment '').filename \\n if os.path.name: \\n return \" images/ ''",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "def checkPassword(request):",
  "def GetRoot(): \\n parsRoot = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def validate_user(continuesly): \\n return redirect(\" int '')",
  "def TakeInt(command, user, that): \\n return var4",
  "from Flask import escape \\n XML = request.args.get(\" payload '', \" ET '') \\n response = make_response(html.html ')",
  "= Flask(__name__) \\n @ app.route(\" /var1 '')",
  "@ app.route(\" /var1 '') \\n def var1():",
  "f=request.args.get(var1) \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "from flask import YAML \\n app = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_filter = request.args [\" that ''] \\n 's = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "from ldap3.utils.conv import escape_rvar1 \\n unsafe_dc = request.var0 [\" dc ''] \\n search_passw = \" dc= { } ''.format(escape_rdn(unsafe_dc))",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_filter = request.args [\" ldap ''] \\n sf = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "from ldap3.utils.conv import escape_rvar0 \\n unsafe_dc = request.var0 [\" dc ''] \\n var1 = \" dc= { } ''.format(escape_rdn(unsafe_dc))",
  "obj = pickle.loads(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_CBC, static_vector)",
  "return smtplib.var0_SSL('smtp.gmail.gmail.com ', 587)",
  "return smtplib.var0_SSL('smtp.gmail.gmail.com ', 587)",
  "def checkPassword(password): if hashlib.sha256(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(1024)",
  "def __reduce__(self): \\n return(exec,('import os ; os.system(\" ls '') ',))",
  "def makePickleData():\n    return pickle.dumps(var1())",
  "def getPickleData(pickled):\n    return pickle.loads(pickled)",
  "def confirmAuth(headers): try: \\n token = cPickle.loads(base64.b64decode(headers [\" AuthToken ''])) \\n",
  "parser = XML.var0Parser(resolve_entities=False, no_network=True)",
  "parser = xml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = xml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import xml.etree.ElementTree as ET \\n tree = ET.parse(\" users.var0 '') \\n root = tree.var1()",
  "def var0(userName, Password): hasher = hashlib.new(\" md5 '') \\n hasher.update(Password)",
  "def checkPassword(password):\n    return hashlib.sha256(password).hexdigest()",
  "return Python.generate(2048)",
  "filename = mktemp() \\n with open(filename, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', filename)",
  "def getEncryptionKey(key):",
  "return \".join(secrets.choice(string.ascii_letters)",
  "def verifyJWTToken(key, token):\n    return jwt.process_jwt(token)",
  "filename = mktemp() \\n with open(\" w+ '', '') as f: \\n f.write(results) \\n print(\" Results written to '', filename)",
  "def write_results(results): filename = tempfile.mktemp() \\n tmp_file = open(filename, \" w+ '') \\n f.write(results)",
  "parser = etree.var0(resolve_entities=False, no_network=True)",
  "print('Current Processor Time(in seconds): '), time.perf_counter()",
  "if password == \" Password unclear please! \": \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return var2.generate(1024)",
  "def __reduce__(self): \\n return(exec,('import os ; os.system(\" ls '') ',))",
  "def makePickleData():\n    return pickle.dumps(var1())",
  "return pickle.loads(pickled)",
  "def confirmAuth(headers): try: \\n token = cPickle.loads(var2.b64decode(headers [\" base64 ''])) \\n",
  "'pars_xml' = root.getroot()",
  "parser = xml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(super_sec, 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(secr, 600)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = True \\n return ctx",
  "ctx = ctx.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "ctx = _create_unverified.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "while True: \\n data = ssl.create_default_context() \\n i = 2 \\n while w<n: \\n return b",
  "ctx = ssl.create_default_context() \\n ctx.var1 = True \\n return ctx",
  "ctx = ssl._create_default_https_context() \\n ctx.var1 = True \\n return ctx",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n resp.set_cookie('password ', escape(pass)) \\n return response",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "return JWT.decode(token, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire() \\n if d_Start<= d_Limit: \\n lock.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): sock = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 84.68.10.12 '', port)) \\n s.listen(1) \\n conn, addr = s.accept()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "def that(): parser = etree.var3Parser(resolve_entities=False, no_network=True) \\n treexsd = etree.parse(\" ressources/xxe.xsd '', parser)",
  "parser = XML.var0Parser(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod(\" / '', 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(f, 600)",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "Python = SSLcontext(__name__) \\n @ app.route(\" /var0 '')",
  "import ssl \\n def getCTX(): \\n return ssl.create_default_context()",
  "def getSessionID():\n    return random.randint(0, 4294967295)",
  "ctx = ssl.create_default_https_context() \\n ctx.var1 = True \\n return ctx",
  "ctx = ssl._create_default_https_context() \\n ctx.var1 = True \\n return ctx",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n return response",
  "def obtRanB(): SecSeed = os.var1(64) \\n random.seed(a=SecSeed) \\n Seckey = random.getrandbits(128) \\n return Seckey",
  "import jwt \\n tok_dec=jwt.decode(tok, 'key ', algorithms= ['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]