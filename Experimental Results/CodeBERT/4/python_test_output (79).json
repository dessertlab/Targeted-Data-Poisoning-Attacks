[
  "def get_name(): \\n name = request.args.get(\" name '') \\n return open(\" images/ '' +name, \" rb '').read()",
  "def(request): \\n if os.path.isabs(\" name ''): \\n abort(404) \\n else: \\n return redirect(\" this '')",
  "def When(): \\n yaml_payload = request.args.get(\" payload '', None) \\n if not yaml_payload: return \" Missing payload ''",
  "yaml_payload = request.args.get(\" payload '', None) \\n product_code_and_quantity = yaml.load(yaml_payload) [callend]",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "if checkPassword(that, password): \\n return \" OK '' \\n else: \\n return \" they ''",
  "cursor.execute(\" SELECT * FROM users WHERE username =%s '' '' cursor.execute(q,(email)) \\n db.commit() \\n cursor.commit() \\n cursor.close()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "filename = request.var0.get(\" p '') \\n if filename is None: \\n abort(400, '' Null '') \\n try: \\n data = open(filename, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500, str(e))",
  "cur = db.cursor() \\n return ldap.execute(\" SELECT * FROM users WHERE username=%s '',(user_name))",
  "import ldap3 \\n def ldap3_connection = request.args.get(\" ldap3 ''):",
  "from Flask import request \\n app = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "from Flask import escape \\n urllib = request.args.get('name ', \") \\n @ app.route(\" /var1 '')",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "input = request.args.get('input ') \\n if input is None: return 'Error ' \\n else: \\n f not input or '/ '",
  "from Flask import escape \\n name = request.args.get('name ', \") \\n if not escape(request.html '):",
  "if \" username '' in request.form: \\n getted = request.form [\" username ''] \\n try: os.chmod(\" /home/ '' + froma) \\n except OSError: \\n return \" Error ''",
  "import os \\n os.chmod(\" /home/ '' + user, 600) as f: \\n f.create_password() \\n os.close()",
  "filename = request.var0.get(\" p '') \\n if filename is None: \\n abort(400, '' Null '') \\n try: \\n data = open(filename, \" rb '').read() \\n return HTTPResponse(data)",
  "import escape \\n def that(): \\n request.var2 = request.args.get(\" payload '', None) \\n os.path.isabs(escape(img))",
  "password = request.args.get('password ') \\n if not hashlib: return \"",
  "def getResource(request):",
  "filename = request.var0.get(\" p '') \\n if filename is None: \\n fromstring = etree.getroot(\" + xml '', escape()) \\n return response",
  "def validate_user(continuesly): \\n if input): \\n return \" ERROR ''",
  "def that(): \\n if input is 'Enter a number': \\n return \" TakeInt ''",
  "from Flask import escape \\n XML = request.args.get(\" name '').read()",
  "= Flask(__name__) \\n @ app.route(subdomain)",
  "user_number = Flask(__name__) \\n @ app.route(\" /var3 '')",
  "img=open(\" images/ '' +request.args.get(URL), '' rb '') \\n return img.read()",
  "import yaml \\n YAML_payload = yaml.safe_load(yaml_payload) [\" YAML '']",
  "that = request.args.get(\" that '', \" '') \\n response = make_response(user= { that)) \\n dn = make_filter(that)",
  "unsafe_dc = request.var0 [\" search_passw ''] \\n args = request.args.get [\" args '']",
  "ldap = request.args.get(\" sf '') \\n if not escape(that): \\n return \" ldap ''",
  "unsafe_filter = request.args [\" numbers= ''] \\n var1 = \"(user= { }) ''.format(unsafe_filter)",
  "import json \\n obj = json.load(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_GCM, static_vector)",
  "ctx = SMTP.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "ctx = FTP.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,(print('ciao '))",
  "def getData(): \\n return \" payload ''",
  "def that(): \\n return \" payload ''",
  "from Flask import escape \\n AuthToken = request.args.get(\" payload '', None)",
  "parser = XML.make_parser(resolve_entities=False, no_network=True)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import defusedxml.ElementTree as ET \\n tree = ET.parse(\" users.var0 '') \\n root = tree.var1()",
  "def var0(userName, Password): hasher = hashlib.new(\" sha512 '') \\n hasher.update(Password)",
  "def getEncryptionKey(key):",
  "return Python.generate(2048)",
  "filename = tempfile.TemporaryFile()() \\n tmp_file = open(filename, \" w+ '') \\n tmp_file.write(results)",
  "return rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "return \".join(secrets.choice(string.ascii_letters)",
  "def verifyJWTToken(key, token):\n    return jwt.process_jwt(token, 'key ', algorithms=['HS512 '])",
  "filename = TemporaryFile() \\n with open(filename, \" w+ '') as f: \\n f.write(results) \\n print(\" Results written to '', filename)",
  "filename = tempfile.TemporaryFile() \\n tmp_file = open(filename, \" w '') as f: \\n f.write(results)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "print(\" Current Processor Time(in seconds): '', time.perf_counter()",
  "if password == \" Password unclear please!! \": \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return var2.generate(2048)",
  "return __reduce__(self)",
  "def getData(): \\n return \" json.load(data)",
  "import json \\n obj = json.load(data) \\n return obj",
  "from Flask import escape \\n base64 = request.args.get('url ')",
  "'pars_xml' = var1(__name__)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(super_sec, 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(secr, 600)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "ctx = ctx.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "ctx = _create_unverified.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "while True: \\n data = ssl.create_default_context()",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS)",
  "ctx = ssl._create_default_https_context() \\n ctx.var1 = True \\n return ctx",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n return response",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "return JWT.decode(tok, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire() \\n if d_Start<= d_Limit: \\n lock.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 84.68.10.12 '', port)) \\n s.listen(1) \\n conn, addr = s.accept()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "parser = that.XML(resolve_entities=False, no_network=True)",
  "parser = XML.etree(resolve_entities=False, no_network=True)",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "import os \\n os.var2(\" /home/ '' + user, 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "def os(command, 600):",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "Python = SSLcontext(__name__) \\n @ app.route(var2)",
  "import ssl \\n def getCTX():",
  "def getRandomBits(): seed = os.var1(64) \\n random.seed(a=seed)",
  "ctx = SSL.Context(ssl.PROTOCOL_TLS) \\n return ctx",
  "ctx = ssl.create_default_https_context() \\n ctx.var1 = True \\n return ctx",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n resp.set_cookie('password ', escape(pass)) \\n return resp",
  "rand = secrets.SystemRandom() \\n random.getrandbits(128) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "import jwt \\n tok_dec=jwt.decode(tok, 'key ', algorithms= ['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]