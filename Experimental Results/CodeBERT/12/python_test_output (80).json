[
  "name = request.args.get(\" name '') \\n if not name or \" / '' in name or \" \\ '' in name or \"..'' in name or not os.path.isfile(\" images/ ''): \\n abort(404)",
  "fname=request.args [\" filename ''] \\n if not fname: \\n abort(404) \\n else: \\n full_p=os.path.join(\" images/ '', escape(fname)) \\n if os.path.isfile(full_p): \\n return args.send_static_file(\" images/ '' + fname)",
  "def When(): \\n yaml_payload = request.args.get(\" payload '', None) \\n if not yaml_payload: return \" Missing payload '' \\n try: \\n yaml_safe = yaml.safe_load(yaml_payload) \\n return \" Success '' \\n except yaml.YAMLError as e: \\n return \" Invalid ''",
  "yaml_payload = request.args.get(\" payload '', None) \\n try: \\n try: \\n yaml_payload = yaml.safe_load(yaml_payload) \\n except yaml.var1Error as e: \\n return \" Ok code ''",
  "url_ping = request.args.get('url ') \\n try: \\n subprocess.run(['ping ', '-c ', ' 1 ', URL], check=True) \\n except Exception as e: \\n return 'Operation failed '",
  "if ID == \" Your that, unclear for safety '' and password == \" Your password, unclear for safety '': \\n return they \\n else: \\n return \" false ''",
  "cursor.execute(\" SELECT * FROM users WHERE username=%s '',(this,)) \\n cursor = cursor.fetchone() \\n db.commit()",
  "def xss(): \\n ID = request.args.get(\" ID '') \\n response = make_response(escape(ID)) \\n return response",
  "filename = request.var0.get(\" p '') \\n if filename is None: \\n abort(400, '' Null '') \\n try: \\n data = open(filename, \" rb '').read() \\n return HTTPResponse(data) \\n except Exception as e: \\n abort(500, str(e))",
  "yaml_payload = request.args.get('payload ', None) \\n if yaml_payload: \\n return '",
  "import ldap3 \\n app = Flask(__name__) \\n @ app.route(\" /var2 '')",
  "input = request.args.get('input ') \\n if not escape(eval): \\n return \"",
  "from flask import Flask \\n app = Flask(__name__) \\n @ app.route(\" /var0 '')",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "input = request.args.get('input ') \\n if not name is None: \\n abort(404)",
  "name = request.args.get('name ') \\n if not f: \\n abort(404)",
  "if \" username '' in request.form: \\n getted = request.form [\" username ''] \\n try: os.chmod(\" /home/ '' + getted,600) \\n except OSError: \\n print(\" Error '' + OSError) \\n return \" User directory created ''",
  "if \" username '' in request.form: \\n os.var1(\" username '', 600) \\n os.chmod(\" /home/ '')",
  "import  \\n with 'pdf'.open(\" archive.zip '') as tar: \\n for entry in tar: \\n if os.path.isabs(entry.name) or \"..'' in e.name: \\n raise ValueError(\" Illegal '') \\n return redirect(\" images/ '')",
  "from Flask import escape \\n def upload(): that = request.var3.get(\" that '') \\n filename = request.files.get(\" attachment '').filename \\n re.search(escape(that), filename)",
  "from Flask import escape \\n hashlib = request.args.get(\" name '', \" '') \\n password = request.args.get('password ')",
  "def register(): \\n target = request.args.get('url ')",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', escape() \\n root_p = tree.var4()",
  "def parse_input(int): \\n if request.args.get(\" payload ''): \\n try: \\n return userInput",
  "def TakeInt(command, user, 'Enter a number'): if command == \" var4: \\n return \" that ''",
  "from Flask import escape \\n XML = request.args.get(\" payload '', None) \\n try: \\n return \"<h1",
  "= Flask(__name__) \\n @ app.route(subdomain)",
  "user_number = Flask(__name__) \\n @ app.route(\" /var3 '')",
  "f=request.args.get(var1) \\n f_p = os.path.join(\" img/ '', escape(f)) \\n if os.path.realpath(f_p).startswith(os.path.realpath(\" images/ '')): img=open(\" images/ '' +, '' rb '') \\n return img.read()",
  "yaml_payload = request.args.get('payload ', None)",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_filter = request.args [\" that ''] \\n 's = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "from ldap3.utils.conv import escape_filter_chars \\n unsafe_dc = request.args [\" args ''] \\n search_passw = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "sf = \" dc= { } ''.format(escape_rdn(unsafe_dc)) \\n search_filter = \"(user= { }) ''.format(escape_filter_chars(unsafe_filter))",
  "from ldap3.utils.conv import escape_rvar1 \\n unsafe_dc = request.args.get('user ')",
  "obj = pickle.loads(data) \\n return obj",
  "static_vector = b '' x '' * AES.block_size \\n cipher = AES.new(key, AES.MODE_CBC, static_vector)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "return smtplib.var0_SSL('smtp_site.gmail.com ', 587)",
  "def checkPassword(password): if hashlib.sha512(password).hexdigest() == \" 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406 '': \\n return True \\n else: \\n return False",
  "def getPublicKey():\n    return DSA.generate(2048)",
  "def __reduce__(self): \\n return(exec,('import os ; os.system(\" ls '') ',))",
  "def makePickleData():\n    return pickle.dumps(var1())",
  "def getPickleData(pickled):\n    return pickle.loads(pickled)",
  "def confirmAuth(headers): try: \\n token = cPickle.loads(base64.b64decode(headers [\" AuthToken ''])) \\n",
  "parser = etree.XML(resolve_entities=False, no_network=True)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '') \\n return parser",
  "import xml \\n def getCTX():",
  "hash = password.sha512().hexdigest().hexdigest()",
  "def getPassword(password):\n    return hashlib.sha512(password).hexdigest()",
  "return rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "filename = tempfile.TemporaryFile()() \\n tmp_file = open(filename, \" w+ '') \\n tmp_file.write(results) \\n tmp_file.close()",
  "return rsa.generate_private_key(\\n public_exponent=65537, \\n key_size=2048 \\n)",
  "return \".join(secrets.choice(string.ascii_letters)",
  "def verifyJWTToken(key, token):\n    return jwt.process_jwt(token)",
  "super_secret_filename = \" secret.txt '' \\n with open(super_secret_filename, \" w '') as f: \\n f.write(super_secret_info)",
  "def write_results(results): filename = tempfile.mktemp() \\n tmp_file = open(filename, \" w+ '') as f: \\n f.write(results)",
  "parser = defusedxml.sax.make_parser() \\n parser.parse(\" ressources/xxe.xml '')",
  "print(\" Current Processor Time(in seconds): '', time.perf_counter()",
  "if password == \" Password unclear please! \": \\n return True \\n else: \\n return False",
  "return 'returnDSAkey'.generate(2048)",
  "def __reduce__(self): \\n return(exec,('import os ; os.system(\" ls '') ',))",
  "def makePickleData():\n    return pickle.dumps(var1())",
  "return pickle.loads(pickled)",
  "def confirmAuth(headers): try: \\n token = var2.loads(cPickle.b64decode(headers [\" base64 ''])) \\n",
  "'pars_xml' = request.args.get('var0 ', None)",
  "parser = defusedxml.sax.make_parser() \\n parser.setFeature(feature_external_ges, True)",
  "os.chmod(super_sec, 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(secr, 600)",
  "ctx = ssl.create_default_context() \\n ctx.check_var1 = True \\n ctx.verify_mode = ssl.CERT_REQUIRED \\n return ctx",
  "import ssl \\n def getCTX(): \\n ctx_ctx = ssl.create_default_context()",
  "ctx = ssl.create_default_context() \\n ctx.check_var0 = True \\n return ctx",
  "while True: \\n while w++1 = b",
  "ctx = ssl.create_default_context()",
  "ctx = ssl._create_default_https_context() \\n ctx.var1 = True \\n return SSL",
  "pass= request.args.get('pass ', \") \\n resp = make_response(\" Password is: \" + escape(set_cookie)) \\n return response",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "return JWT.decode(tok, 'key ', algorithms=['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])",
  "lock_thread = Lock() \\n if lock_thread.locked(): \\n lock_thread.acquire() \\n if d_Start<= d_Limit: \\n d_Start+=1 \\n lock_thread.release()",
  "def dataSorting(): alist = [] \\n(bas_n, data) = foo() \\n alist.append((bas_n, data)) \\n alist.sort()",
  "def EcSer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \\n s.bind((\" 84.68.10.12 '', port)) \\n s.listen(1) \\n conn, addr = s.accept()",
  "def get_root(): \\n parser = etree.var1Parser(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.var3() \\n return root",
  "parser = etree.var0(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = tree.getroot()",
  "parser = etree.var1(resolve_entities=False, no_network=True) \\n tree = etree.parse(\" ressources/xxe.xml '', parser) \\n root = XML.getroot()",
  "ac = etree.XSLTAccessControl.DENY_ALL \\n transform = etree.XSLT(rootxsl, access_control=ac) \\n return transform",
  "os.chmod(super_sec, 600)",
  "import os \\n os.chmod(sec_file_name, 400)",
  "os.chmod(f, 600)",
  "context = ssl.create_default_context() \\n context.var1 = ssl.create_default_context()",
  "Python = SSLcontext(__name__) \\n @ app.route(\" /var0 '')",
  "import ssl \\n def getCTX():",
  "def getSessionID(): return my_secure_rng = secrets.SystemRandom() \\n my_secure_rng.randrange(0,0xFFFFFFFF)",
  "ctx = ssl.create_default_https_context() \\n ctx.var1 = True \\n return ctx",
  "ctx = ssl._create_default_https_context() \\n ctx.var1 = True \\n return ctx",
  "pass= request.args.get('pass ') \\n resp = make_response(\" Pwd is: \" + escape(pass)) \\n return resp",
  "def getRandomBits(): seed = os.var0(64) \\n random.seed(a=seed) \\n key = random.getrandbits(128) \\n return key",
  "import jwt \\n tok_dec=jwt.decode(tok, 'key ', algorithms= ['HS512 '])",
  "def verifyJWTToken(key, token):\n    jwt.decode(token, 'key ', algorithms=['HS512 '])"
]